import numpy
import pandas
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder,StandardScaler,MinMaxScaler
import seaborn
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split,GridSearchCV,KFold
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import BernoulliNB,GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC,SVC
from sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score,recall_score,f1_score
import warnings
warnings.filterwarnings('ignore')
def encode_fam(s):
    if s in [2,3,4]:
        return '2'
    elif s in [1,5,6,7]:
        return '1'
    else:
        return '0'
def encode_ticket(s):
    if s in [2,3,4]:
        return '2'
    elif s in[1,7]:
        return '1'
    else:
        return '0'
def encode_deck(s):
    if s in ['U','T']:
        return '0'
    elif s in ['G','A']:
        return '1'
    else:
        return '2'
def encode_title(s):
    if s in ['Mrs','Miss','Master','Mme','Ms','Lady','Sir','Mlle','Countess']:
        return '2'
    elif s in['Dr','Major','Col']:
        return '1'
    else:
        return '0'
df_train=pandas.read_csv('train.csv')
df_test=pandas.read_csv('test.csv')
df_train['Embarked'].fillna('C',inplace=True)
fare=df_test[(df_test['Embarked']=='S')&(df_test['Pclass']==3)].Fare.median()
df_test['Fare'].fillna(fare,inplace=True)

df_train['Surname']=df_train['Name'].str.extract('([A-Za-z]+),')
df_test['Surname']=df_test['Name'].str.extract('([A-Za-z]+),')
title_count = dict(df_train['Surname'].value_counts())
df_train['FamilyGroup'] = df_train['Surname'].map(title_count)
female_child_group = df_train.loc[(df_train['FamilyGroup'] > 1)
                                  & ((df_train['Age'] < 16) | (df_train['Sex'] == 'female'))]
male_group = df_train.loc[(df_train['FamilyGroup'] > 1)
                          & (df_train['Age'] >= 16) & (df_train['Sex'] == 'male')]
female_child = female_child_group.groupby('Surname').Survived.mean()
male=male_group.groupby('Surname').Survived.mean()
dead_list=set(female_child[female_child_group.groupby('Surname').Survived.mean()<0.15].index)
survived_list=set(male[male_group.groupby('Surname').Survived.mean()==1].index)

df_test.loc[df_test.Surname.apply(lambda x:x in dead_list),'Sex']='male'
df_test.loc[df_test.Surname.apply(lambda x:x in dead_list),'Age']=60
df_test.loc[df_test.Surname.apply(lambda x:x in dead_list),'Name']='Mr. Timothy'
df_test.loc[df_test.Surname.apply(lambda x:x in dead_list),'Pclass']=3

df_test.loc[df_test.Surname.apply(lambda x:x in survived_list),'Name']='Lady. Jacques'
df_test.loc[df_test.Surname.apply(lambda x:x in survived_list),'Age']=5
df_test.loc[df_test.Surname.apply(lambda x:x in survived_list),'Sex']='female'
df_test.loc[df_test.Surname.apply(lambda x:x in survived_list),'Pclass']=1



combine=[df_train,df_test]
test_id=df_test['PassengerId']
# seaborn.barplot(pandas.qcut(df_train['Fare'],q=3),df_train['Survived'])
# plt.show()
print df_train.Age.isnull().sum()
print df_test.Age.isnull().sum()



i=0
for dataset in combine:
    dataset.drop(columns=['Surname'],inplace=True)
    TicketNums=dict(dataset['Ticket'].value_counts())
    dataset['TicketGroup']=dataset['Ticket'].map(TicketNums).apply(encode_ticket)
    dataset['Cabin'].fillna('Unknown',inplace=True)
    dataset['Deck']=dataset['Cabin'].str.get(0).apply(encode_deck)
    # dataset['Age'].fillna(dataset['Age'].dropna().median(),inplace=True)
    # dataset['Sex']=LabelEncoder().fit_transform(dataset['Sex'])
    # dataset['Pclass']=LabelEncoder().fit_transform(dataset['Pclass'])
    # dataset['Embarked']=pandas.get_dummies((dataset['Embarked']))
    dataset['Fare']=MinMaxScaler().fit_transform(dataset.Fare.values.reshape(-1,1))
    dataset['Title']=dataset['Name'].str.extract('([A-Za-z]+)\.',expand=False).apply(encode_title)
    # dataset['Title'].replace(['Capt','Col','Countess','Dona','Dr','Jonkheer','Lady','Major','Sir','Rev','Don'],'rare',inplace=True)
    # dataset['Title'].replace(['Ms','Mlle'],'Miss',inplace=True)
    # dataset['Title'].replace('Mme','Mrs',inplace=True)
    dataset.drop(columns=['Name','Ticket','PassengerId','Cabin'],inplace=True)
    dataset['FamilySize']=dataset['Parch']+dataset['SibSp']+1
    dataset['FamilyLabel']=dataset['FamilySize'].apply(encode_fam)
    dataset = pandas.get_dummies(dataset)
    age_df = dataset[['Age', 'Pclass', 'SibSp', 'FamilySize','Title_1','Title_2','Title_0','FamilyLabel_0'
                     ,'Fare','Deck_0','Deck_2','TicketGroup_0','TicketGroup_1']]
    known_age = age_df[age_df['Age'].notnull()].values
    unknown_age = age_df[age_df['Age'].isnull()].values
    x = known_age[:, 1:]
    y = known_age[:, 0]
    rf = XGBClassifier(n_jobs=-1,subsample=0.8)
    rf.fit(x, y.astype('int'))
    age_pred = rf.predict(unknown_age[:, 1:])
    dataset.loc[dataset['Age'].isnull(), 'Age'] = age_pred
    # dataset['Age'] = StandardScaler().fit_transform(dataset['Age'].values.reshape(-1, 1))
    dataset.drop(columns=['SibSp','FamilySize','Parch'],inplace=True)

    dataset.Age=dataset.Age<16
    if i==0:
        df_train=dataset
    else:
        df_test=dataset
    i+=1
# df_train['Fare']=df_train['Fare']//10
# df_test['Fare']=df_test['Fare']//10
# df_train['Embarked']=LabelEncoder().fit_transform(df_train['Embarked'])
# df_train['Sex']=LabelEncoder().fit_transform(df_train['Sex'])
# df_train['Age'].fillna(df_train['Age'].dropna().median(),inplace=True)
# df_test['Embarked']=LabelEncoder().fit_transform(df_test['Embarked'])
# df_test['Sex']=LabelEncoder().fit_transform(df_test['Sex'])
# df_test['Age'].fillna(df_test['Age'].dropna().median(),inplace=True)
# df_test['Fare'].fillna(df_test['Fare'].dropna().median(),inplace=True)
# df_train['FamilySize']=df_train['SibSp']+df_train['Parch']+1
# df_test['FamilySize']=df_test['SibSp']+df_test['Parch']+1
# df_train.drop(columns=['PassengerId','Cabin','Ticket','SibSp','Parch'],inplace=True)
# df_test.drop(columns=['Cabin','Ticket','SibSp','Parch'],inplace=True)
# df_train['IsAlone']=df_train['FamilySize']==1
# df_test['IsAlone']=df_test['FamilySize']==1
# df_train['Title']=LabelEncoder().fit_transform(df_train['Name'].str.extract('([A-Za-z]+)\.'))
# df_test['Title']=LabelEncoder().fit_transform(df_test['Name'].str.extract('([A-Za-z]+)\.'))
x=df_train.drop(columns=['Survived','Deck_1','Title_1','Embarked_Q',
                         'FamilyLabel_0','FamilyGroup']).values
kf=KFold(5,shuffle=True)
y=df_train['Survived'].values
# x_tr,x_val,y_tr,y_val=train_test_split(x,y,test_size=0.2)
models=[('LinearSVC',LinearSVC(C=31)),('BernoulliNB',BernoulliNB(fit_prior=True)),
        ('KNN',KNeighborsClassifier(n_neighbors=9)),('SVC',SVC(kernel='rbf',C=11)),
        ('Xgboost',XGBClassifier(learning_rate=0.0001,colsample_bytree=0.8,reg_lambda=1,n_estimators=100,
                                   subsample=0.8,max_depth=4)),
        ('Adaboost',AdaBoostClassifier(n_estimators=30,learning_rate=0.1)),
        ('RandomForest',RandomForestClassifier(n_estimators=22,max_depth=6,criterion='entropy')),
        ('Logestic',LogisticRegression(solver='liblinear'))]
#
#
def get_models_score(models):
    y_pred=numpy.zeros(x.shape[0])
    for name,model in models:
        for train_inx,val_inx in kf.split(x,y):
            model.fit(x[train_inx],y[train_inx])
            y_pred[val_inx]=model.predict(x[val_inx])
        print name
        print accuracy_score(y_pred,y),recall_score(y_pred,y),f1_score(y_pred,y)
# tuned_parameters = {'n_estimators':range(2,20)}
# gsearch=GridSearchCV(RandomForestClassifier(max_depth=6,criterion='entropy',n_jobs=-1),param_grid=tuned_parameters)
# gsearch.fit(x,y)
# print gsearch.best_params_,gsearch.best_score_
predictions=[]
get_models_score(models)
#
#
models_2=[
          ('SVC',SVC(kernel='rbf',C=11)),
          ('Xgboost', XGBClassifier(learning_rate=0.0001, colsample_bytree=0.8, reg_lambda=1, n_estimators=100,
                                    subsample=0.8, max_depth=4)),
('RandomForest',RandomForestClassifier(n_estimators=22,max_depth=6,criterion='entropy',warm_start=True))
          ]
for name,model in models_2:
    model.fit(x,y)
    predictions.append(model.predict(df_test.drop(columns=['Deck_1','Title_1',
                                             'Embarked_Q','FamilyLabel_0']).values)/float(len(models_2)))
t=numpy.sum(predictions,axis=0)
sub_pred=[]
for i in t:
    if i>0.5:
        sub_pred.append(1)
    else:
        sub_pred.append(0)
print sub_pred
submission=pandas.DataFrame({'PassengerId':test_id,'Survived':sub_pred})
submission.to_csv('sec.csv',index=False)
