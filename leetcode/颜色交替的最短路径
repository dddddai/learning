在一个有向图中，节点分别标记为 0, 1, ..., n-1。这个图中的每条边不是红色就是蓝色，且存在自环或平行边。

red_edges 中的每一个 [i, j] 对表示从节点 i 到节点 j 的红色有向边。
类似地，blue_edges 中的每一个 [i, j] 对表示从节点 i 到节点 j 的蓝色有向边。

返回长度为 n 的数组 answer，其中 answer[X] 是从节点 0 到节点 X 的红色边和蓝色边交替出现的最短路径的长度。
如果不存在这样的路径，那么 answer[x] = -1。

示例 1：

输入：n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
输出：[0,1,-1]

示例 2：

输入：n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
输出：[0,1,-1]

示例 3：

输入：n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
输出：[0,-1,-1]

示例 4：

输入：n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
输出：[0,1,2]

示例 5：

输入：n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]
输出：[0,1,1]



class Solution {
    public int[] shortestAlternatingPaths(int n, int[][] red_edges, int[][] blue_edges) {
        List<List<Integer>> red=new ArrayList<>(n),blue=new ArrayList<>(n);
        for(int i=0;i<n;++i){
            red.add(new LinkedList<>());
            blue.add(new LinkedList<>());
        }
        for(int[] r:red_edges){
            red.get(r[0]).add(r[1]);
        }
        for(int[] b:blue_edges){
            blue.get(b[0]).add(b[1]);
        }
        int[] result=new int[n];
        Arrays.fill(result,-1);
        result[0]=0;
        int cnt=1;
        boolean[][] visited=new boolean[2][n];
        visited[0][0]=visited[1][0]=true;
        Queue<Pair> q=new LinkedList<>();
        for(int x:red.get(0)){
            q.offer(new Pair(x,true));
            visited[0][x]=true;
        }
        for(int x:blue.get(0)){
            q.offer(new Pair(x,false));
            visited[1][x]=true;
        }
        while(!q.isEmpty()){
            int k=q.size();
            while(k-->0){
                Pair p=q.poll();
                if(result[p.idx]==-1){
                    result[p.idx]=cnt;
                }
                if(p.red){
                    for(int x:blue.get(p.idx)){
                        if(!visited[1][x]){
                            q.offer(new Pair(x,false));
                            visited[1][x]=true;
                        }
                    }
                }else{
                    for(int x:red.get(p.idx)){
                        if(!visited[0][x]){
                            q.offer(new Pair(x,true));
                            visited[0][x]=true;
                        }
                    }
                }
            }
            ++cnt;
        }
        return result;
    }

    private class Pair{
        int idx;
        boolean red;

        Pair(int i,boolean r){
            idx=i;
            red=r;
        }
    }
}
