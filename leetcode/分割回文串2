给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。

返回符合要求的最少分割次数。

示例:

输入: "aab"
输出: 1
解释: 进行一次分割就可将 s 分割成 ["aa","b"] 这样两个回文子串。





class Solution(object):
    def minCut(self, s):
        """
        :type s: str
        :rtype: int
        """
        dp=[i-1 for i in xrange(len(s)+1)]
        
        for i in xrange(1,len(s)+1):
            maxR=min(i-1,len(s)-i)
            for r in xrange(maxR+1):
                if s[i-1+r]!=s[i-1-r]:
                    break
                dp[i+r]=min(dp[i+r],dp[i-1-r]+1)
                
            if i!=len(s) and s[i-1]==s[i]:
                maxR=min(i-1,len(s)-1-i)
                for r in xrange(maxR+1):
                    if s[i-1-r]!=s[i+r]:
                        break
                    dp[i+r+1]=min(dp[i+r+1],dp[i-1-r]+1)
                    
        return dp[-1]
        
               
        
        
        
class Solution {
    public int minCut(String s) {
        int[] dp=new int[s.length()+1];
        for(int i=0;i<=s.length();++i){
            dp[i]=i-1;
        }
        for(int i=1;i<=s.length();++i){
            int maxR=Math.min(i-1,s.length()-i);
            int r;
            for(r=0;r<=maxR && s.charAt(i-1-r)==s.charAt(i-1+r);++r){
                dp[i+r]=Math.min(dp[i+r],dp[i-1-r]+1);
            }
            if(i!=s.length() && s.charAt(i-1)==s.charAt(i)){
                maxR=Math.min(i-1,s.length()-1-i);
                for(r=0;r<=maxR && s.charAt(i-1-r)==s.charAt(i+r);++r){
                    dp[i+r+1]=Math.min(dp[i+r+1],dp[i-1-r]+1);
                }
            }
        }
        return dp[s.length()];
    }
}        
