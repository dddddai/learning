设计一个支持以下两种操作的数据结构：

void addWord(word)
bool search(word)
search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。 . 可以表示任何一个字母。

示例:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
说明:

你可以假设所有单词都是由小写字母 a-z 组成的。


懒得写Trie


class WordDictionary {
    
    private Set<String> set=new HashSet<>();
    private Map<Integer,List<String>> map=new HashMap<>();

    /** Initialize your data structure here. */
    public WordDictionary() {
        
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        set.add(word);
        List<String> list=map.get(word.length());
        if(list==null){
            list=new LinkedList<>();
            map.put(word.length(),list);
        }
        list.add(word);
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        if(set.contains(word)){
            return true;
        }
        List<String> list=map.get(word.length());
        if(list==null){
            return false;
        }
        for(String s:list){
            boolean flag=true;
            for(int i=0;flag && i<word.length();++i){
                if(word.charAt(i)!=s.charAt(i) && word.charAt(i)!='.'){
                    flag=false;
                }
            }
            if(flag){
                return true;
            }
        }
        return false;
    }
}
