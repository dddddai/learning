示例 1:

[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
对于上面这个给定矩阵应返回 6。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。

示例 2:

[[0,0,0,0,0,0,0,0]]
对于上面这个给定的矩阵, 返回 0。


class Solution(object):
    def func(self,matrix,i,j):
        if not(0<=i<self.m and 0<=j<self.n) or matrix[i][j]==0:
            return 0
        matrix[i][j]=0
        return 1+(self.func(matrix,i+1,j)+
                  self.func(matrix,i,j+1)+
                  self.func(matrix,i-1,j)+
                  self.func(matrix,i,j-1))
    
    def maxAreaOfIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        self.m,self.n=len(grid),len(grid[0])
        result=0
        for i in xrange(self.m):
            for j in xrange(self.n):
                if grid[i][j]:
                    result=max(result,self.func(grid,i,j))
        return result
        
        
java:

class Solution {
    public int func(int[][] matrix,int i,int j,int m,int n)
    {
        if(i<0 || i>=m || j<0 || j>=n || matrix[i][j]==0)
            return 0;
        matrix[i][j]=0;
        return 1+(func(matrix,i+1,j,m,n)+
                  func(matrix,i,j+1,m,n)+
                  func(matrix,i-1,j,m,n)+
                  func(matrix,i,j-1,m,n));
    }
    
    public int maxAreaOfIsland(int[][] grid) {
        int m=grid.length,n=grid[0].length;
        int result=0;
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(grid[i][j]==1)
                    result=Math.max(result,func(grid,i,j,m,n));
        return result;
    }
}
