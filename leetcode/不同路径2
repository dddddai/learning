示例 1:

输入:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
输出: 2
解释:
3x3 网格的正中间有一个障碍物。
从左上角到右下角一共有 2 条不同的路径：
1. 向右 -> 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右 -> 向右


class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        if not obstacleGrid or obstacleGrid[0][0] or obstacleGrid[-1][-1]:
            return 0

        m, n = len(obstacleGrid), len(obstacleGrid[0])
        
        if m>=n:
            dp = [0] * n
            dp[0]=1
            for i in xrange(m):
                for j in xrange(n):
                    if obstacleGrid[i][j]:
                        dp[j]=0
                    elif j:
                        dp[j] += dp[j - 1]
                        
        else:
            dp = [0] * m
            dp[0]=1
            for j in xrange(n):
                for i in xrange(m):
                    if obstacleGrid[i][j]:
                        dp[i]=0
                    elif i:
                        dp[i] += dp[i - 1]

        return dp[-1]
        


class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length,n=obstacleGrid[0].length;
        if(m>=n)
        {
            int[] dp=new int[n];
            dp[0]=1;
            for(int i=0;i<m;++i)
                for(int j=0;j<n;++j)
                {
                    if(obstacleGrid[i][j]==1)
                        dp[j]=0;
                    else if (j!=0)
                        dp[j]+=dp[j-1];
                }
            return dp[n-1];
        }
        else
        {
            int[] dp=new int[m];
            dp[0]=1;
            for(int j=0;j<n;++j)
                for(int i=0;i<m;++i)
                {
                    if(obstacleGrid[i][j]==1)
                        dp[i]=0;
                    else if (i!=0)
                        dp[i]+=dp[i-1];
                }
            return dp[m-1];
        }
    }
}
