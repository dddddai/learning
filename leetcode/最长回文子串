python:

class Solution(object):
    def longestPalindrome(self, s):
        tmp='#'+"#".join(s)+'#'
        r=[1]*len(tmp)
        axis=maxLen=boundary=pivot=0
        
        for i in range(len(tmp)):
            if i<boundary:
                r[i]=min(r[(axis<<1)-i],boundary-i+1)
            while i-r[i]>=0 and i+r[i]<len(tmp) and tmp[i-r[i]]==tmp[i+r[i]]:
                r[i]+=1
            if r[i]+i-1>boundary:
                boundary,axis=r[i]+i-1,i
            if r[i]-1>maxLen:
                maxLen,pivot=r[i]-1,i
                
        max_r=(maxLen)>>1
        if pivot&1:
            return s[(pivot>>1)-max_r:(pivot>>1)+max_r+1]
        return s[(pivot>>1)-max_r:(pivot>>1)+max_r]


java:

class Solution {
    public String longestPalindrome(String s) {
        StringBuilder tmp=new StringBuilder();
        int maxLen=0,boundary=0,axis=0,pivot=0;
        int size=(s.length()<<1)+1;
        
        for(int i=0;i<size;i++)
        {
            if((i&1)==0)
                tmp.append("#");
            else
                tmp.append(s.charAt(i>>1));
        }
        
        int[] r=new int[size];
        for(int i=0;i<size;++i)
        {
            if(i<boundary)
                r[i]=Math.min(r[(axis<<1)-i],boundary-i+1);
            else
                r[i]=1;
            while(i-r[i]>=0 && i+r[i]<size && tmp.charAt(i-r[i])==tmp.charAt(i+r[i]))
                ++r[i];
            if(i+r[i]-1>boundary)
            {
                boundary=i+r[i]-1;
                axis=i;
            }
            if(r[i]-1>maxLen)
            {
                maxLen=r[i]-1;
                pivot=i;
            }
        }
        int max_r=maxLen>>1;
        if((pivot&1)==0)
            return s.substring((pivot>>1)-max_r,(pivot>>1)+max_r);
        return s.substring((pivot>>1)-max_r,(pivot>>1)+max_r+1);
    }
}
}
