给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。
一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。
你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3


class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
        m,n=len(grid),len(grid[0])
        count=0
        
        def dfs(g,i,j,m,n):
            if not (0<=i<m and 0<=j<n):
                return
            if g[i][j]=='1':
                g[i][j]='0'
                dfs(g,i+1,j,m,n)
                dfs(g,i-1,j,m,n)
                dfs(g,i,j+1,m,n)
                dfs(g,i,j-1,m,n)
        
        for i in range(m):
            for j in range(n):
                if grid[i][j]=='1':
                    dfs(grid,i,j,m,n)
                    count+=1
        return count
