运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。

获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。
写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。
当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。

进阶:

你是否可以在 O(1) 时间复杂度内完成这两种操作？

示例:

LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回  1
cache.put(3, 3);    // 该操作会使得密钥 2 作废
cache.get(2);       // 返回 -1 (未找到)
cache.put(4, 4);    // 该操作会使得密钥 1 作废
cache.get(1);       // 返回 -1 (未找到)
cache.get(3);       // 返回  3
cache.get(4);       // 返回  4



class Node(object):
    def __init__(self,key,value):
        self.key=key
        self.value=value
        self.pre=None
        self.next=None
        
    def add(self,node):
        self.next=node
        node.pre=self
        
    def remove(self):
        self.pre.next=self.next
        self.next.pre=self.pre
        
        self.next=self.pre=None
        
        
class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.capacity=capacity
        self.size=0
        self.dict={}
        self.p=self.pHead=Node(0,0)

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key in self.dict:
            if self.dict[key]!=self.p:
                self.dict[key].remove()
                self.p.add(self.dict[key])
                self.p=self.p.next
                
            return self.dict[key].value
        
        return -1

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: void
        """
        if key in self.dict:
            self.dict[key].value=value
            if self.dict[key]!=self.p:
                self.dict[key].remove()
                self.p.add(self.dict[key])
                self.p=self.p.next
            return
        
        self.dict[key]=Node(key,value)
        self.p.add(self.dict[key])
        self.p=self.p.next
        
        if self.size<self.capacity:
            self.size+=1
                      
        else:
            del self.dict[self.pHead.next.key]
            self.pHead.next.remove()
            
            
            
            
class Node{
    public int key,value;
    public Node next,pre;
    
    public Node(int key,int value)
    {
        this.key=key;
        this.value=value;
        this.next=this.pre=null;
    }
    public void add(Node node)
    {
        this.next=node;
        node.pre=this;
    }
    public void remove()
    {
        this.pre.next=this.next;
        this.next.pre=this.pre;
        this.next=this.pre=null;
    }
}



class LRUCache {
    int capacity,size;
    Map<Integer,Node> map=new HashMap<>();
    Node pHead=new Node(0,0);
    Node p=pHead;
    
    public LRUCache(int capacity) {
        this.capacity=capacity;
        this.size=0;
    }
    
    public int get(int key) {
        if(map.containsKey(key))
        {
            if(map.get(key)!=p)
            {
                map.get(key).remove();
                p.add(map.get(key));
                p=p.next;
            }
            return map.get(key).value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key))
        {
            map.get(key).value=value;
            if(map.get(key)!=p)
            {
                map.get(key).remove();
                p.add(map.get(key));
                p=p.next;
            }
            return;
        }
        map.put(key,new Node(key,value));
        p.add(map.get(key));
        p=p.next;
        
        if(size<capacity)
            ++size;
        else
        {
            map.remove(pHead.next.key);
            pHead.next.remove();
        }
    }
}            
