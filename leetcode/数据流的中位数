1.维护一个升序序列，添加数时，用二分查找找到插入位置

class MedianFinder(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.arr=[]
        self.size=0

    def addNum(self, num):
        """
        :type num: int
        :rtype: void
        """
        l,r=0,self.size-1
        while(l<=r):
            mid=(l+r)>>1
            if num<self.arr[mid]:
                r=mid-1
            else:
                l=mid+1
        self.arr.insert(l,num)
        self.size+=1

    def findMedian(self):
        """
        :rtype: float
        """
        if self.size&1:
            return self.arr[(self.size-1)>>1]
        return (self.arr[self.size>>1]+self.arr[(self.size>>1)-1])/2.
        
        
2.用最大堆和最小堆，最大堆保存较小的数，最小堆保存较大的数


from heapq import heappush,heappop

#默认的heap是一个最小堆！

class MedianFinder(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.min_heap=[2**32-1]     #避免数组越界
        self.max_heap=[2**32-1]  
        self.size=0
    def addNum(self, num):
        """
        :type num: int
        :rtype: void
        """
        if (self.size&1)==0:
        #在加入最小堆之前检查该数是否小于最大堆堆顶
        #如果小于，则说明最大堆堆顶才应该被插入到最小堆中
            if num<=-self.max_heap[0]:
                heappush(self.min_heap,-heappop(self.max_heap))
                heappush(self.max_heap,-num)
            else:
                heappush(self.min_heap,num)
        else:
        #在加入最大堆之前检查该数是否大于最小堆堆顶
        #如果大于，则说明最小堆堆顶才应该被插入到最大堆中
            if num>=self.min_heap[0]:
                heappush(self.max_heap,-heappop(self.min_heap))
                heappush(self.min_heap,num)
            else:
                heappush(self.max_heap,-num)
        self.size+=1

    def findMedian(self):
        """
        :rtype: float
        """
        if self.size&1:
            return self.min_heap[0]
        return (self.min_heap[0]-self.max_heap[0])/2.
