示例:

X X X X
X O O X
X X O X
X O X X
运行你的函数后，矩阵变为：

X X X X
X X X X
X X X X
X O X X
解释:

被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。
任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。
如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。

思路就是，回溯法，以四周的节点为起点，向周围扩散，遇到O则将其改编为*，
当四周节点都便利完成后，将所有O都替换为X，再将所有*替换回O

class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        def dfs(g,i,j,m,n):
            if not(0<=i<m and 0<=j<n) or g[i][j]!='O':
                return
            g[i][j]='*'
            dfs(g,i+1,j,m,n) 
            dfs(g,i-1,j,m,n)
            dfs(g,i,j+1,m,n)
            dfs(g,i,j-1,m,n)
        
        if not board:
            return
        m,n=len(board),len(board[0])
        for i in range(m):
            if board[i][0]=='O':
                dfs(board,i,0,m,n)
            if board[i][n-1]=='O':
                dfs(board,i,n-1,m,n)
        for i in range(n):
            if board[0][i]=='O':
                dfs(board,0,i,m,n)
            if board[m-1][i]=='O':
                dfs(board,m-1,i,m,n)
        for i in range(m):
            for j in range(n):
                if board[i][j]=='*':
                    board[i][j]='O'
                else:
                    board[i][j]='X'
