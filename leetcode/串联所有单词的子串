给定一个字符串 s 和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。

注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。


示例 1：

输入：
  s = "barfoothefoobarman",
  words = ["foo","bar"]
  
输出：[0,9]
解释：
从索引 0 和 9 开始的子串分别是 "barfoo" 和 "foobar" 。
输出的顺序不重要, [9,0] 也是有效答案。


示例 2：

输入：
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
  
输出：[]




class Solution {
    private List<Integer> result=new LinkedList<>();
    private Map<String,Integer> map;
    private int len;

    public List<Integer> findSubstring(String s, String[] words) {
        len=words[0].length();
        map=new HashMap<>((int)(words.length/0.75)+1);
        for(String wd:words){
            map.put(wd,map.getOrDefault(wd,0)+1);
        }
        for(int i=0;i+len*words.length<=s.length();++i){
            if(func(s,i)){
                result.add(i);
            }
        }
        return result;
    }

    private boolean func(String s,int idx){
        String wd=s.substring(idx,idx+len);
        Integer x=map.get(wd);
        if(x==null){
            return false;
        }
        if(x==1){
            if(map.size()==1){
                return true;
            }
            map.remove(wd);
        }else{
            map.put(wd,x-1);
        }
        boolean result=func(s,idx+len);
        map.put(wd,x);
        return result;
    }
}
