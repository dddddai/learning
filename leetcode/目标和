给定一个整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。
对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。

返回可以使最终数组和为目标数 S 的所有添加符号的方法数。


示例 1:

输入: nums: [1, 1, 1, 1, 1], S: 3
输出: 5
解释: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

一共有5种方法让最终目标和为3。
注意:

数组的长度不会超过20，并且数组中的值全为正数。
初始的数组的和不会超过1000。
保证返回的最终结果为32位整数。



思路：任何符合条件的一种情况，都可以分为前面加上正号的集合pos,和前面加上负号的集合neg，使得pos-neg=S

两边同时加上pos+neg，得2*pos=S+pos+neg=S+sum(nums)，pos=(S+sum(nums))/2

而S和sum(nums)都是定值，因此目标变为了求该数组有多少个子集使得子集的和为(S+sum(nums))/2


class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        sumOfArr=sum(nums)
        if abs(S)>sumOfArr or (sumOfArr+S)&1:
            return 0
        
        target=(sumOfArr+S)>>1
        dp=[0]*(target+1)
        dp[0]=1
        
        for n in nums:
            for i in xrange(target,n-1,-1):    #只能从大到小遍历
                dp[i]+=dp[i-n]
                
        return dp[-1]
        
        
        
        
class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        int sum=0;
        for(int n:nums){
            sum+=n;
        }
        if(Math.abs(S)>sum || ((sum+S)&1)==1){
            return 0;
        }
        int target=(sum+S)>>1;
        int[] dp=new int[target+1];
        dp[0]=1;
        
        for(int n:nums){
            for(int i=target;i>=n;--i){
                dp[i]+=dp[i-n];
            }
        }
        return dp[target];
    }
}        
