给定一个整数数组 a，其中1 ≤ a[i] ≤ n （n为数组长度）, 其中有些元素出现两次而其他元素出现一次。

找到所有出现两次的元素。

你可以不用到任何额外空间并在O(n)时间复杂度内解决这个问题吗？

示例：

输入:
[4,3,2,7,8,2,3,1]

输出:
[2,3]




class Solution(object):
    def findDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        size=len(nums)
        result=[]
        
        for n in nums:
            idx=(n-1)%size
            if nums[idx]>size:
                result.append(idx+1)
            else:
                nums[idx]+=size
            
        return result
        
        
        
        
        
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> result=new ArrayList<>();
        int size=nums.length;
        
        for(int n:nums){
            int idx=(n-1)%size;
            if(nums[idx]>size){
                result.add(idx+1);
            }else{
                nums[idx]+=size;
            }
        }
        return result;
    }
}        
