class Solution(object):
    def func(self,preorder,startPre,endPre,inorder,startIn,endIn):
        if startPre>endPre or startIn>endIn:
            return
        root=TreeNode(preorder[startPre])
        for i in xrange(startIn,endIn+1):
            if inorder[i]==preorder[startPre]:
                root.left=self.func(preorder,startPre+1,startPre+i-startIn,inorder,startIn,i-1)
                root.right=self.func(preorder,startPre+i-startIn+1,endPre,inorder,i+1,endIn)
                return root
        
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        return self.func(preorder,0,len(preorder)-1,inorder,0,len(inorder)-1)


public class Solution {
    TreeNode func(int[] pre,int startPre,int endPre,int[] in,int startIn,int endIn)
    {
        if(startPre>endPre || startIn>endIn)
            return null;
        TreeNode root=new TreeNode(pre[startPre]);
        for(int i=startIn;i<=endIn;++i)
            if(in[i]==pre[startPre])
            {
                root.left=func(pre,startPre+1,startPre+i-startIn,in,startIn,i-1);
                root.right=func(pre,startPre+i-startIn+1,endPre,in,i+1,endIn);
                break;
            }
        return root;
    }
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        return func(pre,0,pre.length-1,in,0,in.length-1);
    }
}
