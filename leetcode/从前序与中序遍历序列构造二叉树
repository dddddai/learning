根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7
   



class Solution {
    private Map<Integer,Integer> map;
    
    public TreeNode buildTree(int[] pre, int[] in) {
        map=new HashMap<>((int)(pre.length/0.75)+1);
        for(int i=0;i<in.length;++i){
            map.put(in[i],i);
        }
        return func(pre,0,pre.length-1,in,0,in.length-1);
    }
    
    private TreeNode func(int[] pre,int startPre,int endPre,int[] in,int startIn,int endIn){
        if(startPre>endPre || startIn>endIn){
            return null;
        }
        TreeNode root=new TreeNode(pre[startPre]);
        int idx=map.get(pre[startPre]);
        root.left=func(pre,startPre+1,startPre+idx-startIn,in,startIn,idx-1);
        root.right=func(pre,startPre+idx-startIn+1,endPre,in,idx+1,endIn);
        return root;
    }
    
}
