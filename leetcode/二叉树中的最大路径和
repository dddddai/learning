给定一个非空二叉树，返回其最大路径和。

本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。
该路径至少包含一个节点，且不一定经过根节点。

示例 1:

输入: [1,2,3]

       1
      / \
     2   3

输出: 6
示例 2:

输入: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

输出: 42


class Solution(object):
    def func(self,root):
        if root is None:
            return 0
        left,right=max(0,self.func(root.left)),max(0,self.func(root.right))
        self.result=max(self.result,left+right+root.val)
        return root.val+max(left,right)
    
    def maxPathSum(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.result=-2**32
        self.func(root)
        return self.result



class Solution {
    int result=Integer.MIN_VALUE;
    
    int func(TreeNode root)
    {
        if(root==null)
            return 0;
        int left=Math.max(0,func(root.left));
        int right=Math.max(0,func(root.right));
        result=Math.max(result,root.val+left+right);
        return root.val+Math.max(left,right);
    }
    public int maxPathSum(TreeNode root) {
        func(root);
        return result;
    }
}
