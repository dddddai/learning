示例:

输入: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

输出: 4


思路

当我们判断以某个点为正方形右下角时最大的正方形时，那它的上方，
左方和左上方三个点也一定是某个正方形的右下角，否则该点为右下角的正方形最大就是它自己了。
这是定性的判断，那具体的最大正方形边长呢？我们知道，该点为右下角的正方形的最大边长，
最多比它的上方，左方和左上方为右下角的正方形的边长多1，最好的情况是是它的上方，
左方和左上方为右下角的正方形的大小都一样的，这样加上该点就可以构成一个更大的正方形。
但如果它的上方，左方和左上方为右下角的正方形的大小不一样，合起来就会缺了某个角落，
这时候只能取那三个正方形中最小的正方形的边长加1了。假设dp[i][j]表示以i,j为右下角的正方形的最大边长，
则有
dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1

为了节省空间，可以只维护一行或一列

class Solution(object):
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix:
            return 0
        m,n=len(matrix),len(matrix[0])
        max_len=0
        dp=[]
        
        #初始化max_len
        for i in xrange(m):
            if max_len:
                break
            if matrix[i][0]=='1':
                max_len=1
        
        for j in xrange(n):
            if max_len:
                break
            if matrix[0][j]=='1':
                max_len=1
                
        if(m>n):
            dp=map(int,matrix[0])
            for i in xrange(1,m):
                upperLeft=dp[0]
                dp[0]=int(matrix[i][0])
                
                for j in xrange(1,n):
                    upper=dp[j]
                    
                    if matrix[i][j]=='1':
                        dp[j]=min(upper,upperLeft,dp[j-1])+1
                        max_len=max(max_len,dp[j])
                    else:
                        dp[j]=0
                        
                    upperLeft=upper
        else:
            dp=map(lambda x:int(x[0]),matrix)
            for j in xrange(1,n):
                upperLeft=dp[0]
                dp[0]=int(matrix[0][j])
                
                for i in xrange(1,m):
                    left=dp[i]
                    
                    if matrix[i][j]=='1':
                        dp[i]=min(left,upperLeft,dp[i-1])+1
                        max_len=max(max_len,dp[i])
                    else:
                        dp[i]=0
                    
                    upperLeft=left
                
        return max_len*max_len
        


class Solution {
    public int maximalSquare(char[][] matrix) {
        int m = matrix.length;

        if (m == 0) {
            return 0;
        }

        int n = matrix[0].length;
        int maxLen = 0;
        int i;
        int j;

        for (i = 0; i < m; ++i) {
            if (maxLen == 1) {
                break;
            }

            if (matrix[i][0] == '1') {
                ++maxLen;
            }
        }

        for (j = 0; j < n; ++j) {
            if (maxLen == 1) {
                break;
            }

            if (matrix[0][j] == '1') {
                ++maxLen;
            }
        }

        if (m > n) {
            int[] dp = new int[n];

            for (j = 0; j < n; ++j)
                dp[j] = matrix[0][j] - '0';

            for (i = 1; i < m; ++i) {
                int upperLeft = dp[0];
                dp[0] = matrix[i][0] - '0';

                for (j = 1; j < n; ++j) {
                    int upper = dp[j];

                    if (matrix[i][j] == '1') {
                        dp[j] = Math.min(Math.min(dp[j - 1], upper), upperLeft) + 1;
                        maxLen = Math.max(maxLen, dp[j]);
                    } else {
                        dp[j] = 0;
                    }

                    upperLeft = upper;
                }
            }
        } else {
            int[] dp = new int[m];

            for (i = 0; i < m; ++i)
                dp[i] = matrix[i][0] - '0';

            for (j = 1; j < n; ++j) {
                int upperLeft = dp[0];
                dp[0] = matrix[0][j] - '0';

                for (i = 1; i < m; ++i) {
                    int left = dp[i];

                    if (matrix[i][j] == '1') {
                        dp[i] = Math.min(Math.min(dp[i - 1], left), upperLeft) + 1;
                        maxLen = Math.max(maxLen, dp[i]);
                    } else {
                        dp[i] = 0;
                    }

                    upperLeft = left;
                }
            }
        }
        return maxLen * maxLen;
    }
}

