示例:

输入: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

输出: 4


思路

当我们判断以某个点为正方形右下角时最大的正方形时，那它的上方，
左方和左上方三个点也一定是某个正方形的右下角，否则该点为右下角的正方形最大就是它自己了。
这是定性的判断，那具体的最大正方形边长呢？我们知道，该点为右下角的正方形的最大边长，
最多比它的上方，左方和左上方为右下角的正方形的边长多1，最好的情况是是它的上方，
左方和左上方为右下角的正方形的大小都一样的，这样加上该点就可以构成一个更大的正方形。
但如果它的上方，左方和左上方为右下角的正方形的大小不一样，合起来就会缺了某个角落，
这时候只能取那三个正方形中最小的正方形的边长加1了。假设dp[i][j]表示以i,j为右下角的正方形的最大边长，
则有
dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1


class Solution(object):
    def maximalSquare(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if not matrix:
            return 0
        m,n=len(matrix),len(matrix[0])
        dp=[[0 for j in xrange(n)] for i in xrange(m)]
        max_len=0
        
        for i in xrange(m):
            if matrix[i][0]=='1':
                dp[i][0]=1
                max_len=1
                
        for j in xrange(n):
            if matrix[0][j]=='1':
                dp[0][j]=1
                max_len=1
                
        for i in xrange(1,m):
            for j in xrange(1,n):
                if matrix[i][j]=='1':
                    dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1
                    max_len=max(max_len,dp[i][j])
        return max_len*max_len
        
        
class Solution {
    public int maximalSquare(char[][] matrix) {
        int m=matrix.length;
        if(m==0)
            return 0;
        int n=matrix[0].length;
        int[][] dp=new int[m][n];
        int maxLen=0;
        
        for(int i=0;i<m;++i)
            if(matrix[i][0]=='1')
            {
                dp[i][0]=1;
                maxLen=1;
            }
        
        for(int j=0;j<n;++j)
            if(matrix[0][j]=='1')
            {
                dp[0][j]=1;
                maxLen=1;
            }
        
        for(int i=1;i<m;++i)
            for(int j=1;j<n;++j)
                if(matrix[i][j]=='1')
                {
                    dp[i][j]=Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]))+1;
                    maxLen=Math.max(maxLen,dp[i][j]);
                }
        return maxLen*maxLen;
    }
}
