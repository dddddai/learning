给定一个整数数组  nums 和一个正整数 k，找出是否有可能把这个数组分成 k 个非空子集，其总和都相等。

示例 1：

输入： nums = [4, 3, 2, 3, 5, 2, 1], k = 4
输出： True
说明： 有可能将其分成 4 个子集（5），（1,4），（2,3），（2,3）等于总和。
 

注意:

1 <= k <= len(nums) <= 16
0 < nums[i] < 10000





class Solution {
    private int subsetSum;
    
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum=0;
        for(int num:nums){
            sum+=num;
        }
        if(sum%k!=0){
            return false;
        }
        subsetSum=sum/k;
        Arrays.sort(nums);
        if(nums[nums.length-1]>subsetSum){
            return false;
        }
        return dfs(nums,0,new int[k]);
    }
    
    private boolean dfs(int[] nums,int idx,int[] bucket){
        if(idx==nums.length){
            return true;
        }
        for(int i=0;i<bucket.length;++i){
            if(bucket[i]+nums[idx]==subsetSum || 
               (idx!=nums.length-1 && bucket[i]+nums[idx]+nums[idx+1]<=subsetSum)){
                bucket[i]+=nums[idx];
                if(dfs(nums,idx+1,bucket)){
                    return true;
                }
                bucket[i]-=nums[idx];
            }
        }
        return false;
    }
}
