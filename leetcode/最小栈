设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。

push(x) -- 将元素 x 推入栈中。
pop() -- 删除栈顶的元素。
top() -- 获取栈顶元素。
getMin() -- 检索栈中的最小元素。

class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack=[]
        self.minimum=2**32-1
    
    def push(self, x):
        """
        :type x: int
        :rtype: void
        """
        #在push前判断要push的值是否小于minimum
        #如果小于则先让minimum入栈以保留之前的最小值，之后更新minimum
        if x<=self.minimum:
            self.stack.append(self.minimum)
            self.minimum=x
        self.stack.append(x)

    def pop(self):
        """
        :rtype: void
        """
        if self.stack.pop()==self.minimum:
            self.minimum=self.stack.pop()

    def top(self):
        """
        :rtype: int
        """
        return self.stack[-1]

    def getMin(self):
        """
        :rtype: int
        """
        return self.minimum
        
        
class MinStack {
    Stack<Integer> stack;
    int minVal;
    
    /** initialize your data structure here. */
    public MinStack() {
        stack=new Stack<>();
        minVal=Integer.MAX_VALUE;
    }
    
    public void push(int x) {
        if(x<=minVal)
        {
            stack.push(minVal);
            minVal=x;
        }
        stack.push(x);
    }
    
    public void pop() {
        if(stack.pop()==minVal)
            minVal=stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return minVal;
    }
}
