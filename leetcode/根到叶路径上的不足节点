给定一棵二叉树的根 root，请你考虑它所有从根到叶的路径：从根到任何叶的路径。（所谓一个叶子节点，就是一个没有子节点的节点）

假如通过节点 node 的每种可能的 “根-叶” 路径上值的总和全都小于给定的 limit，则该节点被称之为「不足节点」，需要被删除。

请你删除所有不足节点，并返回生成的二叉树的根。

 

示例 1：

输入：root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1
输出：[1,2,3,4,null,null,7,8,9,null,14]


示例 2：

输入：root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22
输出：[5,4,8,11,null,17,4,7,null,null,null,5]


示例 3：

输入：root = [5,-6,-6], limit = 0
输出：[]




class Solution {
    public TreeNode sufficientSubset(TreeNode root, int limit) {
        if(dfs(root,0,limit)<limit){
            return null;
        }
        return root;
    }

    private int dfs(TreeNode root,int sum,int limit){
        if(root==null){
            return Integer.MIN_VALUE;
        }
        sum+=root.val;
        int l=dfs(root.left,sum,limit),r=dfs(root.right,sum,limit);
        if(sum+l<limit){
            root.left=null;
        }
        if(sum+r<limit){
            root.right=null;
        }
        if(l==Integer.MIN_VALUE && r==Integer.MIN_VALUE){
            return root.val;
        }
        return Math.max(l,r)+root.val;
    }
}
