示例 1:

输入: word1 = "horse", word2 = "ros"
输出: 3
解释: 
horse -> rorse (将 'h' 替换为 'r')
rorse -> rose (删除 'r')
rose -> ros (删除 'e')

示例 2:

输入: word1 = "intention", word2 = "execution"
输出: 5
解释: 
intention -> inention (删除 't')
inention -> enention (将 'i' 替换为 'e')
enention -> exention (将 'n' 替换为 'x')
exention -> exection (将 'n' 替换为 'c')
exection -> execution (插入 'u')


用动态规划的思路，用dp[i][j]表示word1的前i个字符转化为word2的前j个字符需要的操作次数。
根据word1和word2的最后一个字符是否相同，分为两种情况：

word1[i] == word2[j]
那么同时去掉最后一个字符，不影响结果，故dp[i][j] = dp[i-1][j-1]
word1[i] != word2[j]
可以用如下三种方法进行操作：

将word1转化为word2的前j-1个字符，再将word2的最后一个字符插入到word1末尾。即步骤为dp[i][j-1]+1。

将word1的前i-1个字符转化为word2，再将word1的最后一个字符删除。即步骤为dp[i-1][j]+1。

将word1的前i-1个字符转化为word2的前j-1个字符，再将word1的第i个字符替换为word2的第j个字符。
即步骤为dp[i-1][j-1]+1。

dp[i][j]为三种方法的最小值，即dp[i][j] = min(dp[i][j-1]+1, dp[i-1][j]+1, dp[i-1][j-1]+1)




对于边界情况，i=0代表word1为空，故由word1插入j个字符可转化为word2，即dp[0][j] = j。
同理，dp[i][0] = i
根据递推关系，这里不需要维护这个二维数组，只需要维护一行或者一列即可。


class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        len1,len2=len(word1),len(word2)
        if len1<len2:
            return self.minDistance(word2,word1)
        
        dp=[n for n in xrange(len2+1)]
        for i in xrange(1,len1+1):
            upperLeft=dp[0]
            dp[0]=i
            
            for j in xrange(1,len2+1):
                upper=dp[j]
                if word1[i-1]==word2[j-1]:
                    dp[j]=upperLeft
                else:
                    dp[j]=min(dp[j-1],upper,upperLeft)+1
                upperLeft=upper
            
        return dp[-1]
        
        

class Solution {
    public int minDistance(String word1, String word2) {
        int len1=word1.length(),len2=word2.length();
        if(len1<len2)
            return minDistance(word2,word1);
        int[] dp=new int[len2+1];
        for(int i=0;i<=len2;++i)
            dp[i]=i;
        
        for(int i=1;i<=len1;++i){
            int upperLeft=dp[0];
            dp[0]=i;
            
            for(int j=1;j<=len2;++j){
                int upper=dp[j];
                if(word1.charAt(i-1)==word2.charAt(j-1))
                    dp[j]=upperLeft;
                else
                    dp[j]=Math.min(Math.min(upper,dp[j-1]),upperLeft)+1;
                upperLeft=upper;
            }
        }
        return dp[len2];
    }
}
