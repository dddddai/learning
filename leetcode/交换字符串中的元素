给你一个字符串 s，以及该字符串中的一些「索引对」数组 pairs，
其中 pairs[i] = [a, b] 表示字符串中的两个索引（编号从 0 开始）。

你可以 任意多次交换 在 pairs 中任意一对索引处的字符。

返回在经过若干次交换后，s 可以变成的按字典序最小的字符串。

示例 1:
输入：s = "dcab", pairs = [[0,3],[1,2]]
输出："bacd"
解释： 
交换 s[0] 和 s[3], s = "bcad"
交换 s[1] 和 s[2], s = "bacd"

示例 2：
输入：s = "dcab", pairs = [[0,3],[1,2],[0,2]]
输出："abcd"
解释：
交换 s[0] 和 s[3], s = "bcad"
交换 s[0] 和 s[2], s = "acbd"
交换 s[1] 和 s[2], s = "abcd"

示例 3：
输入：s = "cba", pairs = [[0,1],[1,2]]
输出："abc"
解释：
交换 s[0] 和 s[1], s = "bca"
交换 s[1] 和 s[2], s = "bac"
交换 s[0] 和 s[1], s = "abc"




class Solution {
    private int[] parent;

    public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
        int n=s.length();
        parent=new int[n];
        for(int i=0;i<n;++i){
            parent[i]=i;
        }
        for(List<Integer> p:pairs){
            parent[getRoot(p.get(1))]=getRoot(p.get(0));
        }
        List<List<Character>> arr=new ArrayList<>(n);
        for(int i=0;i<n;++i){
            arr.add(new ArrayList<>());
        }
        for(int i=0;i<n;++i){
            arr.get(getRoot(i)).add(s.charAt(i));
        }
        for(List<Character> x:arr){
            Collections.sort(x);
        }
        int[] idx=new int[n];
        StringBuilder sb=new StringBuilder(n);
        for(int i=0;i<n;++i){
            int root=getRoot(i);
            sb.append(arr.get(root).get(idx[root]++));
        }
        return sb.toString();
    }

    private int getRoot(int idx){
        while(idx!=parent[idx]){
            idx=parent[idx]=parent[parent[idx]];
        }
        return idx;
    }
}



var parent []int

func smallestStringWithSwaps(s string, pairs [][]int) string {
    n:=len(s)
    parent=make([]int,n)
    for i:=0;i<n;i++ {
        parent[i]=i
    }
    for _,p:=range pairs {
        parent[getRoot(p[1])]=getRoot(p[0])
    }
    arr:=make([][]int,n)
    for i:=0;i<n;i++ {
        arr[i]=make([]int,0,16)
    }
    for i:=0;i<n;i++ {
        root:=getRoot(i)
        arr[root]=append(arr[root],int(s[i]))
    }
    for i:=0;i<n;i++ {
        sort.Ints(arr[i])
    }
    idx:=make([]int,n)
    var sb strings.Builder
    sb.Grow(n)
    for i:=0;i<n;i++ {
        root:=getRoot(i)
        sb.WriteString(string(arr[root][idx[root]]))
        idx[root]++
    }
    return sb.String()
}

func getRoot(idx int) int {
    for idx!=parent[idx] {
        parent[idx]=parent[parent[idx]]
        idx=parent[idx]
    }
    return idx
}
