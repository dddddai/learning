class Solution(object):
    cnt=0
    
    def kthSmallest(self, root, k):
        """
        :type root: TreeNode
        :type k: int
        :rtype: int
        """
        if root is None:
            return sys.maxsize
        
        result=self.kthSmallest(root.left,k)
        if result!=sys.maxsize:
            return result
        
        self.cnt+=1
        if self.cnt==k:
            return root.val
        return self.kthSmallest(root.right,k)

# class Solution:
#     def kthSmallest(self, root, k):
#         """
#         :type root: TreeNode
#         :type k: int
#         :rtype: int
#         """
#         def inorder(root,alist,k):
#             if root:
#                 inorder(root.left,alist,k)
#                 if len(alist)==k:
#                     return
#                 alist.append(root.val)
#                 inorder(root.right,alist,k)
                
#         result = []
#         inorder(root,result,k)
#         return result[-1]


java:

class Solution {
    int cnt=0;
    public int kthSmallest(TreeNode root, int k) {
        if(root==null)
            return Integer.MAX_VALUE;
        int result=kthSmallest(root.left,k);
        if(result!=Integer.MAX_VALUE)
            return result;
        if(++cnt==k)
            return root.val;
        return kthSmallest(root.right,k);
    }
}
