编写一个程序，通过已填充的空格来解决数独问题。

一个数独的解法需遵循如下规则：

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

给定的数独序列只包含数字 1-9 和字符 '.' 。
你可以假设给定的数独只有唯一解。
给定数独永远是 9x9 形式的。

class Solution(object):
    def func(self,matrix,i,j):
        if j==9:
            if i==8:
                return True
            return self.func(matrix,i+1,0)
        
        if matrix[i][j]=='.':
            for n in range(1,10):
                if (i,-1,n) in self.check or (-1,j,n) in self.check\
                    or(i//3,j//3,n) in self.check:
                    continue
                matrix[i][j]=str(n)
                self.check.update([(i,-1,n),(-1,j,n),(i//3,j//3,n)])
                if self.func(matrix,i,j+1):
                    return True
                matrix[i][j]='.'
                self.check.remove((i,-1,n))
                self.check.remove((-1,j,n))
                self.check.remove((i//3,j//3,n))
            return False
        
        return self.func(matrix,i,j+1)
                
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        """
        self.check=set()
        for i in range(9):
            for j in range(9):
                if board[i][j]!='.':
                    self.check.update([(i//3,j//3,int(board[i][j])),(i,-1,int(board[i][j])),
                                        (-1,j,int(board[i][j]))])
                    
        self.func(board,0,0)
