给定一个非空且只包含非负数的整数数组 nums，数组的度的定义是指数组里任一元素出现频数的最大值。

你的任务是在 nums 中找到与 nums 拥有相同大小的度的最短连续子数组，返回其长度。
 

示例 1：
输入：[1, 2, 2, 3, 1]
输出：2

解释：
输入数组的度是2，因为元素1和2的出现频数最大，均为2.
连续子数组里面拥有相同度的有如下所示:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
最短连续子数组[2, 2]的长度为2，所以返回2.


示例 2：
输入：[1,2,2,3,1,4,2]
输出：6



class Solution {
    public int findShortestSubArray(int[] nums) {
        int maxCnt=0;
        List<Integer> candidates=new LinkedList<>();
        Map<Integer,Integer> map=new HashMap<>((int)(nums.length/0.75)+1);
        Map<Integer,Integer> left=new HashMap<>((int)(nums.length/0.75)+1);
        Map<Integer,Integer> right=new HashMap<>((int)(nums.length/0.75)+1);
        for(int i=0;i<nums.length;++i){
            Integer x=map.get(nums[i]);
            if(x==null){
                x=0;
                map.put(nums[i],1);
                left.put(nums[i],i);
            }else{
                map.put(nums[i],x+1);
                
            }
            if(x+1==maxCnt){
                candidates.add(nums[i]);
            }else if(x==maxCnt){
                ++maxCnt;
                candidates.clear();
                candidates.add(nums[i]);
            }
            right.put(nums[i],i);
        }
        int result=nums.length;
        for(int x:candidates){
            result=Math.min(result,right.get(x)-left.get(x)+1);
        }
        return result;
    }
}



func findShortestSubArray(nums []int) int {
    maxCnt:=1
    m:=make(map[int]int,len(nums))
    left:=make(map[int]int,len(nums))
    right:=make(map[int]int,len(nums))
    candidates:=make([]int,0,8)
    for i,num:=range nums {
        m[num]++
        if m[num]==1 {
            left[num]=i
        }
        if m[num]==maxCnt {
            candidates=append(candidates,num)
        }else if m[num]>maxCnt {
            maxCnt++
            candidates=make([]int,0,8)
            candidates=append(candidates,num)
        }
        right[num]=i
    }
    result:=len(nums)
    for _,x:=range candidates {
        l,r:=left[x],right[x]
        if r-l+1<result {
            result=r-l+1
        }
    }
    return result
}
