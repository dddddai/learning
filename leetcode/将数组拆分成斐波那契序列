给定一个数字字符串 S，比如 S = "123456579"，我们可以将它分成斐波那契式的序列 [123, 456, 579]。

形式上，斐波那契式序列是一个非负整数列表 F，且满足：

0 <= F[i] <= 2^31 - 1，（也就是说，每个整数都符合 32 位有符号整数类型）；
F.length >= 3；
对于所有的0 <= i < F.length - 2，都有 F[i] + F[i+1] = F[i+2] 成立。
另外，请注意，将字符串拆分成小块时，每个块的数字一定不要以零开头，除非这个块是数字 0 本身。

返回从 S 拆分出来的所有斐波那契式的序列块，如果不能拆分则返回 []。

示例 1：

输入："123456579"
输出：[123,456,579]
示例 2：

输入: "11235813"
输出: [1,1,2,3,5,8,13]
示例 3：

输入: "112358130"
输出: []
解释: 这项任务无法完成。
示例 4：

输入："0123"
输出：[]
解释：每个块的数字不能以零开头，因此 "01"，"2"，"3" 不是有效答案。
示例 5：

输入: "1101111"
输出: [110, 1, 111]
解释: 输出 [11,0,11,11] 也同样被接受。
提示：

1 <= S.length <= 200
字符串 S 中只含有数字。





class Solution {
    private List<Integer> result;
    
    public List<Integer> splitIntoFibonacci(String S) {
        result=new ArrayList<>(S.length());    
        if(S.length()<3){
            return result;
        }
        for(int i=1;i<=(S.length()-1)>>1;++i){
            Integer a=null;
            try{
                a=Integer.valueOf(S.substring(0,i));
            }catch(NumberFormatException e){
                break;
            }
            if(i>1 && S.charAt(0)=='0'){
                break;
            }
            for(int j=i+1;Math.max(i,j-i)<=S.length()-j;++j){
                if(j>i+1 && S.charAt(i)=='0'){
                    break;
                }
                Integer b=null;
                try{
                    b=Integer.valueOf(S.substring(i,j));
                }catch(NumberFormatException e){
                    break;
                }
                result.add(a);
                result.add(b);
                if(func(S.substring(j),a,b)){
                    return result;
                }
                result.clear();
            }
        }
        return result;
    }
    
    private boolean func(String remain,int a,int b){
        if(remain.length()==0){
            return true;
        }
        int sum=a+b;
        if(sum<a){
            return false;   //发生溢出
        }
        String s=String.valueOf(sum);
        if(remain.startsWith(s)){
            result.add(sum);
            return func(remain.substring(s.length()),b,sum);
        }
        return false;
    }
}
