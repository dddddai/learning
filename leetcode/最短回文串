给定一个字符串 s，你可以通过在字符串前面添加字符将其转换为回文串。找到并返回可以用这种方式转换的最短回文串。

示例 1:

输入: "aacecaaa"
输出: "aaacecaaa"
示例 2:

输入: "abcd"
输出: "dcbabcd"




class Solution(object):
    def shortestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        tmp='#'+'#'.join(s)+'#'
        r=[1]*(len(s)+1)
        maxLen=axis=boundary=0
        
        for i in xrange(len(s)+1):
            if i<boundary:
                r[i]=min(r[(axis<<1)-i],boundary-i+1)
                
            while i-r[i]>=0 and i+r[i]<len(tmp) and tmp[i-r[i]]==tmp[i+r[i]]:
                r[i]+=1
            
            if i+r[i]-1>boundary:
                axis,boundary=i,i+r[i]-1
                
            if i-r[i]+1==0:
                maxLen=max(maxLen,r[i]-1)
                
        return s[-1:maxLen-1:-1]+s





class Solution {
    public String shortestPalindrome(String s) {
        StringBuilder tmp=new StringBuilder();
        int size=(s.length()<<1)+1;
        int[] r=new int[s.length()+1];
        int i,maxLen,boundary,axis;
        maxLen=boundary=axis=0;
        
        for(i=0;i<size;++i){
            if((i&1)==0){
                tmp.append("#");
            }else{
                tmp.append(s.charAt(i>>1));
            }
        }
        for(i=0;i<=s.length();++i){
            if(i<boundary){
                r[i]=Math.min(r[(axis<<1)-i],boundary-i+1);
            }
            while(i-r[i]>=0 && i+r[i]<size && tmp.charAt(i-r[i])==tmp.charAt(i+r[i])){
                ++r[i];
            }
            if(i+r[i]-1>boundary){
                boundary=i+r[i]-1;
                axis=i;
            }
            if(i-r[i]+1==0){
                maxLen=Math.max(maxLen,r[i]-1);
            }
        }
        return new StringBuilder(s.substring(maxLen)).reverse().toString()+s;
    }
}
