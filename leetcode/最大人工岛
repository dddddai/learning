在二维地图上， 0代表海洋， 1代表陆地，我们最多只能将一格 0 海洋变成 1变成陆地。

进行填海之后，地图上最大的岛屿面积是多少？（上、下、左、右四个方向相连的 1 可形成岛屿）

示例 1:

输入: [[1, 0], [0, 1]]
输出: 3
解释: 将一格0变成1，最终连通两个小岛得到面积为 3 的岛屿。
示例 2:

输入: [[1, 1], [1, 0]]
输出: 4
解释: 将一格0变成1，岛屿的面积扩大为 4。
示例 3:

输入: [[1, 1], [1, 1]]
输出: 4
解释: 没有0可以让我们变成1，面积依然为 4。
说明:

1 <= grid.length = grid[0].length <= 50
0 <= grid[i][j] <= 1





class Solution {
    private int[] area;
    private int[][] whichLand;
    
    public int largestIsland(int[][] grid) {
        area=new int[grid.length*grid[0].length+1];
        whichLand=new int[grid.length][grid[0].length];
        int idx=1;
        for(int i=0;i<grid.length;++i){
            for(int j=0;j<grid[0].length;++j){
                if(grid[i][j]==1){
                    dfs(grid,i,j,idx++);
                }
            }
        }
        int result=0;
        for(int i=1;i<area.length && area[i]!=0;++i){
            result=Math.max(result,area[i]);
        }
        for(int i=0;i<grid.length;++i){
            for(int j=0;j<grid[0].length;++j){
                if(grid[i][j]==0){
                    Set<Integer> set=new HashSet<>(6);
                    if(i!=grid.length-1 && grid[i+1][j]==1){
                        set.add(whichLand[i+1][j]);
                    }
                    if(i!=0 && grid[i-1][j]==1){
                        set.add(whichLand[i-1][j]);
                    }
                    if(j!=grid[0].length-1 && grid[i][j+1]==1){
                        set.add(whichLand[i][j+1]);
                    }
                    if(j!=0 && grid[i][j-1]==1){
                        set.add(whichLand[i][j-1]);
                    }
                    int sum=0;
                    for(int areaIdx:set){
                        sum+=area[areaIdx];
                    }
                    result=Math.max(result,sum+1);
                }
            }
        }
        return result;
    }
    
    private void dfs(int[][] grid,int i,int j,int idx){
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || whichLand[i][j]!=0 || grid[i][j]==0){
            return;
        }
        ++area[idx];
        whichLand[i][j]=idx;
        dfs(grid,i+1,j,idx);
        dfs(grid,i-1,j,idx);
        dfs(grid,i,j+1,idx);
        dfs(grid,i,j-1,idx);
    }
}
