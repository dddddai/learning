有 N 个网络节点，标记为 1 到 N。

给定一个列表 times，表示信号经过有向边的传递时间。 times[i] = (u, v, w)，
其中 u 是源节点，v 是目标节点， w 是一个信号从源节点传递到目标节点的时间。

现在，我们从某个节点 K 发出一个信号。需要多久才能使所有节点都收到信号？
如果不能使所有节点收到信号，返回 -1。

 

示例：

输入：times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
输出：2




class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int N, int K) {
        vector<forward_list<pair<int,int>>> graph(N+1);
        for(auto& e:times){
            graph[e[0]].push_front({e[2],e[1]});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,K});
        vector<int> dist(N+1,INT_MAX);
        dist[K]=0;
        while(!pq.empty()){
            auto p=pq.top();
            pq.pop();
            if(p.first>dist[p.second]){
                continue;
            }
            for(auto e:graph[p.second]){
                if(p.first+e.first<dist[e.second]){
                    dist[e.second]=p.first+e.first;
                    pq.push({dist[e.second],e.second});
                }
            }
        }
        int result=0;
        for(int i=1;i<=N;++i){
            if(dist[i]==INT_MAX){
                return -1;
            }
            result=max(result,dist[i]);
        }
        return result;
    }
};
