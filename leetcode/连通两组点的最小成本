给你两组点，其中第一组中有 size1 个点，第二组中有 size2 个点，且 size1 >= size2 。

任意两点间的连接成本 cost 由大小为 size1 x size2 矩阵给出，其中 cost[i][j] 是第一组中的点 i 和第二组中的点 j 的连接成本。
如果两个组中的每个点都与另一组中的一个或多个点连接，则称这两组点是连通的。
换言之，第一组中的每个点必须至少与第二组中的一个点连接，且第二组中的每个点必须至少与第一组中的一个点连接。

返回连通两组点所需的最小成本。

示例 1：

输入：cost = [[15, 96], [36, 2]]
输出：17
解释：连通两组点的最佳方法是：
1--A
2--B
总成本为 17 。


示例 2：

输入：cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]
输出：4
解释：连通两组点的最佳方法是：
1--A
2--B
2--C
3--A
最小成本为 4 。
请注意，虽然有多个点连接到第一组中的点 2 和第二组中的点 A ，但由于题目并不限制连接点的数目，所以只需要关心最低总成本。


示例 3：

输入：cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]
输出：10
 

提示：

size1 == cost.length
size2 == cost[i].length
1 <= size1, size2 <= 12
size1 >= size2
0 <= cost[i][j] <= 100



问题等价于: 在一个矩阵中选取一些值, 满足矩阵的每一行和每一列都至少有一个元素被选中, 同时选中元素的总和最小



class Solution {
    public int connectTwoGroups(List<List<Integer>> cost) {
        int m=cost.size(),n=cost.get(0).size();
        int x=1<<n;
        int[][] sum=new int[m][x];
        for(int i=0;i<m;++i){
            for(int j=1;j<x;++j){
                int tmp=0;
                for(int k=0;k<n;++k){
                    if(((1<<k)&j)>0){
                        tmp+=cost.get(i).get(k);
                    }
                }
                sum[i][j]=tmp;
            }
        }
        int[][] dp=new int[2][x];
        dp[0]=sum[0];
        int idx=0;
        for(int i=1;i<m;++i){
            idx^=1;
            Arrays.fill(dp[idx],9999999);
            for(int j=1;j<x;++j){
                //保证每行选一个（并不一定要在rest中选）
                for(int k=0;k<n;++k){
                    dp[idx][j|(1<<k)]=Math.min(dp[idx][j|(1<<k)],dp[idx^1][j]+cost.get(i).get(k));
                }
                int rest=x-1-j;
                for(int k=rest;k>0;k=rest&(k-1)){
                    dp[idx][j|k]=Math.min(dp[idx][j|k],dp[idx^1][j]+sum[i][k]);
                }
            }
        }
        return dp[idx][x-1];
    }
}
