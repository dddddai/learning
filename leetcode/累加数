累加数是一个字符串，组成它的数字可以形成累加序列。

一个有效的累加序列必须至少包含 3 个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。

给定一个只包含数字 '0'-'9' 的字符串，编写一个算法来判断给定输入是否是累加数。

说明: 累加序列里的数不会以 0 开头，所以不会出现 1, 2, 03 或者 1, 02, 3 的情况。

示例 1:

输入: "112358"
输出: true 
解释: 累加序列为: 1, 1, 2, 3, 5, 8 。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
示例 2:

输入: "199100199"
输出: true 
解释: 累加序列为: 1, 99, 100, 199。1 + 99 = 100, 99 + 100 = 199



class Solution(object):
    def isAdditiveNumber(self, num):
        """
        :type num: str
        :rtype: bool
        """
        self.seq=[]
        return self.func(num,0)
        
    
    def func(self,num,idx):
        if idx==len(num) and len(self.seq)>2:
            return True
        for i in xrange(idx,len(num)):
            if num[idx]=='0' and i!=idx:
                break
            tmp=int(num[idx:i+1])
            if len(self.seq)>=2 and tmp>self.seq[-1]+self.seq[-2]:
                break
            if len(self.seq)<2 or tmp==self.seq[-1]+self.seq[-2]:
                self.seq.append(tmp)
                if self.func(num,i+1):
                    return True
                self.seq.pop()
        
        return False
        
        
        
        
import java.math.BigInteger;

class Solution {
    private static List<BigInteger> seq;
    
    public boolean isAdditiveNumber(String num) {
        seq=new ArrayList<>(num.length());
        return func(num,0);
    }
    private boolean func(String num,int idx){
        if(idx==num.length() && seq.size()>2){
            return true;
        }
        for(int i=idx;i<num.length();++i){
            if(num.charAt(idx)=='0' && i!=idx){
                break;
            }
            BigInteger tmp=new BigInteger(num.substring(idx,i+1));
            BigInteger sum=null;
            if(seq.size()>=2){
                sum=seq.get(seq.size()-1).add(seq.get(seq.size()-2));
                if(tmp.compareTo(sum)>0){
                    break;
                }
            }
            if(seq.size()<2 || tmp.equals(sum)){
                seq.add(tmp);
                if(func(num,i+1)){
                    return true;
                }
                seq.remove(seq.size()-1);
            }
        }
        return false;
    }
}        
