给定两个由小写字母构成的字符串 A 和 B ，只要我们可以通过交换 A 中的两个字母得到与 B 相等的结果，就返回 true ；否则返回 false 。

交换字母的定义是取两个下标 i 和 j （下标从 0 开始），只要 i!=j 就交换 A[i] 和 A[j] 处的字符。
例如，在 "abcd" 中交换下标 0 和下标 2 的元素可以生成 "cbad" 。
 

示例 1：

输入： A = "ab", B = "ba"
输出： true
解释： 你可以交换 A[0] = 'a' 和 A[1] = 'b' 生成 "ba"，此时 A 和 B 相等。


示例 2：

输入： A = "ab", B = "ab"
输出： false
解释： 你只能交换 A[0] = 'a' 和 A[1] = 'b' 生成 "ba"，此时 A 和 B 不相等。


示例 3:

输入： A = "aa", B = "aa"
输出： true
解释： 你可以交换 A[0] = 'a' 和 A[1] = 'a' 生成 "aa"，此时 A 和 B 相等。


示例 4：

输入： A = "aaaaaaabc", B = "aaaaaaacb"
输出： true


示例 5：

输入： A = "", B = "aa"
输出： false




class Solution {
    public boolean buddyStrings(String A, String B) {
        if(A.length()!=B.length()){
            return false;
        }
        int a=-1,b=-1;
        int[] cnt=new int[26];
        boolean duplicate=false;
        for(int i=0;i<A.length();++i){
            if(A.charAt(i)!=B.charAt(i)){
                if(b!=-1){
                    return false;
                }
                if(a==-1){
                    a=i;
                }else{
                    if(A.charAt(a)!=B.charAt(i) || B.charAt(a)!=A.charAt(i)){
                        return false;
                    }
                    b=i;
                }
            }
            if(++cnt[A.charAt(i)-'a']>1){
                duplicate=true;
            }
        }
        return (a!=-1 && b!=-1) || (a==-1 && b==-1 && duplicate);
    }
}
