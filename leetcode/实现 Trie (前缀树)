实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。

示例:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // 返回 true
trie.search("app");     // 返回 false
trie.startsWith("app"); // 返回 true
trie.insert("app");   
trie.search("app");     // 返回 true
说明:

你可以假设所有的输入都是由小写字母 a-z 构成的。
保证所有输入均为非空字符串。



class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.isEnd=False
        self.children=[None]*26

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: None
        """
        cur=self
        for c in word:
            idx=ord(c)-97
            if not cur.children[idx]:
                cur.children[idx]=Trie()
            cur=cur.children[idx]
            
        cur.isEnd=True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        cur=self
        for c in word:
            idx=ord(c)-97
            if not cur.children[idx]:
                return False
            cur=cur.children[idx]
            
        return cur.isEnd

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        cur=self
        for c in prefix:
            idx=ord(c)-97
            if not cur.children[idx]:
                return False
            cur=cur.children[idx]
            
        return True
        
        
        
        
        
class Trie {
    public boolean isEnd;
    private Trie[] children;
    /** Initialize your data structure here. */
    public Trie() {
        isEnd=false;
        children=new Trie[26];
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Trie cur=this;
        for(int i=0;i<word.length();++i){
            int idx=word.charAt(i)-'a';
            if(cur.children[idx]==null){
                cur.children[idx]=new Trie();
            }
            cur=cur.children[idx];
        }
        cur.isEnd=true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Trie cur=this;
        for(int i=0;i<word.length();++i){
            int idx=word.charAt(i)-'a';
            if(cur.children[idx]==null){
                return false;
            }
            cur=cur.children[idx];
        }
        return cur.isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Trie cur=this;
        for(int i=0;i<prefix.length();++i){
            int idx=prefix.charAt(i)-'a';
            if(cur.children[idx]==null){
                return false;
            }
            cur=cur.children[idx];
        }
        return true;
    }
}        
