1.用最小堆

class Solution(object):
    def perc_down(self,arr,start,end):
            root=start
            while 1:
                child=(root<<1)+1
                if child>end:
                    break
                if child+1<=end and arr[child][1]>arr[child+1][1]:
                    child+=1
                if arr[child][1]<arr[root][1]:
                    arr[child],arr[root]=arr[root],arr[child]
                    root=child
                else:
                    break
                    
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        # result=sorted(set(nums),key=lambda x:nums.count(x),reverse=True)
        # return result[:k]
        times={}
        for n in nums:
            times[n]=times.get(n,0)+1
        times=[(n,times[n]) for n in times]
        
        for i in range((k-2)>>1,-1,-1):
            self.perc_down(times,i,k-1)
        for i in range(k,len(times)):
            if times[i][1]>times[0][1]:
                times[0]=times[i]
                self.perc_down(times,0,k-1)
        return map(lambda x:x[0],times[:k])
        
        
        
2.快排思想：

class Solution(object):
    def func(self,arr,start,end,k):
        if start>=end:
            return map(lambda x:x[0],arr[start:])
        i,j,mid=start,end,(start+end)>>1
        median=max(min(arr[i][1],arr[j][1]),min(max(arr[i][1],arr[j][1]),arr[mid][1]))
        if median!=arr[j][1]:
            if median==arr[i][1]:
                arr[i],arr[j]=arr[j],arr[i]
            else:
                arr[mid],arr[j]=arr[j],arr[mid]
                
        while i<j:
            if arr[i][1]>arr[j][1]:
                arr[i],arr[j-1],arr[j]=arr[j-1],arr[j],arr[i]
                j-=1
            else:
                i+=1
        
        if len(arr)-i==k:
            return map(lambda x:x[0],arr[i:])
        if len(arr)-i>k:
            return self.func(arr,i+1,end,k)
        return self.func(arr,start,i-1,k)
                    
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        # result=sorted(set(nums),key=lambda x:nums.count(x),reverse=True)
        # return result[:k]
        freq={}
        for n in nums:
            freq[n]=freq.get(n,0)+1
        freq=[(n,freq[n]) for n in freq]
        
        return self.func(freq,0,len(freq)-1,k)
