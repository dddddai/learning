给定一个非负整数数组和一个整数 m，你需要将这个数组分成 m 个非空的连续子数组。设计一个算法使得这 m 个子数组各自和的最大值最小。

注意:
数组长度 n 满足以下条件:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
示例:

输入:
nums = [7,2,5,10,8]
m = 2

输出:
18

解释:
一共有四种方法将nums分割为2个子数组。
其中最好的方式是将其分为[7,2,5] 和 [10,8]，
因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。


思路：用二分查找，当m=len(nums)时，结果最小，为max(nums)，当m=1时，结果最大，为sum(nums)
令l=max(nums),r=sum(nums),mid=(l+r)>>1
遍历数组，从头开始求和，每当和>mid时，就在当前位置前切一刀，最后可求得子数组和最大值


class Solution(object):
    def splitArray(self, nums, m):
        """
        :type nums: List[int]
        :type m: int
        :rtype: int
        """
        l,r=max(nums),sum(nums)
        while l<r:
            mid=(l+r)>>1
            if(self.func(nums,m,mid)):
                l=mid+1
            else:
                r=mid
                
        return l
        
    
    def func(self,nums,m,target):
        curSum,cnt=0,1
        for n in nums:
            curSum+=n
            if curSum>target:
                cnt+=1
                curSum=n
                
                if cnt>m:
                    return True
        return False
        
        
        
        
        
        
class Solution {
    public int splitArray(int[] nums, int m) {
        long l=nums[0],r=0;
        for(int n:nums)
        {
            l=Math.max(l,n);
            r+=n;
        }
        while(l<r)
        {
            long mid=(l+r)>>1;
            if(func(nums,m,mid))
                l=mid+1;
            else
                r=mid;
        }
        return (int)l;
    }
    boolean func(int[] nums,int m,long target)
    {
        int curSum=0,cnt=1;
        for(int n:nums)
        {
            curSum+=n;
            if(curSum>target)
            {
                curSum=n;
                if(++cnt>m)
                    return true;
            }
        }
        return false;
    }
}        
