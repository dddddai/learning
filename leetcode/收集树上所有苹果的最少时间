给你一棵有 n 个节点的无向树，节点编号为 0 到 n-1 ，它们中有一些节点有苹果。通过树上的一条边，
需要花费 1 秒钟。你从 节点 0 出发，请你返回最少需要多少秒，可以收集到所有苹果，并回到节点 0 。

无向树的边由 edges 给出，其中 edges[i] = [fromi, toi] ，表示有一条边连接 from 和 toi 。
除此以外，还有一个布尔数组 hasApple ，其中 hasApple[i] = true 代表节点 i 有一个苹果，
否则，节点 i 没有苹果。

 

示例 1：

输入：n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], 
hasApple = [false,false,true,false,true,true,false]
输出：8 
解释：上图展示了给定的树，其中红色节点表示有苹果。一个能收集到所有苹果的最优方案由绿色箭头表示。


示例 2：

输入：n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], 
hasApple = [false,false,true,false,false,true,false]
输出：6
解释：上图展示了给定的树，其中红色节点表示有苹果。一个能收集到所有苹果的最优方案由绿色箭头表示。


示例 3：

输入：n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], 
hasApple = [false,false,false,false,false,false,false]
输出：0





class Solution {
    private boolean[] visited;
    
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        List<List<Integer>> graph=new ArrayList<>(n);
        for(int i=0;i<n;++i){
            graph.add(new LinkedList<>());
        }
        for(int[] e:edges){
            graph.get(e[0]).add(e[1]);
            graph.get(e[1]).add(e[0]);
        }
        int cnt=0;
        visited=new boolean[n];
        for(int i=0;i<n;++i){
            if(hasApple.get(i)){
                cnt+=dfs(graph,i,-1)[0];
            }
        }
        return cnt<<1;
    }
    
    private int[] dfs(List<List<Integer>> graph,int idx,int pre){
        if(idx==0){
            return new int[]{0,1};
        }
        int result=visited[idx] ? 0:1;
        int flag=0;
        for(int next:graph.get(idx)){
            if(next!=pre){
                int[] tmp=dfs(graph,next,idx);
                if(tmp[1]==1){
                    result+=tmp[0];
                    flag=1;
                    visited[idx]=true;
                    break;
                }
            }
        }
        return new int[]{result,flag};
    }
}
