在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。

示例 1:

输入: 4->2->1->3
输出: 1->2->3->4


class Solution(object):
    def merge(self,p1,p2):
        p=dummy=ListNode(0)
        while p1 and p2:
            if p1.val<p2.val:
                p.next=p1
                p1=p1.next
            else:
                p.next=p2
                p2=p2.next
            p=p.next
            
        p.next=p1 or p2
        return dummy.next
    
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return head
        cut=quick=slow=head
        
        while quick and quick.next:
            quick=quick.next.next
            cut=slow
            slow=slow.next
        cut.next=None
        
        return self.merge(self.sortList(head),self.sortList(slow))
        
        

class Solution {
    ListNode merge(ListNode p1,ListNode p2)
    {
        ListNode dummy=new ListNode(0);
        ListNode p=dummy;
        while(p1!=null && p2!=null)
        {
            if(p1.val<p2.val)
            {
                p.next=p1;
                p1=p1.next;
            }
            else
            {
                p.next=p2;
                p2=p2.next;
            }
            p=p.next;
        }
        p.next=(p1==null?p2:p1);
        return dummy.next;
    }
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null)
            return head;
        
        ListNode quick=head,slow=head,cut=head;
        while(quick!=null && quick.next!=null)
        {
            quick=quick.next.next;
            cut=slow;
            slow=slow.next;
        }
        cut.next=null;
        return merge(sortList(head),sortList(slow));
    }
}
