给你一个整数数组 digits，你可以通过按任意顺序连接其中某些数字来形成 3 的倍数，请你返回所能得到的最大的 3 的倍数。

由于答案可能不在整数数据类型范围内，请以字符串形式返回答案。

如果无法得到答案，请返回一个空字符串。

示例 1：
输入：digits = [8,1,9]
输出："981"

示例 2：
输入：digits = [8,6,7,1,0]
输出："8760"

示例 3：
输入：digits = [1]
输出：""

示例 4：
输入：digits = [0,0,0,0,0,0]
输出："0"




class Solution {
    public String largestMultipleOfThree(int[] digits) {
        int[] cnt=new int[10];
        boolean[] mod=new boolean[3];
        int sum=0;
        for(int d:digits){
            mod[d%3]=true;
            ++cnt[d];
            sum+=d;
        }
        int removeMod=0,removeCnt=0;
        if(sum%3==1){
            if(mod[1]){
                removeMod=1;
                removeCnt=1;
            }else{
                removeMod=2;
                removeCnt=2;
            }
        }else if(sum%3==2){
            if(mod[2]){
                removeMod=2;
                removeCnt=1;
            }else{
                removeMod=1;
                removeCnt=2;
            }
        }
        StringBuilder sb=new StringBuilder(digits.length-removeCnt);
        for(int i=0;i<=9;++i){
            while(removeCnt>0 && i%3==removeMod && cnt[i]>0){
                --cnt[i];
                --removeCnt;
            }
            while(cnt[i]-->0){
                sb.append(i);
            }
        }
        while(sb.length()>1 && sb.charAt(sb.length()-1)=='0'){
            sb.deleteCharAt(sb.length()-1);
        }
        return sb.reverse().toString();
    }
}
