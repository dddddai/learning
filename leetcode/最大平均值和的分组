我们将给定的数组 A 分成 K 个相邻的非空子数组 ，我们的分数由每个子数组内的平均值的总和构成。计算我们所能得到的最大分数是多少。

注意我们必须使用 A 数组中的每一个数进行分组，并且分数不一定需要是整数。

示例:
输入: 
A = [9,1,2,3,9]
K = 3
输出: 20
解释: 
A 的最优分组是[9], [1, 2, 3], [9]. 得到的分数是 9 + (1 + 2 + 3) / 3 + 9 = 20.
我们也可以把 A 分成[9, 1], [2], [3, 9].
这样的分组得到的分数为 5 + 2 + 6 = 13, 但不是最大值.
说明:

1 <= A.length <= 100.
1 <= A[i] <= 10000.
1 <= K <= A.length.
答案误差在 10^-6 内被视为是正确的。



用一个二维数组dp，dp[m][i]表示前i个数分为m个子数组的最大分数
分为m个子数组时，i的取值范围，m<=i<=len(A)+m-K，用l和r来记录



class Solution(object):
    def largestSumOfAverages(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: float
        """
        if K==1:
            return sum(A)/float(len(A))
        
        dp=[0]*(len(A)+1)
        sumOfSubarr=[0]*(len(A)+1)
        for i,n in enumerate(A):
            sumOfSubarr[i+1]=sumOfSubarr[i]+n
        
        l,r=1,len(A)+1-K
        for i in xrange(l,r+1):
            dp[i]=sumOfSubarr[i]/float(i)
        
        for m in xrange(2,K):
            l+=1
            r+=1
            for i in xrange(r,l-1,-1):
                for j in xrange(l-1,i):
                    dp[i]=max(dp[i],dp[j]+float(sumOfSubarr[i]-sumOfSubarr[j])/(i-j))
        
        for j in xrange(l,len(A)):
            dp[-1]=max(dp[-1],dp[j]+float(sumOfSubarr[-1]-sumOfSubarr[j])/(len(A)-j))
                    
        return dp[-1]
        
        
        
        
        
class Solution {
    public double largestSumOfAverages(int[] A, int K) {
        double[] sumOfSubarr=new double[A.length+1];
        for(int i=1;i<=A.length;++i){
            sumOfSubarr[i]=sumOfSubarr[i-1]+A[i-1];
        }
        if(K==1){
            return sumOfSubarr[A.length]/A.length;
        }
        double[] dp=new double[A.length+1];
        int l=1,r=A.length+1-K;
        for(int i=l;i<=r;++i){
            dp[i]=sumOfSubarr[i]/i;
        }
        for(int m=2;m<K;++m){
            ++l;    
            ++r;
            for(int i=r;i>=l;--i){
                for(int j=l-1;j<i;++j){
                    dp[i]=Math.max(dp[i],dp[j]+(sumOfSubarr[i]-sumOfSubarr[j])/(i-j));
                }
            }
        }
        for(int j=l-1;j<A.length;++j){
            dp[A.length]=Math.max(dp[A.length],
                                  dp[j]+(sumOfSubarr[A.length]-sumOfSubarr[j])/(A.length-j));
        }
        return dp[A.length];
    }
}
