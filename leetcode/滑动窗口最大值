示例:

输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3
输出: [3,3,5,5,6,7] 
解释: 

  滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 
 
class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        if not nums:
            return []
        
        from collections import deque
        
        result=[]
        dq=deque()
        size=len(nums)
        for i in range(size):
            while dq and dq[-1]<nums[i]:
                dq.pop()
            dq.append(nums[i])
            if i>k-1 and dq[0]==nums[i-k]:
                dq.popleft()
            if i>=k-1:
                result.append(dq[0])
        return result



class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length==0)
            return new int[0];
        
        Deque<Integer> dq=new LinkedList<Integer>();
        int[] result=new int[nums.length-k+1];
        int idx=0;
        
        for(int i=0;i<nums.length;++i)
        {
            while(!dq.isEmpty() && dq.getLast()<nums[i])
            //不能是<=  否则会在下面的第一个if判断中丢失最大值
                dq.removeLast();
            dq.offerLast(nums[i]);
            if(i>=k && nums[i-k]==dq.getFirst())
                dq.removeFirst();
            if(i>=k-1)
                result[idx++]=dq.getFirst();
        }
        return result;
    }
}
