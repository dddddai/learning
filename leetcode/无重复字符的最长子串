给定一个字符串，找出不含有重复字符的最长子串的长度。



class Solution(object):
    def lengthOfLongestSubstring(self, s):
        result=0
        start=0
        t={}
        for i in xrange(len(s)):
            if s[i] in t and start<=t[s[i]]:
                start=t[s[i]]+1
            result=max(result,i-start+1)
            t[s[i]]=i
        return result




import java.util.HashMap;

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character,Integer> visited=new HashMap<>();
        int start=0,result=0;
        for(int i=0;i<s.length();i++)
        {
            if (visited.containsKey(s.charAt(i)) && start<=visited.get(s.charAt(i)))
                start=visited.get(s.charAt(i))+1;
            result=Math.max(result,i-start+1);
            visited.put(s.charAt(i),i);
        }
        return result;
    }
}




class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char,int> map(s.length());
        int result=0;
        int start=0;
        for(int i=0;i<s.length();++i){
            auto search=map.find(s.at(i));
            if(search!=map.end() && search->second>=start){
                start=search->second+1;
            }
            result=max(result,i-start+1);
            map[s.at(i)]=i;
        }
        return result;
    }
};
