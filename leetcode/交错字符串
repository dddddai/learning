给定三个字符串 s1, s2, s3, 验证 s3 是否是由 s1 和 s2 交错组成的。

示例 1:

输入: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
输出: true
示例 2:

输入: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
输出: false



可以用动态规划来解。dp(i,j)表示s1的前i个字符串和s2的前j个字符串能否交错构成s3的前i+j个字符串。
1、如果s1[i-1]==s3[i+j-1]，则dp(i,j)=dp(i-1,j)
2、如果s2[j-1]==s3[i+j-1]，则dp(i,j)=dp(i,j-1)


s1为行，s2为列
向右走就是用s2的去匹配s3，向下走就是用s1去匹配s3。


class Solution(object):
    def isInterleave(self, s1, s2, s3):
        """
        :type s1: str
        :type s2: str
        :type s3: str
        :rtype: bool
        """
        if len(s1)+len(s2)!=len(s3):
            return False
        
        if len(s1)<len(s2):
            return self.isInterleave(s2,s1,s3)
        
        dp=[False]*(len(s2)+1)
        dp[0]=True
        for i,c in enumerate(s2):
            if c!=s3[i]:
                break
            dp[i+1]=True
            
        for i in xrange(1,len(s1)+1):
            tmp=[False]*(len(s2)+1)
            flag=tmp[0]=dp[0] and s1[i-1]==s3[i-1]
            
            #flag用来记录每行是否至少有一个True
            
            for j in xrange(1,len(s2)+1):
                idx=i+j-1
                tmp[j]=(s3[idx]==s1[i-1] and dp[j]) or (s3[idx]==s2[j-1] and tmp[j-1])
                
                if not flag:
                    flag=tmp[j]
            
            if not flag:
                return False
            
            dp=tmp
            
        return dp[-1]
        
        
        


class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s1.length()+s2.length()!=s3.length()){
            return false;
        }
        if(s1.length()<s2.length()){
            return isInterleave(s2,s1,s3);
        }
        boolean[] dp=new boolean[s2.length()+1];
        dp[0]=true;
        for(int i=1;i<=s2.length() && s2.charAt(i-1)==s3.charAt(i-1);++i){
            dp[i]=true;
        }
        for(int i=1;i<=s1.length();++i){
            boolean[] tmp=new boolean[s2.length()+1];
            tmp[0]=dp[0] && s1.charAt(i-1)==s3.charAt(i-1);
            boolean flag=tmp[0];    //用来记录每行是否至少有一个true
            
            for(int j=1;j<=s2.length();++j){
                int idx=i+j-1;
                tmp[j]=(s3.charAt(idx)==s1.charAt(i-1) && dp[j]) || (s3.charAt(idx)==s2.charAt(j-1) && tmp[j-1]);
                
                if(!flag){
                    flag=tmp[j];
                }
            }
            if(!flag){
                return false;
            }
            dp=tmp;
        }
        return dp[s2.length()];
    }
}
