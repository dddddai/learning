给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），
可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。

示例 1:

输入: [1,3,4,2,2]
输出: 2
示例 2:

输入: [3,1,3,4,2]
输出: 3

由于数组大小n+1，元素的取值范围1~n，可以建立下标到数组元素的映射，
同时数组元素也可以作为下标，例如{1,2,3,1}，映射关系为{0,3}->1,1->2,2->3,会形成环。 
参考 单链表判断是否有环且求环入口 
可以求出映射中环的入口，也就是重复数字。


class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        quick,slow=nums[nums[0]],nums[0]
        while quick!=slow:
            quick=nums[nums[quick]]
            slow=nums[slow]
        quick=0
        while quick!=slow:
            quick,slow=nums[quick],nums[slow]
        return quick




class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        for n in nums:
            idx=n%len(nums)
            if nums[idx]>len(nums):
                return idx
            nums[idx]+=len(nums)
            
            
            
class Solution {
    public int findDuplicate(int[] nums) {
        for(int n:nums)
        {
            int idx=n%nums.length;
            if(nums[idx]>nums.length)
                return idx;
            nums[idx]+=nums.length;
        }
        throw new IllegalStateException("No Duplicate Number!");
        }
}           
