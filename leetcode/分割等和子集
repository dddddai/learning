给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。

注意:
每个数组中的元素不会超过 100
数组的大小不会超过 200

示例 1:
输入: [1, 5, 11, 5]
输出: true
解释: 数组可以分割成 [1, 5, 5] 和 [11].
 

示例 2:
输入: [1, 2, 3, 5]
输出: false
解释: 数组不能分割成两个元素和相等的子集.




class Solution {
    public boolean canPartition(int[] nums) {
        int sum=0;
        for(int num:nums){
            sum+=num;
        }
        if((sum&1)==1){
            return false;
        }
        int n=sum>>1;
        boolean[] dp=new boolean[n];
        dp[0]=true;
        for(int num:nums){
            if(n>=num && dp[n-num]){
                return true;
            }
            for(int i=n-1;i>=num;--i){
                dp[i]|=dp[i-num];
            }
        }
        return false;
    }
}




func canPartition(nums []int) bool {
    sum:=0
    for _,num:=range nums {
        sum+=num
    }
    if sum&1==1 {
        return false
    }
    n:=sum>>1
    dp:=make([]bool,n)
    dp[0]=true
    for _,num:=range nums {
        if n>=num && dp[n-num] {
            return true
        }
        for i:=n-1;i>=num;i-- {
            dp[i]=dp[i] || dp[i-num]
        }
    }
    return false
}
