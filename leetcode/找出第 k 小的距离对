给定一个整数数组，返回所有数对之间的第 k 个最小距离。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。


示例 1:

输入：
nums = [1,3,1]
k = 1
输出：0 
解释：
所有数对如下：
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
因此第 1 个最小距离的数对是 (1,1)，它们之间的距离为 0。



class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        Arrays.sort(nums);
        int l=0,r=nums[nums.length-1]-nums[0];
        while(l<r){
            int mid=(l+r)>>1;
            if(bigger(nums,mid,k)){
                r=mid;
            }else{
                l=mid+1;
            }
        }
        return l;
    }

    private boolean bigger(int[] arr,int dist,int k){
        int l=0;
        for(int i=1;i<arr.length;++i){
            int r=i;
            while(l<r){
                int mid=(l+r)>>1;
                if(arr[mid]<arr[i]-dist){
                    l=mid+1;
                }else{
                    r=mid;
                }
            }
            k-=i-l;
            if(k<=0){
                return true;
            }
        }
        return false;
    }
}



func smallestDistancePair(nums []int, k int) int {
    sort.Ints(nums)
    l,r:=0,nums[len(nums)-1]-nums[0]
    for l<r {
        mid:=(l+r)>>1
        if bigger(nums,mid,k) {
            r=mid
        }else{
            l=mid+1
        }
    }
    return l
}

func bigger(arr []int,dist int,k int) bool {
    l:=0
    for i:=1;i<len(arr);i++ {
        r:=i
        for l<r {
            mid:=(l+r)>>1
            if arr[mid]<arr[i]-dist {
                l=mid+1
            }else{
                r=mid
            }
        }
        k-=i-l
        if k<=0 {
            return true
        }
    }
    return false
}
