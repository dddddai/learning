给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。

你可以假设数组是非空的，并且给定的数组总是存在众数。


如果有符合条件的数字，则它出现的次数比其他所有数字出现的次数和还要多。
在遍历数组时保存两个值：一是数组中一个数字，一是次数。遍历下一个数字时，若它与之前保存的数字相同，
则次数加1，否则次数减1；若次数为0，则保存当前数字，
并将次数置为1。遍历结束后，所保存的数字即为所求。然后再判断它是否符合条件即可。

class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        result=nums[0]
        times=1
        size=len(nums)
        for i in range(1,size):
            if result==nums[i]:
                times+=1
            else:
                times-=1
                if times==0:
                    result=nums[i]
                    times=1
        return result
