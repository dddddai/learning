给定一个整数数组 A，找到 min(B) 的总和，其中 B 的范围为 A 的每个（连续）子数组。

由于答案可能很大，因此返回答案模 10^9 + 7。

 

示例：

输入：[3,1,2,4]
输出：17
解释：
子数组为 [3]，[1]，[2]，[4]，[3,1]，[1,2]，[2,4]，[3,1,2]，[1,2,4]，[3,1,2,4]。 
最小值为 3，1，2，4，1，1，2，1，1，1，和为 17。





class Solution(object):
    def sumSubarrayMins(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        result=0
        stack=[0]
        A=[-sys.maxsize-1]+A+[-sys.maxsize-1]
        
        for i in xrange(1,len(A)):
            while A[stack[-1]]>A[i]:
                idx=stack.pop()
                result+=A[idx]*(idx-stack[-1])*(i-idx)
            
            stack.append(i)
        
        return result % 1000000007
        
        
        
        
class Solution {
    private static final long MOD=(long)1e9+7;
        
    public int sumSubarrayMins(int[] A) {
        Stack<Integer> stack=new Stack<>();
        long result=0;
        
        List<Integer> tmp=new ArrayList<>();
        tmp.add(Integer.MIN_VALUE);
        for(int n:A)
            tmp.add(n);
        tmp.add(Integer.MIN_VALUE);
        
        stack.push(0);
        
        for(int i=1;i<tmp.size();++i)
        {
            while(tmp.get(stack.peek())>tmp.get(i))
            {
                int idx=stack.pop();
                result+=tmp.get(idx)*(idx-stack.peek())*(i-idx);
            }
            stack.push(i);
        }
        return (int)(result % MOD);
    }
}
}        
