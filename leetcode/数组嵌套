索引从0开始长度为N的数组A，包含0到N - 1的所有整数。
找到最大的集合S并返回其大小，其中 S[i] = {A[i], A[A[i]], A[A[A[i]]], ... }且遵守以下的规则。

假设选择索引为i的元素A[i]为S的第一个元素，S的下一个元素应该是A[A[i]]，之后是A[A[A[i]]]... 
以此类推，不断添加直到S出现重复的元素。

示例 1:

输入: A = [5,4,0,3,1,6,2]
输出: 4
解释: 
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.

其中一种最长的 S[K]:
S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}




class Solution {
    public int arrayNesting(int[] nums) {
        int n=nums.length;
        boolean[] visited=new boolean[n];
        int result=1;
        for(int i=0;i<n;++i){
            int idx=i;
            int len=0;
            while(!visited[idx]){
                visited[idx]=true;
                idx=nums[idx];
                ++len;
            }
            if((len<<1)>=n){
                return len;
            }
            result=Math.max(result,len);
        }
        return result;
    }
}




func arrayNesting(nums []int) int {
    n:=len(nums)
    visited:=make([]bool,n)
    result:=1
    for i:=0;i<n;i++ {
        idx:=i
        len:=0
        for !visited[idx] {
            visited[idx]=true
            idx=nums[idx]
            len++
        }
        if len<<1 >= n {
            return len
        }
        if len > result {
            result=len
        }
    }
    return result
}
