给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。
转换需遵循如下规则：

每次转换只能改变一个字母。
转换过程中的中间单词必须是字典中的单词。
说明:
如果不存在这样的转换序列，返回 0。
所有单词具有相同的长度。
所有单词只由小写字母组成。
字典中不存在重复的单词。
你可以假设 beginWord 和 endWord 是非空的，且二者不相同。



用bfs，最先找到的一定是最短的路径

如果不存在这样的转换序列，返回 0。
所有单词具有相同的长度。
所有单词只由小写字母组成。
字典中不存在重复的单词。
你可以假设 beginWord 和 endWord 是非空的，且二者不相同。

class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """ 
        wordList=set(wordList)
        if endWord not in wordList:
            return 0
            
        cur,targets={beginWord},{endWord}
        cnt=2
        
        while cur:
            nxt=set()
            if len(cur)>len(targets):
                cur,targets=targets,cur
                #选择更短的set进行遍历以加快速度，从前往后和从后往前是等效的
            for word in cur:
                for i in xrange(len(word)):
                    for j in xrange(97,123):
                        if word[i]==chr(j):
                            continue
                        candidate=word[:i]+chr(j)+word[i+1:]
                        if candidate in targets:
                            return cnt
                        if candidate in wordList:
                            wordList.discard(candidate)
                            nxt.add(candidate)
            cur=nxt
            cnt+=1
            
        return 0





class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        HashSet wdList=new HashSet(wordList);
        if(!wdList.contains(endWord))
            return 0;
            
        HashSet cur=new HashSet(),targets=new HashSet();
        cur.add(beginWord);
        targets.add(endWord);
        int cnt=2;
        
        while(!cur.isEmpty())
        {
            HashSet nxt=new HashSet();
            if(cur.size()>targets.size())
            {
                HashSet tmp=new HashSet();
                tmp=cur;
                cur=targets;
                targets=tmp;
            }
            Iterator it=cur.iterator();
            while(it.hasNext())
            {
                String word=it.next().toString();
                for(int i=0;i<word.length();++i)
                {
                    for(char c='a';c<='z';++c)
                    {
                        if(c==word.charAt(i))
                            continue;
                        String candidate=word.substring(0,i)+c+word.substring(i+1);
                        if(targets.contains(candidate))
                            return cnt;
                        if(wdList.contains(candidate))
                        {
                            wdList.remove(candidate);
                            nxt.add(candidate);
                        }
                    }
                }
            }
            ++cnt;
            cur=nxt;
        }
        return 0;
    }
}
