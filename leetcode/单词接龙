给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。
转换需遵循如下规则：

每次转换只能改变一个字母。
转换过程中的中间单词必须是字典中的单词。
说明:

如果不存在这样的转换序列，返回 0。
所有单词具有相同的长度。
所有单词只由小写字母组成。
字典中不存在重复的单词。
你可以假设 beginWord 和 endWord 是非空的，且二者不相同。

class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        d=set(wordList)
        if beginWord in d:
            d.remove(beginWord)
        if endWord not in wordList:
            return 0
        length={beginWord:1}
        path=[beginWord]
        while d and path:
            s=path.pop(0)
            for i in range(len(s)):
                tmp=s
                for j in range(97,123):
                    if tmp[i]==chr(j):
                        continue
                    tmp=tmp[:i]+chr(j)+tmp[i+1:]
                    if tmp in d:
                        path.append(tmp)
                        length[tmp]=length[s]+1
                        d.remove(tmp)
                    if tmp==endWord:
                        return length[endWord]
        return 0
