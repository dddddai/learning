给定二叉树的根节点 root，找出存在于不同节点 A 和 B 之间的最大值 V，其中 V = |A.val - B.val|，且 A 是 B 的祖先。

（如果 A 的任何子节点之一为 B，或者 A 的任何子节点是 B 的祖先，那么我们认为 A 是 B 的祖先）

 

示例：

输入：[8,3,10,1,6,null,14,null,null,4,7,13]
输出：7
解释： 
我们有大量的节点与其祖先的差值，其中一些如下：
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
在所有可能的差值中，最大值 7 由 |8 - 1| = 7 得出。




class Solution {
    private int result;
    
    public int maxAncestorDiff(TreeNode root) {
        func(root);
        return result;
    }
    
    private int[] func(TreeNode root){
        if(root.left==null && root.right==null){
            return new int[]{root.val,root.val};
        }
        int min=Integer.MAX_VALUE,max=Integer.MIN_VALUE;
        if(root.left!=null){
            int[] tmp=func(root.left);
            min=Math.min(min,tmp[0]);
            max=Math.max(max,tmp[1]);
        }
        if(root.right!=null){
            int[] tmp=func(root.right);
            min=Math.min(min,tmp[0]);
            max=Math.max(max,tmp[1]);
        }
        result=Math.max(result,Math.max(Math.abs(root.val-min),Math.abs(root.val-max)));
        min=Math.min(min,root.val);
        max=Math.max(max,root.val);
        return new int[]{min,max};
    }
}
