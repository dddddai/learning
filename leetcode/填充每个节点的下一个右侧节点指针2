给定一个二叉树

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。

初始状态下，所有 next 指针都被设置为 NULL




class Solution:
    
    def connect(self, root):
        cur=root
        levelPre=TreeLinkNode(0)
        
        while cur:
            levelPre.next=None
            p=levelPre
            
            while cur:
                if cur.left:
                    p.next=cur.left
                    p=p.next
                if cur.right:
                    p.next=cur.right
                    p=p.next
                   
                cur=cur.next
            
            cur=levelPre.next
        
        return root
        
        
        
        

class Solution {
    public Node connect(Node root) {
        Node levelPre=new Node(0,null,null,null);
        Node cur=root;
        while(cur!=null){
            levelPre.next=null;
            Node p=levelPre;
            
            while(cur!=null){
                if(cur.left!=null){
                    p.next=cur.left;
                    p=p.next;
                }
                if(cur.right!=null){
                    p.next=cur.right;
                    p=p.next;
                }
                cur=cur.next;
            }
            cur=levelPre.next;
        }
        return root;
    }
}
