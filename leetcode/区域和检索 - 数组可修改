给定一个整数数组  nums，求出数组从索引 i 到 j  (i ≤ j) 范围内元素的总和，包含 i,  j 两点。

update(i, val) 函数可以通过将下标为 i 的数值更新为 val，从而对数列进行修改。

示例:

Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8



用线段树：https://blog.csdn.net/Yaokai_AssultMaster/article/details/79599809


class NumArray(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.n=len(nums)
        self.segmentTree=[0]*self.n+nums
        for i in xrange(self.n-1,0,-1):
            self.segmentTree[i]=self.segmentTree[i<<1]+self.segmentTree[(i<<1)+1]
        
        
    def update(self, i, val):
        """
        :type i: int
        :type val: int
        :rtype: void
        """
        idx=i+self.n
        self.segmentTree[idx]=val
        while idx:
            idx>>=1
            self.segmentTree[idx]=self.segmentTree[idx<<1]+self.segmentTree[(idx<<1)+1]
        
        
    def sumRange(self, i, j):
        """
        :type i: int
        :type j: int
        :rtype: int
        """
        l,r=i+self.n,j+self.n
        result=0
        
        while l<=r:
            if l&1:
                result+=self.segmentTree[l]
                l+=1
                
            if (r&1)==0:
                result+=self.segmentTree[r]
                r-=1
            
            l>>=1
            r>>=1
        
        return result
        
        
        
        
        

class NumArray {
    List<Integer> segmentTree;
    int n;
    
    public NumArray(int[] nums) {
        n=nums.length;
        segmentTree=new ArrayList<>(n<<1);
        int i;
        for(i=0;i<n;++i){
            segmentTree.add(0);
        }
        for(i=0;i<n;++i){
            segmentTree.add(nums[i]);
        }
        for(i=n-1;i>0;--i){
            segmentTree.set(i,segmentTree.get(i<<1)+segmentTree.get((i<<1)+1));
        }
    }
    
    public void update(int i, int val) {
        int idx=i+n;
        segmentTree.set(idx,val);
        
        while(idx!=0){
            idx>>=1;
            segmentTree.set(idx,segmentTree.get(idx<<1)+segmentTree.get((idx<<1)+1));
        }
    }
    
    public int sumRange(int i, int j) {
        int l=i+n,r=j+n;
        int result=0;
            
        while(l<=r){
            if((l&1)==1){
                result+=segmentTree.get(l++);
            }
            if((r&1)==0){
                result+=segmentTree.get(r--);
            }
            l>>=1;
            r>>=1;
        }
        return result;
    }
}
