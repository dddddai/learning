给出 graph 为有 N 个节点（编号为 0, 1, 2, ..., N-1）的无向连通图。 

graph.length = N，且只有节点 i 和 j 连通时，j != i 在列表 graph[i] 中恰好出现一次。

返回能够访问所有节点的最短路径的长度。你可以在任一节点开始和停止，也可以多次重访节点，并且可以重用边。

 

示例 1：

输入：[[1,2,3],[0],[0],[0]]
输出：4
解释：一个可能的路径为 [1,0,2,0,3]
示例 2：

输入：[[1],[0,2,4],[1,3,4],[2],[1,2]]
输出：4
解释：一个可能的路径为 [0,1,4,2,3]
 

提示：

1 <= graph.length <= 12
0 <= graph[i].length < graph.length




class Solution {
    public int shortestPathLength(int[][] graph) {
        int n=graph.length;
        int end=(1<<n)-1;
        boolean[][] visited=new boolean[n][1<<n];
        Queue<int[]> q=new LinkedList<>();
        for(int i=0;i<n;++i){
            q.offer(new int[]{i,1<<i});
        }
        int result=0;
        while(!q.isEmpty()){
            int k=q.size();
            while(k-->0){
                int[] a=q.poll();
                if(a[1]==end){
                    return result;
                }
                for(int next:graph[a[0]]){
                    int flag=a[1] | (1<<next);
                    if(!visited[next][flag]){
                        visited[next][flag]=true;
                        q.offer(new int[]{next,flag});
                    }
                }
            }
            ++result;
        }
        return result;
    }
}
