给定一个字符串 S 和一个字符串 T，计算在 S 的子序列中 T 出现的个数。

一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，"ACE" 是 "ABCDE" 的一个子序列，而 "AEC" 不是）

示例 1:

输入: S = "rabbbit", T = "rabbit"
输出: 3
解释:

如下图所示, 有 3 种可以从 S 中得到 "rabbit" 的方案。
(上箭头符号 ^ 表示选取的字母)

rabbbit
^^^^ ^^
rabbbit
^^ ^^^^
rabbbit
^^^ ^^^


思路：动态规划，创建一个二维数组dp，dp[i][j]表示t的前j个字符有几次出现在s的前i个字符的子序列中，
如果s[i-1]!=t[j-1]，则只能用s的前i-1个字符去匹配t的前j个字符
即dp[i][j]=dp[i-1][j]

否则，除了可以用s的前i-1个字符去匹配t的前j个字符之外，还可以用s的前i-1个字符去匹配t的前j-1个字符，然后t的第j个字符用s的第i个字符来匹配
即dp[i][j]=dp[i-1][j]+dp[i-1][j-1]



class Solution(object):
    def numDistinct(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: int
        """
        dp=[0]*(len(t)+1)
        dp[0]=1
        
        for i in xrange(1,len(s)+1):
            for j in xrange(len(t),0,-1):  #从后往前遍历，正好可以使dp[j-1]为左上角，充分利用空间
                if s[i-1]==t[j-1]:
                    dp[j]+=dp[j-1]
                    
        return dp[-1]
        
        
        
        
class Solution {
    public int numDistinct(String s, String t) {
        int[] dp=new int[t.length()+1];
        dp[0]=1;
        for(int i=1;i<=s.length();++i){
            for(int j=t.length();j>0;--j){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    dp[j]+=dp[j-1];
                }
            }
        }
        return dp[t.length()];
    }
}        
