给你两个整数数组 source 和 target ，长度都是 n 。还有一个数组 allowedSwaps ，
其中每个 allowedSwaps[i] = [ai, bi] 表示你可以交换数组 source 中下标为 ai 和 bi（下标从 0 开始）的两个元素。
注意，你可以按 任意 顺序 多次 交换一对特定下标指向的元素。

相同长度的两个数组 source 和 target 间的 汉明距离 是元素不同的下标数量。
形式上，其值等于满足 source[i] != target[i] （下标从 0 开始）的下标 i（0 <= i <= n-1）的数量。

在对数组 source 执行 任意 数量的交换操作后，返回source 和 target 间的 最小汉明距离 。


示例 1：
输入：source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]
输出：1
解释：source 可以按下述方式转换：
- 交换下标 0 和 1 指向的元素：source = [2,1,3,4]
- 交换下标 2 和 3 指向的元素：source = [2,1,4,3]
source 和 target 间的汉明距离是 1 ，二者有 1 处元素不同，在下标 3 。

示例 2：
输入：source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []
输出：2
解释：不能对 source 执行交换操作。
source 和 target 间的汉明距离是 2 ，二者有 2 处元素不同，在下标 1 和下标 2 。

示例 3：
输入：source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]
输出：0



class Solution {
    private int[] parent;

    public int minimumHammingDistance(int[] source, int[] target, int[][] allowedSwaps) {
        int n=source.length;
        parent=new int[n];
        Map<Integer,Map<Integer,Integer>> map=new HashMap<>((int)(n/0.75)+1);
        for(int i=0;i<n;++i){
            parent[i]=i;
            map.put(i,new HashMap<>());
        }
        for(int[] s:allowedSwaps){
            parent[getRoot(s[1])]=getRoot(s[0]);
        }
        for(int i=0;i<n;++i){
            Map<Integer,Integer> m=map.get(getRoot(i));
            m.put(source[i],m.getOrDefault(source[i],0)+1);
        }
        int result=0;
        for(int i=0;i<n;++i){
            int root=getRoot(i);
            Map<Integer,Integer> m=map.get(root);
            int x=m.getOrDefault(target[i],0);
            if(x==0){
                ++result;
            }else{
                m.put(target[i],x-1);
            }
        }
        return result;
    }

    private int getRoot(int idx){
        while(idx!=parent[idx]){
            idx=parent[idx]=parent[parent[idx]];
        }
        return idx;
    }
}



var parent []int

func minimumHammingDistance(source []int, target []int, allowedSwaps [][]int) int {
    n:=len(source)
    parent=make([]int,n)
    m:=make(map[int]map[int]int,n)
    for i:=0;i<n;i++ {
        parent[i]=i
        m[i]=make(map[int]int,8)
    }
    for _,s:=range allowedSwaps {
        parent[getRoot(s[1])]=getRoot(s[0])
    }
    for i,num:=range source {
        m[getRoot(i)][num]++
    }
    result:=0
    for i,num:=range target {
        if m[getRoot(i)][num]==0 {
            result++
        }else{
            m[getRoot(i)][num]--
        }
    }
    return result
}

func getRoot(idx int) int {
    for idx!=parent[idx] {
        parent[idx]=parent[parent[idx]]
        idx=parent[idx]
    }
    return idx
}
