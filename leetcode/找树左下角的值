给定一个二叉树，在树的最后一行找到最左边的值。

示例 1:

输入:

    2
   / \
  1   3

输出:
1
 

示例 2:

输入:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

输出:
7
 

注意: 您可以假设树（即给定的根节点）不为 NULL。





class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(root);
        while(true){
            int cnt=queue.size();
            TreeNode leftmost=queue.poll();
            if(leftmost.left!=null){
                queue.offer(leftmost.left);
            }
            if(leftmost.right!=null){
                queue.offer(leftmost.right);
            }
            for(int i=1;i<cnt;++i){
                TreeNode node=queue.poll();
                if(node.left!=null){
                    queue.offer(node.left);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                }
            }
            if(queue.isEmpty()){
                return leftmost.val;
            }
        }
    }
}
