给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2)。

上图子矩阵左上角 (row1, col1) = (2, 1) ，右下角(row2, col2) = (4, 3)，该子矩形内元素的总和为 8。

示例:

给定 matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12



class NumMatrix {

    private int[][] dp;

    public NumMatrix(int[][] matrix) {
        if(matrix.length==0){
            return;
        }
        int n=matrix.length,m=matrix[0].length;
        dp=new int[n+1][m+1];
        for(int i=1;i<=n;++i){
            for(int j=1;j<=m;++j){
                dp[i][j]=matrix[i-1][j-1]+dp[i-1][j]+dp[i][j-1]-dp[i-1][j-1];
            }
        }
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        return dp[row2+1][col2+1]-dp[row2+1][col1]-dp[row1][col2+1]+dp[row1][col1];
    }
}




type NumMatrix [][]int

func Constructor(matrix [][]int) NumMatrix {
    if len(matrix)==0 {
        return nil
    }
    n,m:=len(matrix),len(matrix[0])
    dp:=make([][]int,n+1)
    dp[0]=make([]int,m+1)
    for i:=1;i<=n;i++ {
        dp[i]=make([]int,m+1)
        for j:=1;j<=m;j++ {
            dp[i][j]=matrix[i-1][j-1]+dp[i][j-1]+dp[i-1][j]-dp[i-1][j-1]
        }
    }
    return dp
}


func (this NumMatrix) SumRegion(row1 int, col1 int, row2 int, col2 int) int {
    return this[row2+1][col2+1]-this[row2+1][col1]-this[row1][col2+1]+this[row1][col1]
}
