一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？

输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右

dp：

class Solution(object):
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        matrix=[[1 for i in xrange(n)] for j in xrange(m)]
        for i in xrange(1,m):
            for j in xrange(1,n):
                matrix[i][j]=matrix[i][j-1]+matrix[i-1][j]
        return matrix[m-1][n-1]


实际上只需要一维数组就够了，能节省空间

class Solution(object):
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        if m<n:
            return self.uniquePaths(n,m)
        
        dp=[1]*n
        for i in xrange(1,m):
            for j in xrange(1,n):
                dp[j]+=dp[j-1]
        
        return dp[-1]



数学解法：

class Solution(object):
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        #高中数学题，从m+n-2步中选m-1步
        result=1
        start=max(m,n)
        for i in xrange(start,m+n-1):
            result*=i
            result//=i-start+1
                
        return result
        
        
class Solution {
    public int uniquePaths(int m, int n) {
        long result=1;
        //不用long会正溢出
        int start=Math.max(m,n);
        for(int i=start;i<=m+n-2;++i)
        {
            result*=i;
            result/=(i-start+1);
        }
        return (int)result;
    }
}
