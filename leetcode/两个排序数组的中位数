示例 1:

nums1 = [1, 3]
nums2 = [2]

中位数是 2.0

python:

class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        size1,size2=len(nums1),len(nums2)
        if size1>size2:
            return self.findMedianSortedArrays(nums2,nums1)
        l1=l2=r1=r2=0
        low,high=0,size1*2

        while low<=high:
            c1=(low+high)//2
            c2=size1+size2-c1
            l1=float('-inf') if c1==0 else nums1[(c1-1)>>1]
            r1=float('inf') if c1==size1*2 else nums1[c1>>1]
            l2=float('-inf') if c2==0 else nums2[(c2-1)>>1]
            r2=float('inf') if c2==size2*2 else nums2[c2>>1]
            if l1>r2:
                high=c1
            elif l2>r1:
                low=c1+1
            else:
                break
        return (max(l1,l2)+min(r1,r2))/2.





java:

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int size1 = nums1.length;
        int size2 = nums2.length;

        if (size1 > size2) {
            return findMedianSortedArrays(nums2, nums1);
        }

        int l1 = 0;
        int l2 = 0;
        int r1 = 0;
        int r2 = 0;
        int low = 0;
        int high = size1 << 1;

        while (low <= high) {
            int c1 = (low + high) >> 1;
            int c2 = size1 + size2 - c1;
            l1 = (c1 > 0) ? nums1[(c1 - 1) >> 1] : Integer.MIN_VALUE;
            r1 = (c1 < (size1 * 2)) ? nums1[c1 >> 1] : Integer.MAX_VALUE;
            l2 = (c2 > 0) ? nums2[(c2 - 1) >> 1] : Integer.MIN_VALUE;
            r2 = (c2 < (size2 * 2)) ? nums2[c2 >> 1] : Integer.MAX_VALUE;

            if (l1 > r2) {
                high = c1-1;
            } else if (l2 > r1) {
                low = c1 + 1;
            } else {
                break;
            }
        }

        return (Math.max(l1, l2) + Math.min(r1, r2)) / 2.;
    }
}
