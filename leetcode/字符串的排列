给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排列。

换句话说，第一个字符串的排列之一是第二个字符串的子串。

示例1:

输入: s1 = "ab" s2 = "eidbaooo"
输出: True
解释: s2 包含 s1 的排列之一 ("ba").
 

示例2:

输入: s1= "ab" s2 = "eidboaoo"
输出: False


class Solution(object):
    def checkInclusion(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        size1,size2=len(s1),len(s2)
        if size1>size2:
            return False
        
        map1,map2=[0]*26,[0]*26
        for i in xrange(size1):
            map1[ord(s1[i])-97]+=1
            map2[ord(s2[i])-97]+=1
        if map1==map2:
            return True
            
        for i in xrange(size1,size2):
            map2[ord(s2[i])-97]+=1
            map2[ord(s2[i-size1])-97]-=1
            if map1==map2:
                return True
        return False
        
java:

import java.util.Arrays;

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length()>s2.length())
            return false;
        int[] map1=new int[26],map2=new int[26];
        for(int i=0;i<s1.length();i++)
        {
            map1[s1.charAt(i)-'a']++;
            map2[s2.charAt(i)-'a']++;
        }
        if(Arrays.equals(map1,map2))
            return true;
        for(int i=s1.length();i<s2.length();i++)
        {
            map2[s2.charAt(i)-'a']++;
            map2[s2.charAt(i-s1.length())-'a']--;
            if(Arrays.equals(map1,map2))
                return true;
        }
        return false;
    }
}
