设计并实现最不经常使用（LFU）缓存的数据结构。它应该支持以下操作：get 和 put。

get(key) - 如果键存在于缓存中，则获取键的值（总是正数），否则返回 -1。
put(key, value) - 如果键不存在，请设置或插入值。当缓存达到其容量时，它应该在插入新项目之前，使最不经常使用的项目无效。
在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，最近最少使用的键将被去除。

进阶：
你是否可以在 O(1) 时间复杂度内执行两项操作？

示例：

LFUCache cache = new LFUCache( 2 /* capacity (缓存容量) */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回 1
cache.put(3, 3);    // 去除 key 2
cache.get(2);       // 返回 -1 (未找到key 2)
cache.get(3);       // 返回 3
cache.put(4, 4);    // 去除 key 1
cache.get(1);       // 返回 -1 (未找到 key 1)
cache.get(3);       // 返回 3
cache.get(4);       // 返回 4



class LFUCache {
    private int capacity;
    private Map<Integer,Integer> valueMap;
    private Map<Integer,Integer> freqMap;
    private Map<Integer,LinkedHashSet<Integer>> listMap;
    private int minFreq;
    
    public LFUCache(int capacity) {
        this.capacity=capacity;
        valueMap=new HashMap<>(capacity);
        freqMap=new HashMap<>(capacity);
        listMap=new HashMap<>();
        listMap.put(1,new LinkedHashSet<>());
    }
    
    public int get(int key) {
        Integer val=valueMap.get(key);
        if(val==null){
            return -1;
        }
        int freq=freqMap.get(key);
        freqMap.put(key,freq+1);
        LinkedHashSet<Integer> list=listMap.get(freq);
        list.remove(key);
        if(freq==minFreq && list.isEmpty()){
            ++minFreq;
        }
        list=listMap.get(freq+1);
        if(list==null){
            list=new LinkedHashSet<>();
            list.add(key);
            listMap.put(freq+1,list);
        }else{
            list.add(key);
        }
        return val;
    }
    
    public void put(int key, int value) {
        if(capacity<=0){
            return;
        }
        if(valueMap.containsKey(key)){
            valueMap.put(key,value);
            int freq=freqMap.get(key);
            freqMap.put(key,freq+1);
            LinkedHashSet<Integer> list=listMap.get(freq);
            list.remove(key);
            if(freq==minFreq && list.isEmpty()){
                ++minFreq;
            }
            list=listMap.get(freq+1);
            if(list==null){
                list=new LinkedHashSet<>();
                list.add(key);
                listMap.put(freq+1,list);
            }else{
                list.add(key);
            }
        }else{
            if(valueMap.size()==capacity){
                LinkedHashSet<Integer> list=listMap.get(minFreq);
                int keyToBeRemoved=list.iterator().next();
                list.remove(keyToBeRemoved);
                valueMap.remove(keyToBeRemoved);
                freqMap.remove(keyToBeRemoved);
            }
            valueMap.put(key,value);
            freqMap.put(key,1);
            listMap.get(1).add(key);
            minFreq=1;
        }
    }
}
