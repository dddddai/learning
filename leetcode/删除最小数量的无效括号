删除最小数量的无效括号，使得输入的字符串有效，返回所有可能的结果。

说明: 输入可能包含了除 ( 和 ) 以外的字符。

示例 1:

输入: "()())()"
输出: ["()()()", "(())()"]
示例 2:

输入: "(a)())()"
输出: ["(a)()()", "(a())()"]
示例 3:

输入: ")("
输出: [""]

class Solution(object):
    brackets = {'(', ')'}

    def func(self, s, symbol, last_i, last_j):
        cnt = 0
        for i in xrange(last_i, len(s)):
            if s[i] in self.brackets:
                if s[i] == symbol:
                    cnt += 1
                else:
                    cnt -= 1
            if cnt <= 0:
                continue
            for j in xrange(last_j, i + 1):
                if s[j] == symbol and (j == last_j or s[j - 1] != symbol):
                    self.func(s[:j] + s[j + 1:], symbol, i, j)
            return

        s = s[::-1]
        if symbol == ')':
            return self.func(s, '(', 0, 0)
        self.result.append(s)

    def removeInvalidParentheses(self, s):
        """
        :type s: str
        :rtype: List[str]
        """
        self.result = []
        self.func(s, ')', 0, 0)
        return self.result
        
        
        
        
class Solution {
    List<String> result=new ArrayList<>();
    
    void func(String s,char symbol,int last_i,int last_j)
    {
        for(int i=last_i,cnt=0;i<s.length();++i)
        {
            if(s.charAt(i)=='(' || s.charAt(i)==')')
            {
                if(s.charAt(i)==symbol)
                    ++cnt;
                else
                    --cnt;
            }
            if(cnt<=0)
                continue;
            for(int j=last_j;j<=i;++j)
                if(s.charAt(j)==symbol && (j==last_j || s.charAt(j-1)!=symbol))
                    func(s.substring(0,j)+s.substring(j+1),symbol,i,j);
            return;
        }
        s=new StringBuilder(s).reverse().toString();
        if(symbol==')')
            func(s,'(',0,0);
        else
            result.add(s);
    }
    public List<String> removeInvalidParentheses(String s) {
        func(s,')',0,0);
        return result;
    }
} 
