给定一个不含重复单词的列表，编写一个程序，返回给定单词列表中所有的连接词。

连接词的定义为：一个字符串完全是由至少两个给定数组中的单词组成的。

示例:

输入: ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]

输出: ["catsdogcats","dogcatsdog","ratcatdogcat"]

解释: "catsdogcats"由"cats", "dog" 和 "cats"组成; 
     "dogcatsdog"由"dog", "cats"和"dog"组成; 
     "ratcatdogcat"由"rat", "cat", "dog"和"cat"组成。
     
  
说明:
给定数组的元素总数不超过 10000。
给定数组中元素的长度总和不超过 600000。
所有输入字符串只包含小写字母。
不需要考虑答案输出的顺序。




class Solution {
    List<String> result=new LinkedList<>();
    
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        Trie root=new Trie();
        for(String s:words){
            if(s.length()>0){
                add(root,s);
            }
        }
        for(String s:words){
            if(dfs(root,s,0,false)){
                result.add(s);
            }
        }
        return result;
    }
    
    private boolean dfs(Trie root,String s,int start,boolean flag){
        Trie cur=root;
        for(int i=start;i<s.length();++i){
            Trie next=cur.children[s.charAt(i)-'a'];
            if(next==null){
                return false;
            }
            if(next.end && dfs(root,s,i+1,true)){
                return true;
            }
            cur=next;
        }
        return cur.end && flag;
    }
    
    private void add(Trie root,String s){
        Trie cur=root;
        for(int i=0;i<s.length();++i){
            int idx=s.charAt(i)-'a';
            if(cur.children[idx]==null){
                cur.children[idx]=new Trie();
            }
            cur=cur.children[idx];
        }
        cur.end=true;
    }
    
    private class Trie{
        Trie[] children=new Trie[26];
        boolean end=false;
    }
}
