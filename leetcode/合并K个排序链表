示例:

输入:
[
  1->4->5,
  1->3->4,
  2->6
]
输出: 1->1->2->3->4->4->5->6


class Solution(object):
    def perc_down(self,arr,start,end):
            root=start
            while 1:
                child=(root<<1)+1
                if child>end:
                    break
                if child+1<=end and arr[child].val>arr[child+1].val:
                    child+=1
                if arr[child].val<arr[root].val:
                    arr[child],arr[root]=arr[root],arr[child]
                    root=child
                else:
                    break
                    
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        lists=filter(lambda x:x,lists)
        if not lists:
            return
        size=len(lists)
        int_max=2**31-1

                    
        for i in range((size-2)>>1,-1,-1):
            self.perc_down(lists,i,size-1)
            
        head=p=ListNode(0)
        
        while lists[0].val!=int_max:
            p.next=ListNode(lists[0].val)
            p=p.next
            lists[0]=lists[0].next if lists[0].next else ListNode(int_max)
            self.perc_down(lists,0,size-1)
            
        return head.next
