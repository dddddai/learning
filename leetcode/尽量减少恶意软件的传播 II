在节点网络中，只有当 graph[i][j] = 1 时，每个节点 i 能够直接连接到另一个节点 j。

一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。
这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。

假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。

我们可以从初始列表中删除一个节点，并完全移除该节点以及从该节点到任何其他节点的任何连接。
如果移除这一节点将最小化 M(initial)， 则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。


示例 1：

输出：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
输入：0


示例 2：

输入：graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
输出：1


示例 3：

输入：graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
输出：1



如果一个点能够被initial列表中多个点经过不同的路径感染，则该点一定会被感染。

一个点的感染路径可能包括多个initial点（删除最近的initial点才能防止感染）
这种情况通过 visited数组 截断，只计算最近的那个initial点



class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int[] root=new int[graph.length];
        Arrays.fill(root,-1);
        for(int x:initial){
            boolean[] visited=new boolean[graph.length];
            for(int i:initial){
                visited[i]=true;
            }
            Queue<Integer> q=new LinkedList<>();
            q.offer(x);
            while(!q.isEmpty()){
                int i=q.poll();
                for(int j=0;j<graph.length;++j){
                    if(graph[i][j]==1 && !visited[j]){
                        q.offer(j);
                        if(root[j]==-1){
                            root[j]=x;
                        }else{
                            root[j]=-2;
                        }
                        visited[j]=true;
                    }
                }
            }
        }
        int[] cnt=new int[graph.length];
        int result=initial[0];
        for(int idx:root){
            if(idx>=0){
                ++cnt[idx];
            }
        }
        for(int i:initial){
            if(cnt[i]>cnt[result] || (cnt[i]==cnt[result] && i<result)){
                result=i;
            }
        }
        return result;
    }
}
