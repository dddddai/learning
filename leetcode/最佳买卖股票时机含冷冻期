给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
示例:

输入: [1,2,3,0,2]
输出: 3 
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]




class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length==0){
            return 0;
        }
        int[] buy=new int[2];
        int[] sell=new int[2];
        int[] cool=new int[2];
        buy[0]=-prices[0];
        int idx=0;
        for(int i=1;i<prices.length;++i){
            buy[idx^1]=Math.max(cool[idx]-prices[i],buy[idx]);
            sell[idx^1]=Math.max(buy[idx]+prices[i],sell[idx]);
            cool[idx^1]=Math.max(sell[idx],cool[idx]);
            idx^=1;
        }
        return Math.max(sell[idx],cool[idx]);
    }
}
