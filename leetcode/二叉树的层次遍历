class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        from Queue import Queue
        
        if root is None:
            return []
        result=[]
        q=Queue()
        q.put(root)
        
        while not q.empty():
            level=[]
            for _ in xrange(q.qsize()):
                node=q.get()
                level.append(node.val)
                if node.left:
                    q.put(node.left)
                if node.right:
                    q.put(node.right)
            result.append(level)
            
        return result
        
        

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(root);
        List<List<Integer>> result=new ArrayList<>();
        
        if(root==null)
            return result;
        
        while(!queue.isEmpty())
        {
            List<Integer> level=new ArrayList<>();
            int cnt=queue.size();
            for(int i=0;i<cnt;++i)
            {
                TreeNode node=queue.poll();
                level.add(node.val);
                if(node.left!=null)
                    queue.offer(node.left);
                if(node.right!=null)
                    queue.offer(node.right);
            }
            result.add(level);   
        }
        return result;
    }
}
