给定一个 n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。
请注意，它是排序后的第k小元素，而不是第k个元素。

示例:

matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,

返回 13。

class Solution(object):
    def kthSmallest(self, matrix, k):
        """
        :type matrix: List[List[int]]
        :type k: int
        :rtype: int
        """
        self.m,self.n=len(matrix),len(matrix[0])
        
        def func(matrix,num):
            cnt=j=0
            i=self.m-1
            while i>=0 and j<self.n:
                if matrix[i][j]<=num:
                    cnt+=i+1
                    j+=1
                else:
                    i-=1
            return cnt
        
        low,high=matrix[0][0],matrix[-1][-1]
        while low<high:
            mid=(low+high)>>1
            cnt=func(matrix,mid)
            if cnt>=k:
                high=mid
            else:
                low=mid+1
        return low


class Solution {
    int func(int[][] matrix,int m,int n,int num)
    {
        int cnt=0,i=m-1,j=0;
        while(i>=0 && j<n)
        {
            if(matrix[i][j]<=num)
            {
                cnt+=i+1;
                ++j;
            }
            else
                --i;
        }
        return cnt;
    }
    
    public int kthSmallest(int[][] matrix, int k) {
        int m=matrix.length,n=matrix[0].length;
        int low=matrix[0][0],high=matrix[m-1][n-1];
        while(low<high)
        {
            int mid=(low+high)>>1;
            if(func(matrix,m,n,mid)>=k)
                high=mid;
            else
                low=mid+1;
        }
        return low;
    }
}
