给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。


示例 1：

输入：k = 2, prices = [2,4,1]
输出：2
解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 


示例 2：

输入：k = 2, prices = [3,2,6,5,0,3]
输出：7
解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 




class Solution {
    public int maxProfit(int k, int[] prices) {
        if(k==0){
            return 0;
        }
        if(k*2>=prices.length){
            int profit=0;
            for(int i=1;i<prices.length;++i){
                if(prices[i]>prices[i-1]){
                    profit+=prices[i]-prices[i-1];
                }
            }
            return profit;
        }
        int[][] dp=new int[k][2];
        for(int i=0;i<k;++i){
            dp[i][0]=Integer.MIN_VALUE;
        }
        for(int p:prices){
            dp[0][0]=Math.max(dp[0][0],-p);
            dp[0][1]=Math.max(dp[0][1],dp[0][0]+p);
            for(int i=1;i<k;++i){
                dp[i][0]=Math.max(dp[i][0],dp[i-1][1]-p);
                dp[i][1]=Math.max(dp[i][1],dp[i][0]+p);
            }
        }
        return dp[k-1][1];
    }
}



func maxProfit(k int, prices []int) int {
    if k==0 {
        return 0
    }
    if k*2>=len(prices) {
        profit:=0
        for i:=1;i<len(prices);i++ {
            if prices[i]>prices[i-1] {
                profit+=prices[i]-prices[i-1]
            }
        }
        return profit
    }
    dp:=make([][2]int,k)
    for i:=0;i<k;i++ {
        dp[i][0]=math.MinInt64
    }
    for _,p:=range prices {
        dp[0][0]=max(dp[0][0],-p)
        dp[0][1]=max(dp[0][1],dp[0][0]+p)
        for i:=1;i<k;i++ {
            dp[i][0]=max(dp[i][0],dp[i-1][1]-p)
            dp[i][1]=max(dp[i][1],dp[i][0]+p)
        }
    }
    return dp[k-1][1]
}

func max(a,b int) int {
    if a>b {
        return a
    }
    return b
}
