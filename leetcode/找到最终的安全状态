在有向图中, 我们从某个节点和每个转向处开始, 沿着图的有向边走。 
如果我们到达的节点是终点 (即它没有连出的有向边), 我们停止。

现在, 如果我们最后能走到终点，那么我们的起始节点是最终安全的。 
更具体地说, 存在一个自然数 K,  无论选择往哪里走, 我们走了不到 K 步后必能停止在一个终点。

哪些节点最终是安全的？ 结果返回一个有序的数组。

该有向图有 N 个节点，标签为 0, 1, ..., N-1, 其中 N 是 graph 的节点数. 
图以以下的形式给出: graph[i] 是节点 j 的一个列表，满足 (i, j) 是图的一条有向边。

示例：
输入：graph = [[1,2],[2,3],[5],[0],[5],[],[]]
输出：[2,4,5,6]



class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n=graph.length;
        List<List<Integer>> map=new ArrayList<>(n);
        int[] degree=new int[n];
        List<Integer> result=new ArrayList<>(n);
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<n;++i){
            map.add(new LinkedList<>());
        }
        for(int i=0;i<n;++i){
            for(int j:graph[i]){
                map.get(j).add(i);
            }
            degree[i]=graph[i].length;
            if(graph[i].length==0){
                q.offer(i);
                result.add(i);
            }
        }
        while(!q.isEmpty()){
            int i=q.poll();
            for(int j:map.get(i)){
                if(--degree[j]==0){
                    q.offer(j);
                    result.add(j);
                }
            }
        }
        Collections.sort(result);
        return result;
    }
}
