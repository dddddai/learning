给定一个整型数组, 你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。

示例:

输入: [4, 6, 7, 7]
输出: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]

说明:

给定数组的长度不会超过15。
数组中的整数范围是 [-100,100]。
给定数组中可能包含重复数字，相等的数字应该被视为递增的一种情况。




class Solution {

    List<Integer> tmp;
    List<List<Integer>> result=new LinkedList<>();

    public List<List<Integer>> findSubsequences(int[] nums) {
        tmp=new ArrayList<>(nums.length);
        dfs(nums,0,Integer.MIN_VALUE);
        return result;
    }

    private void dfs(int[] nums,int idx,int last){
        if(idx==nums.length){
            if(tmp.size()>1){
                result.add(new ArrayList<>(tmp));
            }
            return;
        }
        if(nums[idx]>=last){
            tmp.add(nums[idx]);
            dfs(nums,idx+1,nums[idx]);
            tmp.remove(tmp.size()-1);
        }
        if(nums[idx]!=last){
            dfs(nums,idx+1,last);
        }
    }
}
