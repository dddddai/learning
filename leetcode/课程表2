现在你总共有 n 门课需要选，记为 0 到 n-1。

在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]

给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。

可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。

示例 1:

输入: 2, [[1,0]] 
输出: [0,1]
解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。
示例 2:

输入: 4, [[1,0],[2,0],[3,1],[3,2]]
输出: [0,1,2,3] or [0,2,1,3]
解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。
     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。
说明:

输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。
你可以假定输入的先决条件中没有重复的边。
提示:

这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。
通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。
拓扑排序也可以通过 BFS 完成。




class Node(object):
    def __init__(self, val):
        self.val = val
        self.next = None

    def add(self, node):
        node.next = self.next
        self.next = node


class Solution(object):
    def findOrder(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: List[int]
        """
        graph = [Node(i) for i in xrange(numCourses)]
        degree = [0] * numCourses
        for seq in prerequisites:
            graph[seq[1]].add(Node(seq[0]))
            degree[seq[0]] += 1

        result = []
        while graph:
            i = 0
            flag = True  #表示没有入度为0的节点
            while i < len(graph):
                course = graph[i]
                if degree[course.val] == 0:
                    result.append(course.val)
                    p = course.next
                    while p:
                        degree[p.val] -= 1
                        p = p.next
                    graph[i] = graph[-1]
                    graph.pop()
                    flag = False
                else:
                    i += 1
            if flag:
                return []
        return result
        
        
        
        
        
class Node{
    public int val;
    public Node next;
    
    public Node(int val){
        this.val=val;
        this.next=null;
    }
    public void add(Node node){
        node.next=this.next;
        this.next=node;
    }
}

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] degree=new int[numCourses];
        List<Node> graph=new ArrayList<>(numCourses);
        for(int i=0;i<numCourses;++i){
            graph.add(new Node(i));
        }
        for(int[] seq:prerequisites){
            graph.get(seq[1]).add(new Node(seq[0]));
            ++degree[seq[0]];
        }
        int[] result=new int[numCourses];
        int idx=0;
        while(!graph.isEmpty()){
            boolean flag=true;          //表示没有入度为0的节点
            for(int i=0;i<graph.size();){
                Node course=graph.get(i);
                if(degree[course.val]==0){
                    result[idx++]=course.val;
                    for(Node p=course.next;p!=null;p=p.next){
                        --degree[p.val];
                    }
                    graph.set(i,graph.get(graph.size()-1));
                    graph.remove(graph.size()-1);
                    flag=false;
                }else{
                    ++i;
                }
            }
            if(flag){
                return new int[0];
            }
        }
        return result;
    }
}        
