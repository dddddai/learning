给出一个由无重复的正整数组成的集合，找出其中最大的整除子集，
子集中任意一对 (Si，Sj) 都要满足：Si % Sj = 0 或 Sj % Si = 0。

如果有多个目标子集，返回其中任何一个均可。

示例 1:

输入: [1,2,3]
输出: [1,2] (当然, [1,3] 也正确)


示例 2:

输入: [1,2,4,8]
输出: [1,2,4,8]



class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n=nums.length;
        if(n==0){
            return new ArrayList<>(0);
        }
        Arrays.sort(nums);
        int[] dp=new int[n];
        int k=0;
        for(int i=0;i<n;++i){
            dp[i]=1;
            for(int j=0;nums[j]*2L<=nums[i];++j){
                if(nums[i]%nums[j]==0){
                    dp[i]=Math.max(dp[i],dp[j]+1);
                }
            }
            if(dp[i]>dp[k]){
                k=i;
            }
        }
        int len=dp[k];
        List<Integer> result=new ArrayList<>(len);
        for(int i=k;len>0;--i){
            if(nums[k]%nums[i]==0 && dp[i]==len){
                result.add(nums[i]);
                k=i;
                --len;
            }
        }
        return result;
    }
}



func largestDivisibleSubset(nums []int) []int {
    n:=len(nums)
    if n==0 {
        return make([]int,0)
    }
    sort.Ints(nums)
    dp:=make([]int,n)
    k:=0
    for i,t:=range nums{
        dp[i]=1
        for j:=0;nums[j]*2<=t;j++ {
            if t%nums[j]==0 && dp[j]+1>dp[i] {
                dp[i]=dp[j]+1
            }
        }
        if dp[i]>dp[k] {
            k=i
        }
    }
    len:=dp[k]
    result:=make([]int,0,len)
    for i:=k;len>0;i-- {
        if nums[k]%nums[i]==0 && dp[i]==len {
            result=append(result,nums[i])
            k=i
            len--
        }
    }
    return result
}
