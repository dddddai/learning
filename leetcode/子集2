给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。

说明：解集不能包含重复的子集。

示例:

输入: [1,2,2]
输出:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]


class Solution(object):
    def func(self,path,nums,start):
        for i in xrange(start,len(nums)):
            if i!=start and nums[i]==nums[i-1]:
                continue
            path.append(nums[i])
            self.result.append(path[:])
            #一定要加入path的copy，java也是，我还不懂为什么
            self.func(path,nums,i+1)
            path.pop()
            
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        self.result=[[]]
        nums.sort()
        self.func([],nums,0)
        return self.result


class Solution {
    List<List<Integer>> result=new ArrayList<>();
    
    void func(List<Integer> path,int[] nums,int start)
    {
        for(int i=start;i<nums.length;++i)
        {
            if(i!=start && nums[i]==nums[i-1])
                continue;
            path.add(nums[i]);
            result.add(new ArrayList<>(path));
            func(path,nums,i+1);
            path.remove(path.size()-1);
        }
    }
    
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        result.add(new ArrayList<>());
        Arrays.sort(nums);
        func(new ArrayList<Integer>(),nums,0);
        return result;
    }
}
