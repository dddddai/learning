给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :

输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。
说明 :

数组的长度为 [1, 20,000]。
数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。



任意一个连续子数组arr[i:j]都可以分解为arr[:j]除去前面的arr[:i]
因此，可以遍历该数组，用哈希表记录从0开始到j的子数组arr[:j]的和curSum出现的次数，
如果curSum-k在哈希表中，说明每有一个和为curSum-k的对应的子数组arr[:i]，就存在一个和为k的子数组arr[i:j]


class Solution(object):
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        curSum=cnt=0
        visited={0:1}
        
        for n in nums:
            curSum+=n
            if curSum-k in visited:
                cnt+=visited[curSum-k]
                
            visited[curSum]=visited.get(curSum,0)+1
        
        return cnt
        
        
        
        
class Solution {
    public int subarraySum(int[] nums, int k) {
        int curSum=0,cnt=0;
        Map<Integer,Integer> map=new HashMap<>();
        map.put(0,1);
        
        for(int n:nums){
            curSum+=n;
            if(map.containsKey(curSum-k)){
                cnt+=map.get(curSum-k);
            }
            map.put(curSum,map.getOrDefault(curSum,0)+1);
        }
        return cnt;
    }
}        
