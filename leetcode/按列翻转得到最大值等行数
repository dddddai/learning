给定由若干 0 和 1 组成的矩阵 matrix，从中选出任意数量的列并翻转其上的 每个 单元格。
翻转后，单元格的值从 0 变成 1，或者从 1 变为 0 。

返回经过一些翻转后，行上所有值都相等的最大行数。


示例 1：
输入：[[0,1],[1,1]]
输出：1
解释：不进行翻转，有 1 行所有值都相等。

示例 2：
输入：[[0,1],[1,0]]
输出：2
解释：翻转第一列的值之后，这两行都由相等的值组成。

示例 3：
输入：[[0,0,0],[0,0,1],[1,1,0]]
输出：2
解释：翻转前两列的值之后，后两行由相等的值组成。




class Solution {
    public int maxEqualRowsAfterFlips(int[][] matrix) {
        int result=0;
        Map<String,Integer> map=new HashMap<>((int)(matrix.length/0.75)+1);
        for(int[] row:matrix){
            StringBuilder sb=new StringBuilder();
            for(int i=1;i<row.length;++i){
                if(row[i]!=row[i-1]){
                    sb.append(i);
                }
            }
            map.put(sb.toString(),map.getOrDefault(sb.toString(),0)+1);
        }
        for(Map.Entry<String,Integer> e:map.entrySet()){
            result=Math.max(result,e.getValue());
        }
        return result;
    }
}



func maxEqualRowsAfterFlips(matrix [][]int) int {
    m:=make(map[string]int,len(matrix))
    for _,row:=range matrix {
        var sb strings.Builder
        for i:=1;i<len(row);i++ {
            if row[i]!=row[i-1] {
                sb.WriteByte(byte(i))
            }
        }
        m[sb.String()]++
    }
    result:=0
    for _,v:=range m {
        if v>result {
            result=v
        }
    }
    return result
}
