给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，
使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]

class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        result=[]
        size=len(nums)
        for i in range(size-2):
            if i and nums[i]==nums[i-1]:
                continue
            l,r=i+1,size-1
            while l<r:
                cur_sum=nums[l]+nums[r]+nums[i]
                if cur_sum>0 :
                    r-=1
                elif cur_sum<0:
                    l+=1
                else:
                    result.append([nums[i],nums[l],nums[r]])
                    l+=1
                    r-=1
                    while l<r and nums[l]==nums[l-1]:
                        l+=1
                    while l<r and nums[r]==nums[r+1]:
                        r-=1
        return result


java:

class Solution {
    public void quickSort(int[] arr,int start,int end)
    {
        if(start>=end)
            return;
        int mid=(start+end)>>1;
        int md_value=Math.max(Math.min(arr[start],arr[mid]),
                     Math.min(Math.max(arr[start],arr[mid]),arr[end]));
        if(md_value!=arr[start])
        {
            int idx=(arr[end]==md_value)?end:mid;
            arr[idx]=arr[start];
            arr[start]=md_value;
        }
        int pivot=arr[start],l=start,r=end;
        while(l<r)
        {
            while(l<r && arr[r]>=pivot)
                r--;
            arr[l]=arr[r];
            while(l<r && arr[l]<pivot)
                l++;
            arr[r]=arr[l];
        }
        arr[l]=pivot;
        quickSort(arr,start,l-1);
        quickSort(arr,l+1,end);
    }
    
    
    public List<List<Integer>> threeSum(int[] nums) {
        quickSort(nums,0,nums.length-1);
        System.out.print(Arrays.toString(nums));
        List<List<Integer>> result=new ArrayList<>();
        for(int i=0;i<nums.length-2;i++)
        {
            if(i>0 && nums[i]==nums[i-1])
                continue;
            int l=i+1,r=nums.length-1;
            while(l<r)
            {
                if(nums[l]+nums[r]+nums[i]<0)
                    l++;
                else if(nums[l]+nums[r]+nums[i]>0)
                    r--;
                else
                {
                    result.add(Arrays.asList(nums[l++],nums[r--],nums[i]));
                    while(l<r && nums[l]==nums[l-1])
                        l++;
                    while(l<r && nums[r]==nums[r+1])
                        r--;
                }
            }
        }
        return result;
    }
}
