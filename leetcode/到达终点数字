在一根无限长的数轴上，你站在0的位置。终点在target的位置。

每次你可以选择向左或向右移动。第 n 次移动（从 1 开始），可以走 n 步。

返回到达终点需要的最小移动次数。

示例 1:

输入: target = 3
输出: 2
解释:
第一次移动，从 0 到 1 。
第二次移动，从 1 到 3 


示例 2:

输入: target = 2
输出: 3
解释:
第一次移动，从 0 到 1 。
第二次移动，从 1 到 -1 。
第三次移动，从 -1 到 2 。

注意:

target是在[-10^9, 10^9]范围中的非零整数。



可以将此问题看做是以下问题：
给定一个数组为1,2,3,4,5.......i，为数组元素添加正负号（正号表示向右跳，负号表示向左跳），使得其和为target的最小数组长度
记录数组添加正号数字之和为p, 添加负号数字之和为n，数组之和为s
p + n = s
p - n = target
两式相减有：
s - target = 2 * n
因此s - target一定为偶数，且s - target = 2 * n >= 0



class Solution {
    public int reachNumber(int target) {
        if(target<0){
            target=-target;
        }
        int sum=0;
        for(int i=1;;++i){
            sum+=i;
            if(sum>=target && ((sum-target)&1)==0){
                return i;
            }
        }
    }
}
