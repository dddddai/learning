在整数数组 nums 中，是否存在两个下标 i 和 j，使得 nums [i] 和 nums [j] 的差的绝对值小于等于 t ，
且满足 i 和 j 的差的绝对值也小于等于 ķ 。

如果存在则返回 true，不存在返回 false。


示例 1:

输入: nums = [1,2,3,1], k = 3, t = 0
输出: true


示例 2:

输入: nums = [1,0,1,1], k = 1, t = 2
输出: true


示例 3:

输入: nums = [1,5,9,1,5,9], k = 2, t = 3
输出: false




class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        TreeSet<Integer> set=new TreeSet<>();
        for(int i=0;i<=k && i<nums.length;++i){
            Integer a=set.ceiling(nums[i]),b=set.floor(nums[i]);
            if(a!=null && (long)a-nums[i]<=t){
                return true;
            }
            if(b!=null && (long)nums[i]-b<=t){
                return true;
            }
            set.add(nums[i]);
        }
        for(int i=k+1;i<nums.length;++i){
            set.remove(nums[i-k-1]);
            Integer a=set.ceiling(nums[i]),b=set.floor(nums[i]);
            if(a!=null && (long)a-nums[i]<=t){
                return true;
            }
            if(b!=null && (long)nums[i]-b<=t){
                return true;
            }
            set.add(nums[i]);
        }
        return false;
    }
}
