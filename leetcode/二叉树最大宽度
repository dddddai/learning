给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。
这个二叉树与满二叉树（full binary tree）结构相同，但一些节点为空。

每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的null节点也计入长度）之间的长度。

示例 1:

输入: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

输出: 4
解释: 最大值出现在树的第 3 层，宽度为 4 (5,3,null,9)。
示例 2:

输入: 

          1
         /  
        3    
       / \       
      5   3     

输出: 2
解释: 最大值出现在树的第 3 层，宽度为 2 (5,3)。
示例 3:

输入: 

          1
         / \
        3   2 
       /        
      5      

输出: 2
解释: 最大值出现在树的第 2 层，宽度为 2 (3,2)。
示例 4:

输入: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
输出: 8
解释: 最大值出现在树的第 4 层，宽度为 8 (6,null,null,null,null,null,null,7)。






class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Queue<Node> queue=new LinkedList<>();
        queue.offer(new Node(root,1));
        int result=1;
        while(!queue.isEmpty()){
            int size=queue.size();
            Node firstNode=queue.poll();
            if(firstNode.treeNode.left!=null){
                queue.offer(new Node(firstNode.treeNode.left,firstNode.idx<<1));
            }
            if(firstNode.treeNode.right!=null){
                queue.offer(new Node(firstNode.treeNode.right,(firstNode.idx<<1)+1));
            }
            if(size>1){
                for(int i=1;i<size-1;++i){
                    Node node=queue.poll();
                    if(node.treeNode.left!=null){
                        queue.offer(new Node(node.treeNode.left,node.idx<<1));
                    }
                    if(node.treeNode.right!=null){
                        queue.offer(new Node(node.treeNode.right,(node.idx<<1)+1));
                    }
                }
                Node lastNode=queue.poll();
                if(lastNode.treeNode.left!=null){
                    queue.offer(new Node(lastNode.treeNode.left,lastNode.idx<<1));
                }
                if(lastNode.treeNode.right!=null){
                    queue.offer(new Node(lastNode.treeNode.right,(lastNode.idx<<1)+1));
                }
                result=Math.max(result,lastNode.idx-firstNode.idx+1);
            }
        }
        return result;
    }
    
    private class Node{
        TreeNode treeNode;
        int idx;
        
        private Node(TreeNode treeNode,int idx){
            this.treeNode=treeNode;
            this.idx=idx;
        }
    }
}
