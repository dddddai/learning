中位数是有序序列最中间的那个数。如果序列的大小是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。

例如：

[2,3,4]，中位数是 3
[2,3]，中位数是 (2 + 3) / 2 = 2.5
给你一个数组 nums，有一个大小为 k 的窗口从最左端滑动到最右端。窗口中有 k 个数，每次窗口向右移动 1 位。
你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。

 

示例：

给出 nums = [1,3,-1,-3,5,3,6,7]，以及 k = 3。

窗口位置                      中位数
---------------               -----
[1  3  -1] -3  5  3  6  7       1
 1 [3  -1  -3] 5  3  6  7      -1
 1  3 [-1  -3  5] 3  6  7      -1
 1  3  -1 [-3  5  3] 6  7       3
 1  3  -1  -3 [5  3  6] 7       5
 1  3  -1  -3  5 [3  6  7]      6
 因此，返回该滑动窗口的中位数数组 [1,-1,-1,3,5,6]。




class Solution {
    private int a,b;
    private TreeMap<Integer,Integer> minHeap=new TreeMap<>();
    private TreeMap<Integer,Integer> maxHeap=new TreeMap<>(Collections.reverseOrder());
    
    public double[] medianSlidingWindow(int[] nums, int k) {
        maxHeap.put(Integer.MIN_VALUE,1);
        minHeap.put(Integer.MAX_VALUE,1);
        double[] result=new double[nums.length-k+1];
        for(int i=0;i<nums.length;++i){
            push(nums[i]);
            if(i>=k-1){
                result[i-k+1] = ((a+b)&1)==1 ? 
                (double)maxHeap.firstKey() : ((long)minHeap.firstKey()+(long)maxHeap.firstKey())/2.0;
                remove(nums[i-k+1]);
            }
        }
        return result;
    }
    
    private void push(int num){
        if(a<=b){
            Map.Entry<Integer,Integer> e=minHeap.firstEntry();
            Integer top=e.getKey();
            if(num<=top){
                maxHeap.put(num,maxHeap.getOrDefault(num,0)+1);
            }else{
                maxHeap.put(top,maxHeap.getOrDefault(top,0)+1);
                if(e.getValue()==1){
                    minHeap.remove(top);
                }else{
                    minHeap.put(top,e.getValue()-1);
                }
                minHeap.put(num,maxHeap.getOrDefault(num,0)+1);
            }
            ++a;
        }else{
            Map.Entry<Integer,Integer> e=maxHeap.firstEntry();
            Integer top=e.getKey();
            if(num>=top){
                minHeap.put(num,minHeap.getOrDefault(num,0)+1);
            }else{
                minHeap.put(top,minHeap.getOrDefault(top,0)+1);
                if(e.getValue()==1){
                    maxHeap.remove(top);
                }else{
                    maxHeap.put(top,e.getValue()-1);
                }
                maxHeap.put(num,maxHeap.getOrDefault(num,0)+1);
            }
            ++b;
        }
    }
    
    private void remove(int num){
        if(num<=maxHeap.firstKey()){
            int t=maxHeap.get(num);
            if(t==1){
                maxHeap.remove(num);
            }else{
                maxHeap.put(num,t-1);
            }
            if(a-1<b){
                Map.Entry<Integer,Integer> e=minHeap.firstEntry();
                Integer top=e.getKey();
                maxHeap.put(top,maxHeap.getOrDefault(top,0)+1);
                if(e.getValue()==1){
                    minHeap.remove(top);
                }else{
                    minHeap.put(top,e.getValue()-1);
                }
                --b;
            }else{
                --a;
            }
        }else{
            int t=minHeap.get(num);
            if(t==1){
                minHeap.remove(num);
            }else{
                minHeap.put(num,t-1);
            }
            if(b<a){
                Map.Entry<Integer,Integer> e=maxHeap.firstEntry();
                Integer top=e.getKey();
                minHeap.put(top,minHeap.getOrDefault(top,0)+1);
                if(e.getValue()==1){
                    maxHeap.remove(top);
                }else{
                    maxHeap.put(top,e.getValue()-1);
                }
                --a;
            }else{
                --b;
            }
        }
    }
}
