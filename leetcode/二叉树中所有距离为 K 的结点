给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K 。

返回到目标结点 target 距离为 K 的所有结点的值的列表。 答案可以以任何顺序返回。

 

示例 1：

输入：root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
输出：[7,4,1]
解释：
所求结点为与目标结点（值为 5）距离为 2 的结点，
值分别为 7，4，以及 1


提示：

给定的树是非空的。
树上的每个结点都具有唯一的值 0 <= node.val <= 500 。
目标结点 target 是树上的结点。
0 <= K <= 1000.




class Solution {
    private Node t;

    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        dfs(root,new Node(root.val),target);
        Queue<Node> q=new LinkedList<>();
        q.offer(t);
        Set<Integer> set=new HashSet<>(K*3);
        set.add(t.val);
        while(K-->0 && !q.isEmpty()){
            int m=q.size();
            while(m-->0){
                for(Node x:q.peek().next){
                    if(!set.contains(x.val)){
                        q.offer(x);
                        set.add(x.val);
                    }
                }
                q.poll();
            }
        }
        List<Integer> result=new ArrayList<>(q.size());
        for(Node n:q){
            result.add(n.val);
        }
        return result;
    }

    private void dfs(TreeNode root,Node n,TreeNode target) {
        if(root==target){
            t=n;
        }
        if(root.left!=null){
            Node a=new Node(root.left.val);
            n.next.add(a);
            a.next.add(n);
            dfs(root.left,a,target);
        }
        if(root.right!=null){
            Node b=new Node(root.right.val);
            n.next.add(b);
            b.next.add(n);
            dfs(root.right,b,target);
        }
    }

    private class Node {
        List<Node> next=new ArrayList<>(3);
        int val;

        Node(int val) {
            this.val=val;
        }
    }
}
