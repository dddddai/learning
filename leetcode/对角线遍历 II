给你一个列表 nums ，里面每一个元素都是一个整数列表。请你依照下面各图的规则，按顺序返回 nums 中对角线上的整数。


示例 1：

输入：nums = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,4,2,7,5,3,8,6,9]

示例 2：

输入：nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
输出：[1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]


示例 3：

输入：nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]
输出：[1,4,2,5,3,8,6,9,7,10,11]


示例 4：

输入：nums = [[1,2,3,4,5,6]]
输出：[1,2,3,4,5,6]



nums[i][j] 必然在第（i + j）次斜线的结果中



class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        List<LinkedList<Integer>> t=new ArrayList<>(nums.get(0).size()<<1);
        int len=0;
        for(int i=0;i<nums.size();++i){
            for(int j=0;j<nums.get(i).size();++j){
                ++len;
                if(i+j==t.size()){
                    t.add(new LinkedList<>());
                }
                t.get(i+j).addFirst(nums.get(i).get(j));
            }
        }
        int[] result=new int[len];
        int idx=0;
        for(List<Integer> row:t){
            for(int num:row){
                result[idx++]=num;
            }
        }
        return result;
    }
}
