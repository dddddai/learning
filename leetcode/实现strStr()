实现 strStr() 函数。

给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。

示例 1:

输入: haystack = "hello", needle = "ll"
输出: 2
示例 2:

输入: haystack = "aaaaa", needle = "bba"
输出: -1
说明:

当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。

对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。



kmp算法：http://wiki.jikexueyuan.com/project/kmp-algorithm/define.html



class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        if not needle:
            return 0
        i=j=0
        nxt=self.getNextArr(needle)
        
        while i<len(haystack) and j<len(needle):
            if j==-1 or haystack[i]==needle[j]:
                i+=1
                j+=1
            else:
                j=nxt[j]
                
        return i-j if j==len(needle) else -1
        
    def getNextArr(self,s):
        nxt=[0]*len(s)
        nxt[0]=-1
        i,j=-1,0
        
        while j<len(s)-1:
            if i==-1 or s[i]==s[j]:
                i+=1
                j+=1
                if s[i]==s[j]:
                    nxt[j]=nxt[i]
                else:
                    nxt[j]=i
            else:
                i=nxt[i]
                
        return nxt
        
        
        
        
        
class Solution {
    public int strStr(String haystack, String needle) {
        if(needle.length()==0){
            return 0;
        }
        int[] nxt=getNextArr(needle);
        int i=0,j=0;
        while(i<haystack.length() && j<needle.length()){
            if(j==-1 || haystack.charAt(i)==needle.charAt(j)){
                ++i;
                ++j;
            }else{
                j=nxt[j];
            }
        }
        return j==needle.length()?i-j:-1;
    }
    
    private int[] getNextArr(String s){
        int i=-1,j=0;
        int[] nxt=new int[s.length()];
        nxt[0]=-1;
        while(j<s.length()-1){
            if(i==-1 || s.charAt(i)==s.charAt(j)){
                if(s.charAt(++i)==s.charAt(++j)){
                    nxt[j]=nxt[i];
                }else{
                    nxt[j]=i;
                }
            }else{
                i=nxt[i];
            }
        }
        return nxt;
    }
}        



sunday算法：https://www.cnblogs.com/bonelee/p/5887015.html


class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        idxOfChar={}
        for i,c in enumerate(needle):
            idxOfChar[c]=i
        len1=len(haystack)
        len2=len(needle)
        i=0
        while i<=len1-len2:
            flag=True
            for j,c in enumerate(needle):
                if haystack[i+j]!=c:
                    flag=False
                    if i+len2<len1:
                        if haystack[i+len2] in idxOfChar:
                            i+=len2-idxOfChar[haystack[i+len2]]
                        else:
                            i+=len2+1
                    else:
                        return -1
                    break
            if flag:
                return i

        return -1
        
        
        
        
class Solution {
    public int strStr(String haystack, String needle) {
        int len1=haystack.length(),len2=needle.length();
        Map<Character,Integer> idxOfChar=new HashMap<>(len2);
        for(int i=0;i<len2;++i){
            idxOfChar.put(needle.charAt(i),i);
        }
        for(int i=0;i<=len1-len2;){
            boolean flag=true;
            for(int j=0;j<len2;++j){
                if(haystack.charAt(i+j)!=needle.charAt(j)){
                    flag=false;
                    if(i+len2<len1){
                        if(idxOfChar.containsKey(haystack.charAt(i+len2))){
                            i+=len2-idxOfChar.get(haystack.charAt(i+len2));
                        }else{
                            i+=len2+1;
                        }
                    }else{
                        return -1;
                    }
                    break;
                }
            }
            if(flag){
                return i;
            }
        }
        return -1;
    }
}
