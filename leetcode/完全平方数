给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:

输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.
示例 2:

输入: n = 13
输出: 2
解释: 13 = 4 + 9.



Lagrange 四平方定理： 任何一个正整数都可以表示成不超过四个整数的平方之和。
那么我们这个问题的解法就变得很简单了，我们的结果只有1,2,3,4，四种可能。

另外还有一个非常重要的推论

满足四数平方和定理的数n（满足由四个数构成，小于四个不行），必定满足 n=4^a(8b+7)

class Solution(object):
    def numSquares(self, n):
        """
        :type n: int
        :rtype: int
        """
        while (n&3)==0:
            n>>=2
            
        if (n&7)==7:
            return 4
            
        a=0
        while a*a<=n:
            b=(n-a*a)**0.5
            if b==int(b):
                return (not not a)+(not not b)
            a+=1
            
        return 3
        
        
        
class Solution {
    public int numSquares(int n) {
        while((n&3)==0){
            n>>>=2;
        }
        if((n&7)==7){
            return 4;
        }
        for(int a=0;a*a<=n;++a){
            double b=Math.sqrt(n-a*a);
            if(b==(int)b){
                return a==0 || b==0 ? 1:2;
            }
        }
        return 3;
    }
}
