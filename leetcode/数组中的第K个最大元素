在未排序的数组中找到第 k 个最大的元素。
请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。

示例 1:

输入: [3,2,1,5,6,4] 和 k = 2
输出: 5
示例 2:

输入: [3,2,3,1,2,4,5,5,6] 和 k = 4
输出: 4


class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        def perc_down(arr,start,end):
            root=start
            while 1:
                child=2*root+1
                if child>end:
                    break
                elif child+1<=end and arr[child]>arr[child+1]:
                    child+=1
                if arr[child]<arr[root]:
                    arr[root],arr[child]=arr[child],arr[root]
                    root=child
                else:
                    break
        n=len(nums)
        for i in range((k-2)//2,-1,-1):
            perc_down(nums,i,k-1)
        for j in range(k,n):
            if nums[j]>nums[0]:
                nums[0]=nums[j]
                perc_down(nums,0,k-1)
        return nums[0]
        

解法2：

        self.n=len(nums)
        def search(arr,start,end,k):
            if start>=end:
                return arr[start]
            i,j,mid=start,end,(start+end)//2
            
            #注意要用三数取中法，避免最坏情况
            if arr[i]<arr[mid]<arr[j] or arr[j]<arr[mid]<arr[i]:
                arr[mid],arr[j]=arr[j],arr[mid]
            elif arr[mid]<arr[i]<arr[j] or arr[j]<arr[i]<arr[mid]:
                arr[i],arr[j]=arr[j],arr[i]
                
            while i<j:
                if arr[i]>=arr[j]:
                    arr[i],arr[j-1],arr[j]=arr[j-1],arr[j],arr[i]
                    j-=1
                else:
                    i+=1
            if self.n-i==k:
                return arr[i]
            elif self.n-i>k:
                return search(arr,i+1,end,k)
            return search(arr,start,i-1,k)
        
        return search(nums,0,self.n-1,k)
