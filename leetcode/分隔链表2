给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k 个连续的部分。

每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。

这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。

返回一个符合上述规则的链表的列表。

举例： 1->2->3->4, k = 5 // 5 结果 [ [1], [2], [3], [4], null ]

示例 1：

输入: 
root = [1, 2, 3], k = 5

输出: [[1],[2],[3],[],[]]


示例 2：

输入: 
root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3

输出: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]

 

提示:
root 的长度范围： [0, 1000].
输入的每个节点的大小范围：[0, 999].
k 的取值范围： [1, 50].





class Solution {
    public ListNode[] splitListToParts(ListNode root, int k) {
        ListNode p=root;
        int len=0;
        while(p!=null){
            ++len;
            p=p.next;
        }
        int cnt=0;
        boolean flag=false;
        if(len%k==0){
            cnt=len/k;
        }else{
            cnt=len/k+1;
            flag=true;
        }
        ListNode[] result=new ListNode[k];
        int tmp=0;
        int idx=0;
        p=root;
        ListNode head=root;
        while(p!=null){
            if(++tmp==cnt){
                result[idx++]=head;
                head=p.next;
                p.next=null;
                p=head;
                tmp=0;
                if(flag){
                    len-=cnt;
                    if(len%(k-idx)==0){
                        --cnt;
                        flag=false;
                    }
                }
            }else{
                p=p.next;
            }
        }
        return result;
    }
}






class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* root, int k) {
        int len=0;
        ListNode* p=root;
        while(p){
            ++len;
            p=p->next;
        }
        int cnt;
        bool flag=false;
        if(len%k==0){
            cnt=len/k;
        }else{
            cnt=len/k+1;
            flag=true;
        }
        vector<ListNode*> result;
        result.resize(k);
        p=root;
        ListNode* head=root;
        int tmp=0;
        int idx=0;
        while(p){
            if(++tmp==cnt){
                result[idx++]=head;
                head=p->next;
                p->next=NULL;
                p=head;
                tmp=0;
                if(flag){
                    len-=cnt;
                    if(len%(k-idx)==0){
                        --cnt;
                        flag=false;
                    }
                }
            }else{
                p=p->next;
            }
        }
        return result;
    }
};
