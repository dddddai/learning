给定一个字符串 S 和一个字符串 T，请在 S 中找出包含 T 所有字母的最小子串。

示例：

输入: S = "ADOBECODEBANC", T = "ABC"
输出: "BANC"


class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        cnt=len(t)
        start=l=0
        minSize=len(s)+1
        
        times={}
        for c in t:
            times[c]=times.get(c,0)+1
            
        for r in range(len(s)):
            if s[r] in times:
                times[s[r]]-=1
                if times[s[r]]>=0:
                    cnt-=1
            if cnt==0:
                while 1:
                    if s[l] in times:
                        if times[s[l]]<0:
                            times[s[l]]+=1
                        else:
                            break
                    l+=1
                if r-l+1<minSize:  
                    start,minSize=l,r-l+1
                    
        return '' if minSize==len(s)+1 else s[start:start+minSize]




class Solution {
    public String minWindow(String s, String t) {
        int cnt=t.length(),minSize=s.length()+1;
        int start=0,l=0;
        
        HashMap<Character,Integer> times=new HashMap<>();
        for(int i=0;i<t.length();++i)
            times.put(t.charAt(i),times.getOrDefault(t.charAt(i),0)+1);
                
        for(int r=0;r<s.length();++r)
        {
            if(times.containsKey(s.charAt(r)))
            {
                times.put(s.charAt(r),times.get(s.charAt(r))-1);
                if(times.get(s.charAt(r))>=0)
                    --cnt;
            }
            if(cnt==0)
            {
                while(true)
                {
                    if(times.containsKey(s.charAt(l)))
                    {
                        if(times.get(s.charAt(l))<0)
                            times.put(s.charAt(l),times.get(s.charAt(l))+1);
                        else
                            break;
                    }
                    ++l;
                }
                if(r-l+1<minSize)
                {
                    minSize=r-l+1;
                    start=l;
                }
            }
        }
        return minSize==s.length()+1 ? "":s.substring(start,start+minSize);
    }
}
