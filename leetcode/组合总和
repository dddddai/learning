给定一个无重复元素的数组 candidates 和一个目标数 target ，
找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

说明：

所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]
示例 2:

输入: candidates = [2,3,5], target = 8,
所求解集为:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]


class Solution(object):
    #start避免重复
    
    def func(self,candidates,start,target,arr):
        if target==0:
            self.result.append(arr)
        for i in range(start,self.size):
            if candidates[i]>target:
                continue
            self.func(candidates,i,target-candidates[i],arr+[candidates[i]])

    
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        self.size=len(candidates)
        self.result=[]
        self.func(candidates,0,target,[])
        return self.result



class Solution {
    List<List<Integer>> result=new ArrayList<>();
    
    void func(int[] candidates,int target,int start,Stack<Integer> stack)
    {
        if(target==0)
            result.add(new ArrayList<>(stack));
        for(int i=start;i<candidates.length;++i)
        {
            if(candidates[i]>target)
                continue;
            stack.push(candidates[i]);
            func(candidates,target-candidates[i],i,stack);
            stack.pop();
        }
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        func(candidates,target,0,new Stack<>());
        return result;
    }
}
