假设你是一位顺风车司机，车上最初有 capacity 个空座位可以用来载客。
由于道路的限制，车只能向一个方向行驶（也就是说，不允许掉头或改变方向，你可以将其想象为一个向量）。

这儿有一份乘客行程计划表 trips[][]，
其中 trips[i] = [num_passengers, start_location, end_location] 包含了第 i 组乘客的行程信息：

必须接送的乘客数量；
乘客的上车地点；
以及乘客的下车地点。
这些给出的地点位置是从你的 初始 出发位置向前行驶到这些地点所需的距离（它们一定在你的行驶方向上）。

请你根据给出的行程计划表和车子的座位数，来判断你的车是否可以顺利完成接送所有乘客的任务
（当且仅当你可以在所有给定的行程中接送所有乘客时，返回 true，否则请返回 false）。

示例 1：
输入：trips = [[2,1,5],[3,3,7]], capacity = 4
输出：false

示例 2：
输入：trips = [[2,1,5],[3,3,7]], capacity = 5
输出：true

示例 3：
输入：trips = [[2,1,5],[3,5,7]], capacity = 3
输出：true

示例 4：
输入：trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11
输出：true



class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
        TreeMap<Integer,Integer> map=new TreeMap<>();
        for(int[] t:trips){
            map.put(t[1],map.getOrDefault(t[1],0)+t[0]);
            map.put(t[2],map.getOrDefault(t[2],0)-t[0]);
        }
        int cnt=0;
        for(Map.Entry<Integer,Integer> e:map.entrySet()){
            cnt+=e.getValue();
            if(cnt>capacity){
                return false;
            }
        }
        return true;
    }
}



func carPooling(trips [][]int, capacity int) bool {
    m:=make(map[int]int,len(trips))
    arr:=make([]int,0,len(trips))
    for _,t:=range trips {
        x,ok:=m[t[1]]
        if !ok {
            arr=append(arr,t[1])
        }
        m[t[1]]=x+t[0]
        x,ok=m[t[2]]
        if !ok {
            arr=append(arr,t[2])
        }
        m[t[2]]=x-t[0]
    }
    sort.Ints(arr)
    cnt:=0
    for _,idx:=range arr {
        cnt+=m[idx]
        if cnt>capacity {
            return false
        }
    }
    return true
}
