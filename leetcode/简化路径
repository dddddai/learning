路径简化的依据是：

当遇到“/../"则需要返回上级目录，需检查上级目录是否为空。

当遇到"/./"则表示是本级目录，无需做任何特殊操作。

当遇到"//"则表示是本级目录，无需做任何操作。

当遇到其他字符则表示是文件夹名，无需简化。

当字符串是空或者遇到”/../”，则需要返回一个"/"。

当遇见"/a//b"，则需要简化为"/a/b"。


class Solution(object):   
    def simplifyPath(self, path):
        """
        :type path: str
        :rtype: str
        """
        dirs=filter(lambda x:x,path.split('/'))
        stack=[]
        for d in dirs:
            if d=='.':
                continue
            if d=='..':
                if stack:
                    stack.pop()
            else:
                stack.append(d)
        return '/'+'/'.join(stack)
        

java:

注意用equals

class Solution {
    public String simplifyPath(String path) {
        Stack<String> stack=new Stack<>();
        String[] dirs=path.split("/");
        for(String d:dirs)
        {
            if(d.equals("") || d.equals("."))
                continue;
            if(d.equals(".."))
            {
                if(!stack.empty())
                    stack.pop();
            }
            else
                stack.push(d);
        }

        return "/"+String.join("/",stack);
    }
}
