实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1




class Solution {
    public void nextPermutation(int[] nums) {
        for(int i=nums.length-1;i>0;--i){
            if(nums[i-1]<nums[i]){
                int l=i,r=nums.length-1;
                //找到右边第一个比nums[i-1]大的数
                while(l<r){
                    int mid=(l+r)>>1;
                    if(nums[mid]>nums[i-1]){
                        l=mid+1;
                    }else{
                        r=mid;
                    }
                }
                if(nums[l]<=nums[i-1]){
                    --l;
                }
                int tmp=nums[l];
                nums[l]=nums[i-1];
                nums[i-1]=tmp;
                reverse(nums,i,nums.length-1);
                return;
            }
        }
        reverse(nums,0,nums.length-1);
    }
    
    private void reverse(int[] arr,int start,int end){
        int l=start,r=end;
        while(l<r){
            int tmp=arr[l];
            arr[l++]=arr[r];
            arr[r--]=tmp;
        }
    }
}
