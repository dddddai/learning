实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1



class Solution(object):
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        for i in xrange(len(nums)-1,0,-1):
            if nums[i-1]<nums[i]:
                for j in xrange(len(nums)-1,i-1,-1):
                    if nums[j]>nums[i-1]:
                        nums[j],nums[i-1]=nums[i-1],nums[j]
                        self.reverse(nums,i,len(nums)-1)
                        return
        
        nums.reverse()
                        
            
    def reverse(self,arr,start,end):
        l,r=start,end
        while l<r:
            arr[l],arr[r]=arr[r],arr[l]
            l+=1
            r-=1
            
            
            
 
 class Solution {
    public void nextPermutation(int[] nums) {
        for(int i=nums.length-1;i>0;--i){
            if(nums[i-1]<nums[i]){
                for(int j=nums.length-1;j>=i;--j){
                    if(nums[j]>nums[i-1]){
                        int tmp=nums[j];
                        nums[j]=nums[i-1];
                        nums[i-1]=tmp;
                        reverse(nums,i,nums.length-1);
                        return;
                    }
                }
            }
        }
        reverse(nums,0,nums.length-1);
    }
    private void reverse(int[] arr,int start,int end){
        int l=start,r=end;
        while(l<r){
            int tmp=arr[l];
            arr[l++]=arr[r];
            arr[r--]=tmp;
        }
    }
}
