给你一个整数数组 A，对于每个整数 A[i]，可以选择 x = -K 或是 x = K （K 总是非负整数），并将 x 加到 A[i] 中。

在此过程之后，得到数组 B。

返回 B 的最大值和 B 的最小值之间可能存在的最小差值。

示例 1：

输入：A = [1], K = 0
输出：0
解释：B = [1]
示例 2：

输入：A = [0,10], K = 2
输出：6
解释：B = [2,8]
示例 3：

输入：A = [1,3,6], K = 3
输出：3
解释：B = [4,6,3]



对 A 进行排序，若整个数组同加同减那么差值就是 A[n-1]-A[0]
其他情况则可将 A 视为俩部分 A1<A2，为了使差值最小，只能 A1 同加， A2 同减
那么整个 A 的最大值只能是 A1 尾或 A2 尾，最小值只能是 A1 头或 A2 头



class Solution {
    public int smallestRangeII(int[] a, int k) {
        int n=a.length;
        Arrays.sort(a);
        int result=a[n-1]-a[0];
        for(int i=1;i<n;++i){
            int tmin=Math.min(a[0]+k,a[i]-k);
            int tmax=Math.max(a[i-1]+k,a[n-1]-k);
            result=Math.min(result,tmax-tmin);
        }
        return result;
    }
}



func smallestRangeII(a []int, k int) int {
    n:=len(a)
    sort.Ints(a)
    result:=a[n-1]-a[0]
    for i:=1;i<n;i++ {
        var tmax,tmin int
        if a[0]+k<a[i]-k {
            tmin=a[0]+k
        } else {
            tmin=a[i]-k
        }
        if a[i-1]+k>a[n-1]-k {
            tmax=a[i-1]+k
        } else {
            tmax=a[n-1]-k
        }
        if tmax-tmin<result {
            result=tmax-tmin
        }
    }
    return result
}
