给出两个 非空 的链表用来表示两个非负的整数。
其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储一位数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807






* struct ListNode {
*     int val;
*     ListNode *next;
*     ListNode(int x) : val(x), next(NULL) {}
* };
*/
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* p1=l1;
        ListNode* p2=l2;
        ListNode dummy(0);
        ListNode *p=&dummy;
        int carry=0;
        int nextCarry=0;
        while(p1 || p2){
            int tmp=carry;
            if(p1){
                tmp+=p1->val;
                p1=p1->next;
            }
            if(p2){
                tmp+=p2->val;
                p2=p2->next;
            }
            if(tmp>=10){
                tmp-=10;
                nextCarry=1;
            }else{
                nextCarry=0;
            }
            p->next=new ListNode(tmp);
            p=p->next;
            carry=nextCarry;
        }
        if(carry){
            p->next=new ListNode(1);
        }
        return dummy.next;
    }
};
