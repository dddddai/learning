给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。

说明：

拆分时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：

输入: s = "leetcode", wordDict = ["leet", "code"]
输出: true
解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。
示例 2：

输入: s = "applepenapple", wordDict = ["apple", "pen"]
输出: true
解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
     注意你可以重复使用字典中的单词。
示例 3：

输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
输出: false




class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: bool
        """
        if not wordDict:
            return False
        
        wordSet=set(wordDict)
        dp=[False]*(len(s)+1)
        dp[0]=True
        maxLen=len(max(wordDict,key=len))
        
        for i in xrange(1,len(s)+1):
            for j in xrange(max(0,i-maxLen),i):
                if dp[j] and s[j:i] in wordSet:
                    dp[i]=True
                    break
        
        return dp[-1]
        
        
        
        
        
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        if(wordDict.isEmpty()){
            return false;
        }
        boolean[] dp=new boolean[s.length()+1];
        dp[0]=true;
        Set<String> wordSet=new HashSet<>(wordDict);
        int maxLen=0;
        for(String word:wordDict){
            maxLen=Math.max(maxLen,word.length());
        }
        for(int i=1;i<=s.length();++i){
            for(int j=Math.max(0,i-maxLen);j<i;++j){
                if(dp[j] && wordSet.contains(s.substring(j,i))){
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}        
