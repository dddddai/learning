给出一些不同颜色的盒子，盒子的颜色由数字表示，即不同的数字表示不同的颜色。
你将经过若干轮操作去去掉盒子，直到所有的盒子都去掉为止。每一轮你可以移除具有相同颜色的连续 k 个盒子（k >= 1），这样一轮之后你将得到 k*k 个积分。
当你将所有盒子都去掉之后，求你能获得的最大积分和。

示例 1：
输入:

[1, 3, 2, 2, 2, 3, 4, 3, 1]
输出:

23
解释:

[1, 3, 2, 2, 2, 3, 4, 3, 1] 
----> [1, 3, 3, 4, 3, 1] (3*3=9 分) 
----> [1, 3, 3, 3, 1] (1*1=1 分) 
----> [1, 1] (3*3=9 分) 
----> [] (2*2=4 分)
 

提示：盒子的总数 n 不会超过 100。



dp[i][j][k] 表示在 [i,j]部分能得到的最大得分
k表示boxes[i]左边有k个与之相等的数可以与它结合（可能原本有多余k个数，但是能和它合并一起消失的，只有k个）



class Solution {
    private int[][][] memory;
    
    public int removeBoxes(int[] boxes) {
        memory=new int[boxes.length][boxes.length][boxes.length];
        return func(boxes,0,boxes.length-1,0);
    }
    
    private int func(int[] boxes,int start,int end,int k){
        if(start>end){
            return 0;
        }
        if(memory[start][end][k]!=0){
            return memory[start][end][k];
        }
        int result=(k+1)*(k+1)+func(boxes,start+1,end,0);
        for(int i=start+1;i<=end;++i){
            if(boxes[i]==boxes[start]){
                result=Math.max(result,
                               func(boxes,start+1,i-1,0)+func(boxes,i,end,k+1));
            }
        }
        return memory[start][end][k]=result;
    }
}
