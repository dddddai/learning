找到给定字符串（由小写字符组成）中的最长子串 T ， 要求 T 中的每一字符出现次数都不少于 k 。输出 T 的长度。

示例 1:

输入:
s = "aaabb", k = 3

输出:
3

最长子串为 "aaa" ，其中 'a' 重复了 3 次。
示例 2:

输入:
s = "ababbc", k = 2

输出:
5

最长子串为 "ababb" ，其中 'a' 重复了 2 次， 'b' 重复了 3 次。





class Solution {
    private List<List<Integer>> map=new ArrayList<>(26);
    
    public int longestSubstring(String s, int k) {
        if(k>s.length()){
            return 0;
        }
        for(int i=0;i<26;++i){
            map.add(new ArrayList<>());
        }
        for(int i=0;i<s.length();++i){
            map.get(s.charAt(i)-'a').add(i);
        }
        return func(s,0,s.length(),k);
    }
    
    private int func(String s,int start,int end,int k){
        if(end-start<k){
            return 0;
        }
        for(List<Integer> arr:map){
            if(arr.isEmpty() || arr.get(0)>=end || arr.get(arr.size()-1)<start){
                continue;
            }
            int firstIdx=getIdx(arr,start);
            int lastIdx=getIdx(arr,end-1);
            if(arr.get(lastIdx)>=end){
                if(--lastIdx<firstIdx){
                    continue;
                }
            }
            if(lastIdx-firstIdx+1<k){
                int result=Math.max(func(s,start,arr.get(firstIdx),k),func(s,arr.get(lastIdx)+1,end,k));
                for(int i=firstIdx+1;i<=lastIdx;++i){
                    result=Math.max(result,func(s,arr.get(i-1)+1,arr.get(i),k));
                }
                return result;
            }
        }
        return end-start;
    }
    
    private int getIdx(List<Integer> arr,int num){
        int l=0,r=arr.size()-1;
        while(l<r){
            int mid=(l+r)>>1;
            if(arr.get(mid)<num){
                l=mid+1;
            }else if(arr.get(mid)>num){
                r=mid;
            }else{
                return mid;
            }
        }
        return l;
    }
}
