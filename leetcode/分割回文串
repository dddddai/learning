给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。

返回 s 所有可能的分割方案。

示例:

输入: "aab"
输出:
[
  ["aa","b"],
  ["a","a","b"]
]



class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        self.result=[]
        self.func(s,0,[])
        return self.result
        
    def func(self,s,start,candidates):
        if start==len(s):
            self.result.append(candidates)
        
        for i in xrange(start,len(s)):
            if self.isPalindrome(s,start,i):
                self.func(s,i+1,candidates+[s[start:i+1]])
                
            
    def isPalindrome(self,s,startIdx,endIdx):
        l,r=startIdx,endIdx
        while(l<r):
            if s[l]!=s[r]:
                return False
            l+=1
            r-=1
        
        return True
        
        
        

class Solution {
    private List<List<String>> result=new ArrayList<>();
    private int[][] memory;
    
    public List<List<String>> partition(String s) {
        memory=new int[s.length()][s.length()];
        for(int[] row:memory){
            Arrays.fill(row,-1);
        }
        func(s,0,new ArrayList<>());
        return result;
    }
    
    private void func(String s,int start,List<String> candidates){
        if(start==s.length()){
            result.add(new ArrayList(candidates));
        }
        for(int i=start;i<s.length();++i){
            if(isPalindrome(s,start,i)){
                candidates.add(s.substring(start,i+1));
                func(s,i+1,candidates);
                candidates.remove(candidates.size()-1);
            }
        }
    }
    
    private boolean isPalindrome(String s,int startIdx,int endIdx){
        if(memory[startIdx][endIdx]==-1){
            int l=startIdx,r=endIdx;
            while(l<r){
                if(s.charAt(l++)!=s.charAt(r--)){
                    memory[startIdx][endIdx]=0;
                    return false;
                }
            }
            memory[startIdx][endIdx]=1;
            return true;
        }
        return memory[startIdx][endIdx]!=0;
    }
}
