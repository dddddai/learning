给定一个包括 n 个整数的数组 nums 和 一个目标值 target。
找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。
假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        nums.sort()
        size=len(nums)
        result=nums[0]+nums[1]+nums[2]
        for i in range(size-2):
            l,r=i+1,size-1
            while l<r:
                cur_sum=nums[l]+nums[r]+nums[i]
                if abs(cur_sum-target)<abs(result-target):
                    result=cur_sum
                if cur_sum>target:
                    r-=1
                elif cur_sum<target:
                    l+=1
                else:
                    return cur_sum
        return result
