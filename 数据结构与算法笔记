大小写字母、数字的ASCII码值：

a-z：97-122

A-Z：65-90

0-9：48-57

print( c + " 的ASCII 码为", ord(c))
print( a , " 对应的字符为", chr(a))


python去除字符串中间空格的方法

a = ''.join(a.split())

python的set和其他语言类似, 是一个无序不重复元素集, 基本功能包括关系测试和消除重复元素. 
集合对象还支持union(联合), intersection(交), difference(差)和sysmmetric difference(对称差集)
等数学运算.
 
sets 支持 x in set, len(set),和 for x in set。作为一个无序的集合，sets不记录元素位置或者插入点。
因此，sets不支持 indexing, slicing, 或其它类序列（sequence-like）的操作。
 

 
下面来点简单的小例子说明把。
 
>>> x = set('spam')
>>> y = set(['h','a','m'])
>>> x, y
(set(['a', 'p', 's', 'm']), set(['a', 'h', 'm']))
 
再来些小应用。
 
>>> x & y # 交集
set(['a', 'm'])
 
>>> x | y # 并集
set(['a', 'p', 's', 'h', 'm'])
 
>>> x - y # 差集
set(['p', 's'])
 
记得以前个网友提问怎么去除海量列表里重复元素，用hash来解决也行，只不过感觉在性能上不是很高，
用set解决还是很不错的，示例如下：
 
>>> a = [11,22,33,44,11,22]
>>> b = set(a)
>>> b
set([33, 11, 44, 22])
>>> c = [i for i in b]
>>> c
[33, 11, 44, 22]

-------------------------------------------------
高阶函数的用法
result=sorted(result.iteritems(), key=lambda x: x[0])   这里第一个参数是一个可迭代对象，
第二个参数是比较的值，默认升序。这里result是一个字典，按字典的键值排序


>>> map(lambda x:x *2, [1,2,3])
[2, 4, 6]
>>> map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9])
['1', '2', '3', '4', '5', '6', '7', '8', '9']
>>> filter(lambda x:x %2 ==0,range(10))   保留True值
[0, 2, 4, 6, 8]

把一个序列中的空字符串删掉，可以这么写：

def not_empty(s):
    return s and s.strip()

filter(not_empty, ['A', '', 'B', None, 'C', '  '])
# 结果: ['A', 'B', 'C']


reduce把结果继续和序列的下一个元素做累积计算，其效果就是：
reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

如果要把序列[1, 3, 5, 7, 9]变换成整数13579，reduce就可以派上用场：

>>> def fn(x, y):
     return x * 10 + y
>>> reduce(fn, [1, 3, 5, 7, 9])
13579


把str转换为int的函数：
def str2int(s):
    def fn(x, y):
        return x * 10 + y
    def char2num(s):
        return {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}[s]
return reduce(fn, map(char2num, s))

zip:
#长度不等时，取长度的最小的

x = [1, 2, 3]
y = ['a', 'b', 'c', 'd']
xy = zip(x, y)
print xy

#结果是：
[(1, 'a'), (2, 'b'), (3, 'c')]



x = [[1,2,3],
     [4,5,6],
     [7,8,9]]
y = zip(*x)
print y

#结果是：
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]

#转置就是：
map(list, y) 
-----------------------------------------------------------------------

整数转换为任意进制字符串
   
def toStr(n,base):            用递归
   convertString = "0123456789ABCDEF"
   if n < base:
      return convertString[n]
   else:
      return toStr(n//base,base) + convertString[n%base]

print(toStr(1453,16))
------------------------------
from pythonds.basic.stack import Stack        用栈实现

rStack = Stack()

def toStr(n,base):
    convertString = "0123456789ABCDEF"
    while n > 0:
        if n < base:
            rStack.push(convertString[n])
        else:
            rStack.push(convertString[n % base])
        n = n // base
    res = ""
    while not rStack.isEmpty():
        res = res + str(rStack.pop())
    return res

print(toStr(1453,16))


回文检查

from pythonds.basic.deque import Deque  首先要实现deque的数据结构，即双向队列

这里假定 deque 的尾部在列表中的位置为 0


def palchecker(aString):
    chardeque = Deque()

    for ch in aString:
        chardeque.addRear(ch)

    stillEqual = True

    while chardeque.size() > 1 and stillEqual:
        first = chardeque.removeFront()
        last = chardeque.removeRear()
        if first != last:
            stillEqual = False

    return stillEqual

print(palchecker("lsdkjfskf"))
print(palchecker("radar"))

买卖股票的最佳时机 II

这个问题可以被看作找到数组中所有的上升序列问题。例如，对于给定的5，1，2，3，4
从1买进然后从4卖出，和从1买进，2卖出，2买进，3卖出效果是一样的.
所以我们遍历一遍数组，找到所有上升的的序列

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        profit=0
        for i in range(1,len(prices)):
            if prices[i]>prices[i-1]:
                profit+=prices[i]-prices[i-1]
        return profit

旋转数组
给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:
输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]

看到有人用reverse，这个想法很巧妙，具体如下： 
　举一个例子： 
　　1 2 3 4 5 6 7　　如果k = 3 的话， 会变成 5 6 7 1 2 3 4 
　　7 6 5 4 3 2 1　　先翻转整个数组 
　　5 6 7 4 3 2 1　　翻转前k个数字 
　　5 6 7 1 2 3 4　　翻转后面几个数字

class Solution(object):
    def rotate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        if k>=len(nums):
            k%=len(nums)
        nums.reverse()
        nums[:k]=reversed(nums[:k])
        nums[k:]=reversed(nums[k:])


移动零
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

示例:

输入: [0,1,0,3,12]
输出: [1,3,12,0,0]

class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        for i in nums:
            if i==0:
                nums.remove(0)
                nums.append(0)
remove函数一次只去除一个
----------------------------------------------------------

判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

1.数字 1-9 在每一行只能出现一次。
2.数字 1-9 在每一列只能出现一次。
3.数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:

[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        seen = []
        for i, row in enumerate(board):   i为行数
            for j, c in enumerate(row):    j为列数
                if c != '.':
                    if (c,j) in seen or (i,c) in seen or (i/3,j/3,c) in seen:
                        return False    如果有重复，那就错
                    seen += [(c,j),(i,c),(i/3,j/3,c)]   
把每个点在每行每列和每个3*3宫内存在的信息记录下来（妙！实在是妙！）
        return True


旋转图像
给定一个 n × n 的二维矩阵表示一个图像。

将图像顺时针旋转 90 度。

说明：

你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。

示例 1:

给定 matrix = 
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

原地旋转输入矩阵，使其变为:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
示例 2:

给定 matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
], 

原地旋转输入矩阵，使其变为:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]
先将数组按照正对角线对称，再对每一行的向量进行反转，即可得到旋转90度的结果。


class Solution(object):
    def rotate(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: void Do not return anything, modify matrix in-place instead.
        """
        n=len(matrix)
        for i in range(n):
            for j in range(i):    遍历左下三角形，i是交换的次数（包括对角线自身交换）
                matrix[i][j],matrix[j][i]=matrix[j][i],matrix[i][j]
        for k in matrix:
            k.reverse()


验证回文字符串
给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。

说明：本题中，我们将空字符串定义为有效的回文串。

示例 1:

输入: "A man, a plan, a canal: Panama"
输出: true
示例 2:

输入: "race a car"
输出: false

class Solution(object):
    def isPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        s=s.lower()
        s=''.join(s.split())
        s1=[]
        for i in s:
            if i.isalnum():   选择字母和数字
                s1.append(i)
        return s1==s1[::-1]

用最少的硬币找零
假设你是一个自动售货机制造商的程序员。你的公司希望通过给每个交易最少硬币来简化工作。
假设客户放入 1 美元的钞票并购买 37 美分的商品。你可以用来找零的最小数量的硬币是多少？
答案是六个硬币：两个 25 美分，一个 10美分 和 三个一美分

用一个动态规划算法来解决我们的找零问题。 dpMakeChange 有三个参数：一个有效硬币值的列表，
我们要求的找零额，以及一个包含每个值所需最小硬币数量的列表。 当函数完成时，
minCoins 将包含从 0 到找零值的所有值的解。

def dpMakeChange(coinValueList,change):
   minCoins={}    minCoins用来记录每个cents的最小所需硬币数
   for cents in range(change+1):    遍历所有小于等于change的值，计算出它们的最小所需硬币数
      coinCount = cents  先让硬币数处于最坏情况，即全用1的硬币
      for j in [c for c in coinValueList if c <= cents]: 选出所有小于等于cents的可用硬币
            minCoins[cents]=cents   先让cents的硬币数处于最坏情况，即全用1的硬币
            if minCoins[cents-j] + 1 < coinCount:
如果用j这1枚硬币加上统计过的cents-j所需的最小硬币数小于当前的硬币数的话，就刷新当前硬币数
               coinCount = minCoins[cents-j]+1
      minCoins[cents] = coinCount    这样所有的cents的最小所需硬币数都被记录下来
   return minCoins[change]
print(dpMakeChange([1,5,10,25],63))


删除链表中的节点
请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。

现有一个链表 -- head = [4,5,1,9]，它可以表示为:

    4 -> 5 -> 1 -> 9
示例 1:

输入: head = [4,5,1,9], node = 5
输出: [4,1,9]
解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.


# Definition for singly-linked list.
# class ListNode(object):
#      def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def deleteNode(self, node):
        """
        :type node: ListNode
        :rtype: void Do not return anything, modify node in-place instead.
        """
        node.val=node.next.val
        node.next=node.next.next



翻转单链表
'''
开始以单链表的第一个元素为循环变量cur,并设置2个辅助变量tmp,保存数据;
newhead,新的翻转链表的表头。
时间消耗O(n),空间消耗O(1)
'''
 
def reverse_linkedlist2(head):
    if head == None or head.next == None: #边界条件
        return head
    cur = head #循环变量
    tmp = None #保存数据的临时变量
    newhead = None #新的翻转单链表的表头
    while cur:
        tmp = cur.next 
        cur.next = newhead
        newhead = cur   # 更新 新链表的表头
        cur = tmp
    return newhead



判断链表是否有环
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        quick=head
        slow=head
        if not head:
            return False
        while True:
            if not (quick and quick.next):
                return False
            quick=quick.next.next
            slow=slow.next
            if quick==slow:
                return True
        return False

求二叉树的深度
class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if not root :
            return 0
        return max(self.maxDepth(root.left),self.maxDepth(root.right))+1
        
        
对称二叉树
给定一个二叉树，检查它是否是镜像对称的。
class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        def isSame(p1,p2):
            if not p1 and not p2:
                return True
            if (p1 and p2) and p1.val==p2.val:
                return isSame(p1.left,p2.right) and isSame(p1.right,p2.left)
            return False
        return isSame(root.left,root.right)
        

验证二叉搜索树
给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
隔层也要满足！！！

class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def testValid(root,minimum,maximum):
            if not root:
                return True
            if minimum<root.val<maximum:
                return testValid(root.left,minimum,root.val) 
                and testValid(root.right,root.val,maximum)
            return False
        return testValid(root,-2**32,2**32-1)
 妙啊！！


 最大子序和
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        for i in range(1,len(nums)):
            max_sum=max(nums[i]+nums[i-1],nums[i])
            nums[i]=max_sum
        return max(nums)

打家劫舍
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2:

输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
     
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        now = last = 0
        for i in nums:
            last, now = now, max(i+last, now)
        return now


统计所有小于非负整数 n 的质数的数量

class Solution(object):
    def countPrimes(self, n):
        """
        :type n: int
        :rtype: int
        """
        if n<3:
            return 0
        prime=[1]*n
        prime[0]=prime[1]=0
        for i in range(2,int(n**0.5)+1):
            if prime[i]:
                prime[i*i::i]=[0]*len(prime[i*i::i])
        return sum(prime)
        
给定一个整数，写一个函数来判断它是否是 3 的幂次方

class Solution(object):
    def isPowerOfThree(self, n):
        """
        :type n: int
        :rtype: bool
        """
        if n<1:
            return False
        return not 3**19%n      3**19是int范围内最大的3的幂
        
字典的key按照value排序：
dict={'a':2,'b':4,'c':1,'d':0}
print sorted(dict,key=dict.__getitem__)

中序遍历二叉树

class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        result=[]
        if root is None:
            return []
        result.extend(self.inorderTraversal(root.left))
        result.append(root.val)
        result.extend(self.inorderTraversal(root.right))
        return result
        
        
        
编写一个程序，找到两个单链表相交的起始节点。

 

例如，下面的两个链表：

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3


class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        p1 = headA
        p2 = headB
        while(p1 != p2):
            p1=headB if p1 is None else p1.next
            p2=headA if p2 is None else p2.next
        return p1

p1 p2一定会相遇，妙！！！！


已知先序和后序，不能唯一确定二叉树，因为它只是反映了结点之间的父子关系，没有反映出左右关系。
已知先序或后序，而又知中序，则能唯一确定二叉树
先序、中序相同时，二叉树没有左子树
后序、中序相同时，二叉树没有右子树
后序、先序相同时，只有一个根节点


数的子结构
输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）

class Solution:
    def HasSubtree(self, pRoot1, pRoot2):
        # write code here
        def is_same(node1,node2):
            if node2 is None:
                return True
            if node1 is None:
                return False
            if node1.val==node2.val:
                return is_same(node1.left,node2.left) and is_same(node1.right,node2.right)
            return False
        if not(pRoot1 and pRoot2):
            return False
        return is_same(pRoot1,pRoot2) or self.HasSubtree(pRoot1.left,pRoot2)\
               or self.HasSubtree(pRoot1.right,pRoot2)
           
           
操作给定的二叉树，将其变换为源二叉树的镜像。

class Solution:
    # 返回镜像树的根节点
    def Mirror(self, root):
        # write code here
        if root is None:
            return
        root.left,root.right=self.Mirror(root.right),self.Mirror(root.left)
        return root
