递归:
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        result=[]
        if root is None:
            return []
        result.extend(self.inorderTraversal(root.left))
        result.append(root.val)
        result.extend(self.inorderTraversal(root.right))
        return result
        

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<>();
        if(root==null)
            return result;
        result.addAll(inorderTraversal(root.left));
        result.add(root.val);
        result.addAll(inorderTraversal(root.right));
        return result;
    }
}


非递归:

class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if root is None:
            return []
        stack=[]
        result=[]
        cur=root
        
        while stack or cur:
            while cur:
                stack.append(cur)
                cur=cur.left
            node=stack.pop()
            result.append(node.val)
            cur=node.right
            
        return result
        
        
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> stack=new Stack<>();
        List<Integer> result=new ArrayList<>();
        TreeNode cur=root;
        while(!stack.empty() || cur!=null)
        {
            while(cur!=null)
            {
                stack.push(cur);
                cur=cur.left;
            }
            TreeNode node=stack.pop();
            result.add(node.val);
            cur=node.right;
        }
        return result;
    }
}        
