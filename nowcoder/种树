小多想在美化一下自己的庄园。他的庄园毗邻一条小河，他希望在河边种一排树，共 M 棵。小多采购了 N 个品种的树，
每个品种的数量是 Ai (树的总数量恰好为 M)。但是他希望任意两棵相邻的树不是同一品种的。小多请你帮忙设计一种满足要求的种树方案。

输入描述:
第一行包含一个正整数 N，表示树的品种数量。
第二行包含 N 个正整数，第 i (1 <= i <= N) 个数表示第 i 个品种的树的数量。
数据范围：
1 <= N <= 1000
1 <= M <= 2000

输出描述:
输出一行，包含 M 个正整数，分别表示第 i 棵树的品种编号 (品种编号从1到 N)。
若存在多种可行方案，则输出字典序最小的方案。
若不存在满足条件的方案，则输出"-"。

示例1

输入
3
4 2 1

输出
1 2 1 2 1 3 1




import java.util.*;

public class Main{
    private static List<Integer> result;
    
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        sc.nextLine();
        result=new ArrayList<>(n);
        int[] arr=new int[n];
        int m=0;
        for(int i=0;i<n;++i){
            arr[i]=sc.nextInt();
            m+=arr[i];
        }
        sc.close();
        if(dfs(arr,0,m)){
            System.out.print(result.get(0));
            for(int i=1;i<m;++i){
                System.out.print(" "+result.get(i));
            }
        }else{
            System.out.print('-');
        }
    }
    
    private static boolean dfs(int[] arr,int idx,int m){
        if(idx==m){
            return true;
        }
        for(int i=0;i<arr.length;++i){
            if(arr[i]>((m-idx+1)>>1)){        //剪枝
                return false;
            }
        }
        for(int i=0;i<arr.length;++i){
            if(arr[i]>0 && (idx==0 || i+1!=result.get(idx-1))){
                result.add(i+1);
                --arr[i];
                if(dfs(arr,idx+1,m)){
                    return true;
                }
                result.remove(idx);
                ++arr[i];
            }
        }
        return false;
    }
}
