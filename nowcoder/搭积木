小明有一袋子长方形的积木，如果一个积木A的长和宽都不大于另外一个积木B的长和宽，则积木A可以搭在积木B的上面。
好奇的小明特别想知道这一袋子积木最多可以搭多少层，你能帮他想想办法吗？
定义每一个长方形的长L和宽W都为正整数，并且1 <= W <= L <= INT_MAX, 袋子里面长方形的个数为N, 并且 1 <= N <= 1000000.
假如袋子里共有5个积木分别为 (2, 2), (2, 4), (3, 3), (2, 5), (4, 5), 
则不难判断这些积木最多可以搭成4层, 因为(2, 2) < (2, 4) < (2, 5) < (4, 5)。

输入描述:
第一行为积木的总个数 N
之后一共有N行，分别对应于每一个积木的宽W和长L


输出描述:
输出总共可以搭的层数

示例1

输入
5
2 2
2 4
3 3
2 5
4 5

输出
4



import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        sc.nextLine();
        Rectangle[] arr=new Rectangle[n];
        for(int i=0;i<n;++i){
            arr[i]=new Rectangle(sc.nextInt(),sc.nextInt());
        }
        sc.close();
        Arrays.sort(arr,(a,b) -> a.length-b.length);
        List<Integer> tmp=new ArrayList<>(n);
        for(Rectangle rect:arr){
            int l=0,r=tmp.size()-1;
            while(l<=r){
                int mid=(l+r)>>1;
                if(rect.width<tmp.get(mid)){
                    r=mid-1;
                }else{
                    l=mid+1;
                }
            }
            if(l<tmp.size()){
                tmp.set(l,rect.width);
            }else{
                tmp.add(rect.width);
            }
        }
        System.out.print(tmp.size());
    }
    
    private static class Rectangle{
        int length,width;
        public Rectangle(int width,int length){
            this.width=width;
            this.length=length;
        }
    }
}
