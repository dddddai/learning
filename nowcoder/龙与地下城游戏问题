给定一个二维数组map，含义是一张地图
 
游戏的规则如下:
1）骑士从左上角出发，每次只能向右或向下走，最后到达右下角见到公主。
2）地图中每个位置的值代表骑士要遭遇的事情。如果是负数，说明此处有怪兽，要让骑士损失血量。如果是非负数，代表此处有血瓶，能让骑士回血。
3）骑士从左上角到右下角的过程中，走到任何一个位置时，血量都不能少于1。
为了保证骑土能见到公主，初始血量至少是多少?


输入描述:
第一行两个正整数n，m 
接下来n行，每行m个整数，代表map中的元素

输出描述:
输出一个整数，表示答案。

示例1

输入
3 3
-2 -3 3
-5 -10 1
0 30 -5

输出
7

示例2

输入
2 2
1 1
1 1

输出
1




import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt(),m=sc.nextInt();
        int[][] map=new int[n][m];
        int[] dp=new int[m];
        for(int i=0;i<n;++i){
            for(int j=0;j<m;++j){
                map[i][j]=sc.nextInt();
            }
        }
        sc.close();
        dp[m-1]=map[n-1][m-1]<0 ? 1-map[n-1][m-1] : 1;
        for(int i=m-2;i>=0;--i){
            dp[i]=dp[i+1]>map[n-1][i] ? dp[i+1]-map[n-1][i] : 1;
        }
        for(int i=n-2;i>=0;--i){
            dp[m-1]=dp[m-1]>map[i][m-1] ? dp[m-1]-map[i][m-1] : 1;
            for(int j=m-2;j>=0;--j){
                int left=dp[j+1]>map[i][j] ? dp[j+1]-map[i][j] : 1;
                int up=dp[j]>map[i][j] ? dp[j]-map[i][j] : 1;
                dp[j]=Math.min(left,up);
            }
        }
        System.out.print(dp[0]);
    }
}
