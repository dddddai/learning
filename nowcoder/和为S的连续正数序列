题目描述
小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。
但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,
他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的
找出所有和为S的连续正数序列? Good Luck!
输出描述:
输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序



双指针法：

class Solution:
    def FindContinuousSequence(self, tsum):
        if tsum<3:
            return []
        result=[]
        start,end,cur_sum=1,2,3
        mid=tsum/2.
        while start<mid:
            if cur_sum<tsum:
                end+=1
                cur_sum+=end
            elif cur_sum>tsum:
                cur_sum-=start
                start+=1
            else:
                result.append(range(start,end+1))  #python2的range
                cur_sum-=start
                start+=1
                end+=1
                cur_sum+=end
        return result








数学方法：

当长度为奇数时，若sum能够整除长度，则此长度必然对应一个序列
当长度为偶数时，若sum对长度的余数等于0.5*长度，则此长度必然对应一个序列


class Solution:
    def FindContinuousSequence(self, tsum):
        if tsum<3:
            return []
        result=[]
        for size in xrange(int((2*tsum)**0.5),1,-1):
            if (size&1 and tsum%size==0) or tsum%size==0.5*size:
                result.append(range(tsum//size-((size-1)>>1),tsum//size+(size>>1)+1))
        return result




import java.util.ArrayList;

public class Solution {
    public ArrayList<ArrayList<Integer>> FindContinuousSequence(int sum) {
        if(sum<3)
            return new ArrayList<ArrayList<Integer>>();
        ArrayList<ArrayList<Integer>> result=new ArrayList<>();
        for(int size=(int)Math.sqrt(sum<<1);size>=2;--size)
        {
            if(((size&1)==1 && sum%size==0) || sum%size==size*0.5)
            //当长度为奇数时，若sum能够整除长度，则此长度必然对应一个序列
            //当长度为偶数时，若sum对长度的余数等于0.5*长度，则此长度必然对应一个序列
            {
                ArrayList<Integer> candidates=new ArrayList<>();
                int start=sum/size-((size-1)>>1);
                int end=sum/size+(size>>1);
                for(int n=start;n<=end;++n)
                    candidates.add(n);
                result.add(candidates);
            }
        }
        return result;
    }
}
