给定一个数组 nums，其中有 n 个非负整数。你的目的是进行两次操作，使得数组的元素之和最小。
每次操作形如：任选一个整数 x ，将数组中所有大于等于 x 的数减去 x 。


示例1
输入
[2,1,3]

输出
0

说明
初始数组为 [2, 1, 3]。
先选择 x = 2，则所有大于等于 2 的元素减去 2 ，变成 [0, 1, 1]。
再选择 x = 1，则所有大于等于 1 的元素减去 1 ，变成 [0, 0, 0]。
所以数组元素之和的最小值为 0。



假设两次选的数为a和b
被减的可以分成3部分：
第1部分只被减了a
第2部分只被减了b
第3部分被减了a+b

要减得最多，a、b、a+b其中必然有2个数在nums中



import java.util.*;

public class Solution {
    public long minimumValueAfterDispel (int[] nums) {
        long sum=0;
        long max=0;
        Arrays.sort(nums);
        for(int i=0;i<nums.length;++i){
            sum+=nums[i];
            for(int j=i;j<nums.length;++j){
                int k=getIdx(nums,j,nums.length-1,nums[i]+nums[j]);
                max=Math.max(max,(long)nums[i]*(j-i)+
                                (long)nums[j]*(k-j)+
                                ((long)nums[i]+nums[j])*(nums.length-k));
            }
        }
        for(int i=0;i<nums.length;++i){
            for(int k=i;k<nums.length;++k){
                int j=getIdx(nums,i,k,nums[k]-nums[i]);
                max=Math.max(max,(long)nums[i]*(j-i)+
                                (long)(nums[k]-nums[i])*(k-j)+
                                (long)nums[k]*(nums.length-k));
            }
        }
        for(int j=0;j<nums.length;++j){
            for(int k=j;k<nums.length;++k){
                int i=getIdx(nums,0,j,nums[k]-nums[j]);
                max=Math.max(max,(long)(nums[k]-nums[j])*(j-i)+
                                (long)nums[j]*(k-j)+
                                (long)nums[k]*(nums.length-k));
            }
        }
        return sum-max;
    }
    
    private int getIdx(int[] nums,int l,int r,long target){
        while(l<r){
            int mid=(l+r)>>1;
            if(nums[mid]<target){
                l=mid+1;
            }else{
                r=mid;
            }
        }
        return nums[l]>=target ? l:l+1;
    }
}
