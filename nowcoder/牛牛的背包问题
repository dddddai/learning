牛牛准备参加学校组织的春游, 出发前牛牛准备往背包里装入一些零食, 牛牛的背包容量为w。
牛牛家里一共有n袋零食, 第i袋零食体积为v[i]。
牛牛想知道在总体积不超过背包容量的情况下,他一共有多少种零食放法(总体积为0也算一种放法)。

输入描述:
输入包括两行
第一行为两个正整数n和w(1 <= n <= 30, 1 <= w <= 2 * 10^9),表示零食的数量和背包的容量。
第二行n个正整数v[i](0 <= v[i] <= 10^9),表示每袋零食的体积。


输出描述:
输出一个正整数, 表示牛牛一共有多少种零食放法。

示例1

输入
3 10
1 2 4

输出
8

说明：
三种零食总体积小于10,于是每种零食有放入和不放入两种情况，一共有2*2*2 = 8种情况。




import java.util.*;

public class Main{
    private static int result=1;
    
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        long w = sc.nextLong();
        List<Integer> arr=new ArrayList<>(n);
        long sum=0;
        sc.nextLine();
        for(int i=0;i<n;++i){
            int v=sc.nextInt();
            if(v<=w){
                arr.add(v);
                sum+=v;
            }
        }
        if(sum<=w){
            System.out.print(1<<arr.size());
            return;
        }
        Collections.sort(arr);
        dfs(arr,w,0);
        System.out.print(result);
    }
    
    private static void dfs(List<Integer> arr,long w,int start){
        for(int i=start;i<arr.size();++i){
            if(arr.get(i)>w){
                return;
            }
            ++result;
            dfs(arr,w-arr.get(i),i+1);
        }
    }
}
