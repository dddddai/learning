题目描述
有n个房间，现在i号房间里的人需要被重新分配，分配的规则是这样的：
先让i号房间里的人全都出来，接下来按照 i+1, i+2, i+3, ... 的顺序依此往这些房间里放一个人，
n号房间的的下一个房间是1号房间，直到所有的人都被重新分配。
现在告诉你分配完后每个房间的人数以及最后一个人被分配的房间号x，你需要求出分配前每个房间的人数。数据保证一定有解，若有多解输出任意一个解。

输入描述:
第一行两个整数n, x (2<=n<=10^5, 1<=x<=n)，代表房间房间数量以及最后一个人被分配的房间号；
第二行n个整数 a_i(0<=a_i<=10^9) ，代表每个房间分配后的人数。

输出描述:
输出n个整数，代表每个房间分配前的人数。

示例1

输入
3 1
6 5 1

输出
4 4 4


人数最少的房间就是i号房间，若有多个房间人数等于最小值，则从x号房间往前遍历，第一个遇到的最小值对应的下标就是i号房间
i号房间的人数就是分配的轮数


import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt(),x=sc.nextInt()-1;
        sc.nextLine();
        long[] arr=new long[n];
        long min=Long.MAX_VALUE;
        for(int i=0;i<n;++i){
            arr[i]=sc.nextLong();
            min=Math.min(min,arr[i]);
        }
        int idx=x;
        while(arr[idx]!=min){
            idx= idx==0 ? n-1:idx-1;
        }
        for(int i=0;i<n;++i){
            arr[i]-=min;
        }
        int remainder=0;
        for(int i=x;i!=idx;i= i==0 ? n-1:i-1){
            --arr[i];
            ++remainder;
        }
        arr[idx]+=n*min+remainder;
        for(long num:arr){
            System.out.print(num+" ");
        }
    }
}
