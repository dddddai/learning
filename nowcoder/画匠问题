给定一个整型数组arr, 数组中的每个值都为正数，表示完成一幅画作需要的时间，再给定一个整数num，
表示画匠的数量，每个画匠只能画连在一起(即数组内连续的一段)的画作。
所有画家并行工作，请返回完成所有的画作的最少时间。


输入描述:
第一行两个整数N, K表示数组大小，画匠的数量。
接下来一行N个整数表示完成每幅画作所需要的时间。


输出描述:
输出一个整数表示答案


示例1

输入
3 2
3 1 4

输出
4

说明
最好的分配方式为第一个画匠画3和1，所需时间为4，第二个画匠画4，所需时间为4。
因为并行工作，所以最少时间为4，如果分配方式为第一个画匠画3，所需时间为3，
第二个画匠画1和4，所需的时间为5，那么最少时间为5，显然没有第一种分配方式好，所以返回4


示例2

输入
5 3
1 1 1 4 3

输出
4

说明
最好的分配方式为第一个画匠画前三个1，所需时间为3，第二个画匠画4，所需时间为4，第三个画匠画3，所需时间为3，返回4


示例3

输入
5 2
99 82 44 35 3

输出
164

说明
[99] [82 44 35 3]





import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt(),k=sc.nextInt();
        long[] arr=new long[n];
        long low=0,high=0;
        for(int i=0;i<n;++i){
            arr[i]=sc.nextLong();
            low=Math.max(low,arr[i]);
            high+=arr[i];
        }
        sc.close();
        while(low<high){
            long mid=(low+high)>>1;
            long sum=0;
            int cnt=0;
            for(long num:arr){
                if(sum+num>mid){
                    sum=num;
                    if(++cnt>=k){
                        low=mid+1;
                        break;
                    }
                }else{
                    sum+=num;
                }
            }
            if(++cnt<=k){
                high=mid;
            }
        }
        System.out.print(low);
    }
}
