题目描述
有n只小熊，他们有着各不相同的战斗力。每次他们吃糖时，会按照战斗力来排，战斗力高的小熊拥有优先选择权。
前面的小熊吃饱了，后面的小熊才能吃。每只小熊有一个饥饿值，每次进食的时候，小熊们会选择最大的能填饱自己当前饥饿值的那颗糖来吃，
可能吃完没饱会重复上述过程，但不会选择吃撑。
现在给出n只小熊的战斗力和饥饿值，并且给出m颗糖能填饱的饥饿值。
求所有小熊进食完之后，每只小熊剩余的饥饿值。

输入描述:
第一行两个正整数n和m，分别表示小熊数量和糖的数量。（n <= 10, m <= 100）
第二行m个正整数，每个表示着颗糖能填充的饥饿值。
接下来的n行，每行2个正整数，分别代表每只小熊的战斗力和当前饥饿值。
题目中所有输入的数值小于等于100。

输出描述:
输出n行，每行一个整数，代表每只小熊剩余的饥饿值。

示例1

输入
2 5
5 6 10 20 30
4 34
3 35

输出
4
0

说明：
第一只小熊吃了第5颗糖
第二只小熊吃了第4颗糖
第二只小熊吃了第3颗糖
第二只小熊吃了第1颗糖



import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt(),m=sc.nextInt();
        sc.nextLine();
        TreeMap<Integer,Integer> candy=new TreeMap<>();
        for(int i=0;i<m;++i){
            Integer key=sc.nextInt();
            Integer cnt=candy.get(key);
            candy.put(key,cnt==null ? 1:cnt+1);
        }
        sc.nextLine();
        Bear[] arr=new Bear[n];
        for(int i=0;i<n;++i){
            arr[i]=new Bear(i,sc.nextInt(),sc.nextInt());
            sc.nextLine();
        }
        sc.close();
        Arrays.sort(arr,(a,b) -> b.power-a.power);
        int idx=0;
        for(Bear bear:arr){
            while(true){
                Integer key=candy.containsKey(bear.hunger) ? 
                            bear.hunger : candy.lowerKey(bear.hunger);
                if(key==null || bear.hunger<key){
                    break;
                }
                Integer cnt=candy.get(key);
                if(cnt==1){
                    candy.remove(key);
                }else{
                    candy.put(key,cnt-1);
                }
                bear.hunger-=key;
            }
        }
        Arrays.sort(arr,(a,b) -> a.idx-b.idx);
        for(Bear bear:arr){
            System.out.println(bear.hunger);
        }
    }
    
    static class Bear{
        int idx,power,hunger;
        
        public Bear(int idx,int power,int hunger){
            this.idx=idx;
            this.power=power;
            this.hunger=hunger;
        }
    }
}
