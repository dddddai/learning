题目描述
为了不断优化推荐效果，今日头条每天要存储和处理海量数据。假设有这样一种场景：
我们对用户按照它们的注册时间先后来标号，对于一类文章，每个用户都有不同的喜好值，
我们会想知道某一段时间内注册的用户（标号相连的一批用户）中，有多少用户对这类文章喜好值为k。
因为一些特殊的原因，不会出现一个查询的用户区间完全覆盖另一个查询的用户区间(不存在L1<=L2<=R2<=R1)。

输入描述:
输入： 第1行为n代表用户的个数 
第2行为n个整数，第i个代表用户标号为i的用户对某类文章的喜好度 
第3行为一个正整数q代表查询的组数  第4行到第（3+q）行，每行包含3个整数l,r,k代表一组查询，
即标号为l<=i<=r的用户中对这类文章喜好值为k的用户的个数。 数据范围n <= 300000,q<=300000 k是整型

输出描述:
输出：一共q行，每行一个整数代表喜好值为k的用户的个数

示例1

输入
5
1 2 3 3 5
3
1 2 1
2 4 5
3 5 3

输出
1
0
2



import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        sc.nextLine();
        Map<Integer,List<Integer>> map=new HashMap<>(n);
        for(int i=1;i<=n;++i){
            int key=sc.nextInt();
            List<Integer> arr=map.get(key);
            if(arr==null){
                List<Integer> tmp=new ArrayList<>();
                tmp.add(i);
                map.put(key,tmp);
            }else{
                arr.add(i);
            }
        }
        sc.nextLine();
        int q=sc.nextInt();
        Set<Integer> visited=new HashSet<>(q);
        sc.nextLine();
        for(int i=0;i<q;++i){
            int l=sc.nextInt(),r=sc.nextInt(),k=sc.nextInt();
            sc.nextLine();
            List<Integer> arr=map.get(k);
            if(arr==null){
                System.out.println(0);
                continue;
            }
            if(!visited.contains(k)){
                Collections.sort(arr);
                visited.add(k);
            }
            System.out.println(getIdx(arr,r+0.5)-getIdx(arr,l-0.5));
        }
        sc.close();
    }
    
    private static int getIdx(List<Integer> arr,double num){
        int l=0,r=arr.size()-1;
        while(l<=r){
            int mid=(l+r)>>1;
            if(num<arr.get(mid)){
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        return l;
    }
}
