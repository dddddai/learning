给定一个无序数组arr，其中元素可正、可负、可0。给定一个整数k，求arr所有的子数组中累加和小于或等于k的最长子数组长度
例如：arr = [3, -2, -4, 0, 6], k = -2. 相加和小于等于-2的最长子数组为{3, -2, -4, 0}，所以结果返回4


输入描述:
第一行两个整数N, k。N表示数组长度，k的定义已在题目描述中给出
第二行N个整数表示数组内的数

输出描述:
输出一个整数表示答案


示例1

输入
5 -2
3 -2 -4 0 6

输出
4





import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt(),k=sc.nextInt();
        int[] arr=new int[n];
        List<Node> tmp=new ArrayList<>(n);
        tmp.add(new Node(-1,0));
        int sum=0;
        int maxSum=0;
        for(int i=0;i<n;++i){
            arr[i]=sc.nextInt();
            sum+=arr[i];
            if(sum>maxSum){
                maxSum=sum;
                tmp.add(new Node(i,sum));
            }
        }
        sc.close();
        sum=0;
        int result=0;
        for(int i=0;i<n;++i){
            sum+=arr[i];
            result=Math.max(result,i-getIdx(tmp,sum-k));
        }
        System.out.print(result);
    }
    
    //获得大于等于num的idx
    private static int getIdx(List<Node> tmp,int num){
        int l=0,r=tmp.size()-1;
        while(l<r){
            int mid=(l+r)>>1;
            if(tmp.get(mid).val<num){
                l=mid+1;
            }else if(tmp.get(mid).val>num){
                r=mid;
            }else{
                return tmp.get(mid).idx;
            }
        }
        return tmp.get(l).idx;
    }
    
    private static class Node{
        int idx,val;
        
        private Node(int idx,int val){
            this.idx=idx;
            this.val=val;
        }
    }
}
