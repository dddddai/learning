题目描述
字符串S由小写字母构成，长度为n。定义一种操作，每次都可以挑选字符串中任意的两个相邻字母进行交换。
询问在至多交换m次之后，字符串中最多有多少个连续的位置上的字母相同？

输入描述:
第一行为一个字符串S与一个非负整数m。(1 <= |S| <= 1000, 1 <= m <= 1000000)

输出描述:
一个非负整数，表示操作之后，连续最长的相同字母数量。

示例1

输入
abcbaa 2

输出
2

说明：
使2个字母a连续出现，至少需要3次操作。即把第1个位置上的a移动到第4个位置。
所以在至多操作2次的情况下，最多只能使2个b或2个a连续出现。



import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        char[] arr=sc.next().toCharArray();
        int m=sc.nextInt();
        sc.close();
        List<List<Integer>> map=new ArrayList<>(26);
        for(int i=0;i<26;++i){
            map.add(new ArrayList<>(arr.length>>1));
        }
        for(int i=0;i<arr.length;++i){
            map.get(arr[i]-'a').add(i);
        }
        int result=1;
        for(List<Integer> row:map){
            if(row.size()<=result){
                continue;
            }
            int[][] dp=new int[row.size()][row.size()];
            for(int len=2;len<=row.size();++len){
                int cnt=Integer.MAX_VALUE;
                for(int i=0;i+len<=row.size();++i){
                    dp[i][i+len-1]=dp[i+1][i+len-2]+row.get(i+len-1)-row.get(i)-len+1;
                    cnt=Math.min(cnt,dp[i][i+len-1]);
                }
                if(cnt<=m){
                    result=Math.max(result,len);
                }else{
                    break;
                }
            }
        }
        System.out.print(result);
    }
}






#include<iostream>
#include<string>
#include<vector>
using namespace std;

int main(){
    string s;
    int m;
    cin>>s>>m;
    vector<vector<int>> map;
    map.resize(26);
    for(int i=0;i<s.length();++i){
        map[s[i]-'a'].push_back(i);
    }
    int result=1;
    for(vector<int>& row:map){
        vector<vector<int>> dp(row.size());
        for(vector<int>& v:dp){
            v.resize(row.size());
        }
        for(int len=2;len<=row.size();++len){
            int cnt=1000001;
            for(int i=0;i+len<=row.size();++i){
                dp[i][i+len-1]=dp[i+1][i+len-2]+row[i+len-1]-row[i]-len+1;
                cnt=min(cnt,dp[i][i+len-1]);
            }
            if(cnt>m){
                break;
            }
            result=max(result,len);
        }
    }
    cout<<result;
    return 0;
}
