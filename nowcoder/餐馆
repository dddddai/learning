某餐馆有n张桌子，每张桌子有一个参数：a 可容纳的最大人数；
有m批客人，每批客人有两个参数:b人数，c预计消费金额。 
在不允许拼桌的情况下，请实现一个算法选择其中一部分客人，使得总预计消费金额最大

输入描述:
输入包括m+2行。 第一行两个整数n(1 <= n <= 50000),m(1 <= m <= 50000) 
第二行为n个参数a,即每个桌子可容纳的最大人数,以空格分隔,范围均在32位int范围内。
接下来m行，每行两个参数b,c。分别表示第i批客人的人数和预计消费金额,以空格分隔,范围均在32位int范围内。


输出描述:
输出一个整数,表示最大的总预计消费金额


示例1

输入
3 5 2 4 2 1 3 3 5 3 7 5 9 1 10

输出
20





import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt(),m=sc.nextInt();
        TreeMap<Integer,Integer> capacity=new TreeMap<>();
        for(int i=0;i<n;++i){
            Integer key=sc.nextInt();
            capacity.put(key,capacity.getOrDefault(key,0)+1);
        }
        Consumers[] group=new Consumers[m];
        for(int i=0;i<m;++i){
            group[i]=new Consumers(sc.nextInt(),sc.nextInt());
        }
        sc.close();
        Arrays.sort(group,(a,b) -> {
            if(a.expense==b.expense){
                return a.cnt-b.cnt;
            }
            return b.expense-a.expense;
        });
        long result=0;
        for(Consumers consumers:group){
            Map.Entry<Integer,Integer> table=capacity.ceilingEntry(consumers.cnt);
            if(table==null){
                continue;
            }if(table.getValue()==1){
                capacity.remove(table.getKey());
            }else{
                capacity.put(table.getKey(),table.getValue()-1);
            }
            result+=consumers.expense;
            if(capacity.isEmpty()){
                break;
            }
        }
        System.out.print(result);
    }
    
    private static class Consumers{
        int cnt,expense;
        
        private Consumers(int cnt,int expense){
            this.cnt=cnt;
            this.expense=expense;
        }
    }
}





#include<iostream>
#include<map>
#include<algorithm>
#include<vector>
using namespace std;

struct Consumer{
    int cnt,expense;
};

bool cmp(Consumer a,Consumer b){
	if(a.expense==b.expense){
            return a.cnt<b.cnt;
    }
    return a.expense>b.expense;
}

int main(){
    int n,m;
    cin>>n>>m;
    map<int,int> capacity;
    for(int i=0;i<n;++i){
	int idx;
	cin>>idx;
        ++capacity[idx];
    }
    vector<Consumer> group(m);
    for(int i=0;i<m;++i){
		cin>>group[i].cnt>>group[i].expense;
    }
	sort(group.begin(),group.end(),cmp);
    long result=0;
    for(int i=0;i<m;++i){
        auto table=capacity.find(group[i].cnt);
        if(table==capacity.end()){
            table=capacity.upper_bound(group[i].cnt);
            if(table==capacity.end()){
                continue;
            }
        }
        if(table->second==1){
            capacity.erase(table);
        }else{
            --table->second;
        }
        result+=group[i].expense;
        if(capacity.empty()){
            break;
        }
    }
    cout<<result;
    return 0;
}
