给定一个没有重复值的整形数组arr，初始时认为arr中每一个数各自都是一个单独的集合。
请设计一种叫UnionFind的结构，并提供以下两个操作。

boolean isSameSet(int a, int b): 查询a和b这两个数是否属于一个集合
void union(int a, int b): 把a所在的集合与b所在的集合合并在一起，原本两个集合各自的元素以后都算作同一个集合

[要求]
如果调用isSameSet和union的总次数逼近或超过O(N)，请做到单次调用isSameSet或union方法的平均时间复杂度为O(1)

输入描述:
第一行两个整数N, M。分别表示数组大小、操作次数
接下来M行，每行有一个整数opt
若opt = 1，后面有两个数x, y，表示查询(x, y)这两个数是否属于同一个集合
若opt = 2，后面有两个数x, y，表示把x, y所在的集合合并在一起


输出描述:
对于每个opt = 1的操作，若为真则输出"Yes"，否则输出"No"


示例1

输入
4 5
1 1 2
2 2 3
2 1 3
1 1 1
1 2 3

输出
No
Yes
Yes

说明:
每次2操作后的集合为
({1}, {2}, {3}, {4})
({1}, {2, 3}, {4})
({1, 2, 3}, {4})


输入量太大，超时了



import java.util.*;

public class Main{
    private static int[] headOf,size;
    
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt(),m=sc.nextInt();
        headOf=new int[n+1];
        size=new int[n+1];
        for(int i=1;i<=n;++i){
            headOf[i]=i;
        }
        Arrays.fill(size,1);
        for(int i=0;i<m;++i){
            int opt=sc.nextInt();
            if(opt==1){
                System.out.println(rootOf(sc.nextInt())==rootOf(sc.nextInt()) ? "Yes":"No");
            }else{
                int a=rootOf(sc.nextInt());
                int b=rootOf(sc.nextInt());
                if(a!=b){
                    if(size[a]<size[b]){
                        headOf[a]=b;
                        size[b]+=size[a];
                    }else{
                        headOf[b]=a;
                        size[a]+=size[b];
                    }
                }
            }
        }
        sc.close();
    }
    
    private static int rootOf(int idx){
        while(headOf[idx]!=idx){
            idx=headOf[idx];
        }
        return idx;
    }
}
