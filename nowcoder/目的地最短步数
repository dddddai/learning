考虑你从家出发步行去往一处目的地，该目的地恰好离你整数单位步长（大于等于1）。
你只能朝向该目的地或者背向该目的地行走，而你行走的必须为单位步长的整数倍，且要求你第N次行走必须走N步。
请就给出目的地离你距离，判断你是否可以在有限步内到达该目的地。如果可以到达的话，请计算到达目的地的最短总步数(不能到达则输出-1)。

输入描述:
1个整数：目的地离你距离T


输出描述:
1个整数：最短总步数（进行了多少次行走）

示例1

输入
2

输出
3

说明：
距离目的地2， 需要3步：朝向走1，背向走2，朝向走3



假定一直正向走，则每次都是S+=i，若一直正向走到不了目的地，则至少需要一次反向走，
假设第j次是反向走的，则总距离减去2*j，这必定是个偶数，即不管有多少次反向走，减去的距离都是个偶数，
则只需要在一直正向走的基础上，找到第一个偶数能够等于正向走的总距离S减去T，即为最短路径
不存在无法到达的情况，因为总能使得某个S-T为偶数



import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        sc.close();
        int sum=0;
        for(int i=1;;++i){
            sum+=i;
            if(sum>=t && ((sum-t)&1)==0){
                System.out.print(i);
                break;
            }
        }
    }
}
