一座城市有n个公交站点，站点从1到n编号，和m班公交车，公交车从1到m编号，乘坐每班公交车只需花费1元钱。
第i班公交车一共经过t_i个站点，分别为站点a_(i,1),a_(i,2),…,a_(i,t_i)，
小明可以乘坐第i班公交车从这t_i个站点中的任意一个到达任意另一个站点。
如一班公交车经过站点1,2,3，那么小明花费1元钱就可以从1到2，从1到3，从2到1，从2到3，从3到1，从3到2。
小明想从1号站点到n号站点，问他最少花费多少钱。

输入描述:
第一行两个数n,m。(2≤n≤100000,1≤m≤100000)
接下来m行，依次描述每班公交车经过的站点，第i行开头一个数t_i，表示第i班公交经过的站点数，
接下来t_i个数，依次表示这t_i个站点。(2≤t_i≤n,∑(i=1)^m，t_i≤100000)

输出描述:
输出一个数，从1号站点到n号站点的最小代价，如果不能达到，输出-1。

输入示例：
5 3
3 1 2 3
3 3 4 2
3 3 5 4

输出示例:
2

样例解释：
先坐第1班公交从1号站点到3号站点，再做第3班公交从3号站点到5号站点，一共花费2元。


把公交车也看作一个节点，最后的距离要除以2


import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt(),m=sc.nextInt();
        sc.nextLine();
        List<LinkedList<Integer>> graph=new ArrayList<>(n+m+1);
        for(int i=0;i<=n+m;++i){
            graph.add(new LinkedList<>());
        }
        for(int i=1;i<=m;++i){
            int t=sc.nextInt();
            for(int j=0;j<t;++j){
                int station=sc.nextInt();
                graph.get(station).add(n+i);
                graph.get(n+i).add(station);
            }
            sc.nextLine();
        }
        sc.close();
        System.out.print(bfs(graph,n)>>1);
    }
    
    private static int bfs(List<LinkedList<Integer>> graph,int n){
        Queue<Integer> queue=new LinkedList<>();
        queue.offer(1);
        int cnt=0;
        boolean[] visited=new boolean[graph.size()];
        visited[1]=true;
        while(!queue.isEmpty()){
            int size=queue.size();
            ++cnt;
            for(int i=0;i<size;++i){
                int node=queue.poll();
                for(int next:graph.get(node)){
                    if(visited[next]){
                        continue;
                    }
                    if(next==n){
                        return cnt;
                    }
                    queue.offer(next);
                    visited[next]=true;
                }
            }
        }
        return -1;
    }
}






#include<bits/stdc++.h>
using namespace std;

int bfs(vector<forward_list<int>>& graph,int n){
    int cnt=0;
    queue<int> q;
    q.push(1);
    vector<bool> visited(graph.size(),false);
    visited[1]=true;
    while(!q.empty()){
        ++cnt;
        int size=q.size();
        for(int i=0;i<size;++i){
            int node=q.front();
            q.pop();
            for(int& next:graph[node]){
                if(visited[next]){
                    continue;
                }
                if(next==n){
                    return cnt;
                }
                q.push(next);
                visited[next]=true;
            }
        }
    }
    return -1;
}

int main(){
    int n,m;
    cin>>n>>m;
    vector<forward_list<int>> graph;
    graph.resize(n+m+1);
    for(auto& bucket:graph){
        forward_list<int> list;
        bucket=list;
    }
    for(int i=1;i<=m;++i){
        int t;
        cin>>t;
        for(int j=0;j<t;++j){
            int station;
            cin>>station;
            graph[station].push_front(n+i);
            graph[n+i].push_front(station);
        }
    }
    cout<<(bfs(graph,n)>>1);
    return 0;
}
