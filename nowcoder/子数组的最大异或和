数组异或和的定义：把数组中所有的数异或起来得到的值。
给定一个整型数组arr，其中可能有正、有负，有零，求其中子数组的最大异或和。

输入描述:
输出包含两行，第一行一个整数n，
代表数组arr长度，第二个n个整数，代表数组arr


输出描述:
输出一个整数，代表其中子数组的最大异或和。


示例1

输入
4
3 -28 -29 2

输出
7

说明
{-28，-29}这个子数组的异或和为7，是所有子数组中最大的




import java.util.*;

public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        TrieTree root=new TrieTree();
        root.add(0);
        int result=Integer.MIN_VALUE;
        int tmp=0;
        for(int i=0;i<n;++i){
            //arr[i...j]的异或和 = arr[0...i]的异或和 ^ arr[0...j]的异或和
            tmp^=sc.nextInt();
            result=Math.max(result,root.getMaxXOR(tmp));
            root.add(tmp);
        }
        sc.close();
        System.out.print(result);
    }
    
    private static class TrieTree{
        TrieTree[] children=new TrieTree[2];
        
        private void add(int num){
            TrieTree cur=this;
            for(int i=31;i>=0;--i){
                int bit=(num>>i)&1;
                if(cur.children[bit]==null){
                    cur.children[bit]=new TrieTree();
                }
                cur=cur.children[bit];
            }
        }
        
        private int getMaxXOR(int num){
            TrieTree cur=this;
            int result=0;
            //最高位为符号位，单独处理
            int bit=(num>>31)&1;
            int next = cur.children[bit]==null ? (bit^1) : bit;
            result|=(bit^next)<<31;
            cur=cur.children[next];
            for(int i=30;i>=0;--i){
                bit=(num>>i)&1;
                next = cur.children[bit^1]==null ? bit : (bit^1);
                result|=(bit^next)<<i;
                cur=cur.children[next];
            }
            return result;
        }
    }
}
