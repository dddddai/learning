输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）

class Solution:
    def is_same(self, node1, node2):
        if node2 is None:
            return True
        if node1 is None:
            return False
        if node1.val == node2.val:
            return self.is_same(node1.left, node2.left) and self.is_same(
                node1.right, node2.right)
        return False

    def HasSubtree(self, pRoot1, pRoot2):
        # write code here
        if not (pRoot1 and pRoot2):
            return False
        return (self.is_same(pRoot1, pRoot2) or
                self.HasSubtree(pRoot1.left, pRoot2) or
                self.HasSubtree(pRoot1.right, pRoot2))


public class Solution {
    boolean isSame(TreeNode p1, TreeNode p2) {
        if (p2 == null) {
            return true;
        }

        if (p1 == null) {
            return false;
        }

        if (p1.val == p2.val) {
            return isSame(p1.left, p2.left) && isSame(p1.right, p2.right);
        }

        return false;
    }

    public boolean HasSubtree(TreeNode root1, TreeNode root2) {
        if ((root1 == null) || (root2 == null)) {
            return false;
        }

        return isSame(root1, root2) || HasSubtree(root1.left, root2) ||
                                        HasSubtree(root1.right, root2);
    }
}
