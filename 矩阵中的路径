题目描述
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子。
例如 a b c e s f c s a d e e 这样的3 X 4 矩阵中包含一条字符串"bcced"的路径，
但是矩阵中不包含"abcb"路径，
因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。

思路：
1.将matrix字符串模拟映射为一个字符矩阵(但并不实际创建一个矩阵)
2.取一个boolean[matrix.length]标记某个字符是否已经被访问过。
3.如果没找到结果，需要将对应的boolean标记值置回false,返回上一层进行其他分路的查找。


class Solution:
    def hasPath(self, matrix, rows, cols, path):
        # write code here
        self.visited=[False]*len(matrix)
        self.length=len(path)
        
        def search(matrix,rows,cols,i,j,idx,s):
            if not(0<=i<rows and 0<=j<cols) or matrix[i*cols+j]!=s[idx] or self.visited[i*cols+j]:
                return False
            self.visited[i*cols+j]=True
            if idx==self.length-1:
                return True
            if search(matrix,rows,cols,i+1,j,idx+1,s) or\
                search(matrix,rows,cols,i-1,j,idx+1,s) or\
                search(matrix,rows,cols,i,j+1,idx+1,s) or\
                search(matrix,rows,cols,i,j-1,idx+1,s):
                    return True
            self.visited[i*cols+j]=False
            return False
        
        for i in range(rows):
            for j in range(cols):
                if search(matrix,rows,cols,i,j,0,path):
                    return True
        return False
