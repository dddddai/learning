我们会用到下面的构造函数来创建一个QpushButton：
QPushButton(string text, QWidget parent = None)


import sys
from PyQt5.QtWidgets import (QWidget, QToolTip,
                             QPushButton, QApplication)
from PyQt5.QtGui import QFont,QIcon
from PyQt5.QtCore import QCoreApplication


class Example(QWidget):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):

        self.setGeometry(300, 300, 300, 200)
        self.setWindowTitle('dwq')
        self.setWindowIcon(QIcon('web.png'))
        QToolTip.setFont(QFont('SansSerif', 12))

        self.setToolTip('This is a widget')
        btn = QPushButton('myButton',self)
        btn.resize(btn.sizeHint())
        btn.move(100, 50)
        btn.setToolTip('press to quit')
        btn.clicked.connect(QCoreApplication.instance().quit)

        self.show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())


text参数是想要显示的按钮名称，parent参数是放在按钮上的组件，
在例子里，这个参数是QWidget。应用中的组件都是一层一层（继承而来的？）的，
在这个层里，大部分的组件都有自己的父级，没有父级的组件，是顶级的窗口。


qbtn.clicked.connect(QCoreApplication.instance().quit)
事件传递系统在PyQt5内建的single和slot机制里面。点击按钮之后，
信号会被捕捉并给出既定的反应。QCoreApplication包含了事件的主循环，
它能添加和删除所有的事件，instance()创建了一个它的实例。
#不要instance()也可以
QCoreApplication是在QApplication里创建的。 点击事件和能终止进程并退出应用的quit函数绑定在了一起。
在发送者和接受者之间建立了通讯，发送者就是按钮，接受者就是应用对象。
