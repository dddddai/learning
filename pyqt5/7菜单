import sys
from PyQt5.QtWidgets import QMainWindow, QApplication

class Example(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setGeometry(500,500,500,500)
        self.setWindowTitle('Title')
        self.statusBar().showMessage('Ready')
        self.setWindowIcon(QIcon('web.png'))
        self.show()
        
        
 状态栏是由QMainWindow创建的。

self.statusBar().showMessage('Ready')
第一次调用创建一个状态栏，返回一个状态栏对象。showMessage()方法在状态栏上显示一条信息。

---------------------------------

import sys
from PyQt5.QtWidgets import QMainWindow, QAction, qApp, QApplication
from PyQt5.QtGui import QIcon


class Example(QMainWindow):

    def __init__(self):
        super().__init__()

        self.initUI()


    def initUI(self):
        exitAction=QAction(QIcon('web.png'),'Exit',self)
        exitAction.triggered.connect(qApp.quit)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.setStatusTip('click to exit')

        self.statusBar()

        menubar=self.menuBar()
        file_menu=menubar.addMenu('File')
        file_menu.addAction(exitAction)

        self.setGeometry(500, 500, 500, 500)
        self.setWindowTitle('Ttile')
        self.show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())
    
    
我们创建了只有一个命令的菜单栏，这个命令就是终止应用。
同时也创建了一个状态栏。而且还能使用快捷键Ctrl+Q退出应用。

exitAction = QAction(QIcon('exit.png'), 'Exit', self)        
exitAction.setShortcut('Ctrl+Q')
exitAction.setStatusTip('Exit application')

QAction是菜单栏、工具栏或者快捷键的动作的组合。
前面两行，我们创建了一个图标、一个exit的标签和一个快捷键组合，都执行了一个动作。
第三行，创建了一个状态栏，当鼠标悬停在菜单栏的时候，能显示当前状态。

exitAction.triggered.connect(qApp.quit)
当执行这个指定的动作时，就触发了一个事件。
这个事件跟QApplication的quit()行为相关联，所以这个动作就能终止这个应用。

menubar = self.menuBar()
fileMenu = menubar.addMenu('File')
fileMenu.addAction(exitAction)

menuBar()创建菜单栏。这里创建了一个菜单栏，
并在上面添加了一个file菜单，并关联了点击退出应用的事件。    

-------------------------------------------------
创建子菜单：

import sys
from PyQt5.QtWidgets import QMainWindow, QAction, QApplication,QMenu
from PyQt5.QtGui import QIcon


class Example(QMainWindow):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        exitAction = QAction(QIcon('web.png'), 'Exit',self)
        exitAction.triggered.connect(QApplication.quit)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.setStatusTip('click to exit')

        self.statusBar()

        menubar = self.menuBar()
        file_menu = menubar.addMenu('File')
        file_menu.addAction(exitAction)

        impMenu=QMenu('Submenu',self)
        impAct=QAction(QIcon('web.png'),'Exit2',self)
        impAct.triggered.connect(QApplication.quit)
        impMenu.addAction(impAct)

        file_menu.addMenu(impMenu)

        self.setGeometry(500, 500, 500, 500)
        self.setWindowTitle('Ttile')
        self.show()


if __name__ == '__main__':
    app=QApplication(sys.argv)
    exp=Example()
    sys.exit(app.exec_())

---------------------------------------

import sys
from PyQt5.QtWidgets import QMainWindow, QAction, QApplication,QMenu


class Example(QMainWindow):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        self.statusBar().showMessage('Ready')
        viewMenu=self.menuBar().addMenu('View')

        viewStatAct=QAction('View statusbar',self,checkable=True)
        viewStatAct.setChecked(True)
        viewStatAct.setStatusTip('View statusbar')
        viewStatAct.triggered.connect(self.toggleMenu)

        viewMenu.addAction(viewStatAct)

        self.setGeometry(500, 500, 500, 500)
        self.setWindowTitle('Title')
        self.show()

    def toggleMenu(self,flag):
        if flag:
            self.statusBar().show()
        else:
            self.statusBar().hide()

if __name__ == '__main__':
    app=QApplication(sys.argv)
    exp=Example()
    sys.exit(app.exec_())
    
    
本例创建了一个行为菜单。这个行为／动作能切换状态栏显示或者隐藏。

viewStatAct = QAction('View statusbar', self, checkable=True)
用checkable选项创建一个能选中的菜单。

viewStatAct.setChecked(True)
默认设置为选中状态。

def toggleMenu(self,flag):
    if flag:
        self.statusBar().show()
    else:
        self.statusBar().hide()
依据选中状态切换状态栏的显示与否。     


--------------------------------------------
右键菜单：

import sys
from PyQt5.QtWidgets import QMainWindow, QAction, QApplication,QMenu


class Example(QMainWindow):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        self.setGeometry(500,500,500,500)
        self.setWindowTitle('Title')
        self.show()

    def contextMenuEvent(self, QContextMenuEvent):
        cmenu=QMenu(self)
        newAct=cmenu.addAction('new')
        openAct=cmenu.addAction('open')
        quitAct=cmenu.addAction('quit')

        act=cmenu.exec_(self.mapToGlobal(QContextMenuEvent.pos()))
        if act==quitAct:
            QApplication.quit()


if __name__ == '__main__':
    app=QApplication(sys.argv)
    exp=Example()
    sys.exit(app.exec_())
    
    
还是使用contextMenuEvent()方法实现这个菜单。

action = cmenu.exec_(self.mapToGlobal(event.pos()))
使用exec_()方法显示菜单。从鼠标右键事件对象中获得当前坐标。
mapToGlobal()方法把当前组件的相对坐标转换为窗口（window）的绝对坐标。

if action == quitAct:
    qApp.quit()
如果右键菜单里触发了事件，也就触发了推出事件，我们就关闭菜单。
