加载一个类时，其内部类不会同时被加载。一个类被加载，当且仅当其某个静态成员（静态域、构造器、静态方法等）被调用时发生。 


根据内部类不会在其外部类被加载的同时被加载的事实，我们可以引申出单例模式的一种实现方式： 

public class Singleton {  
    private Singleton() {}  
      
    static class SingletonHolder {  
        private static final Singleton instance = new Singleton();  
    }  
      
    public static Singleton getInstance() {  
        return SingletonHolder.instance;  
    }  
}  


该实现方式比较简单，而且既实现了由前述事实所保证的惰性初始化（Lazy-Initialazation），又由JVM保证了多线程并发访问的正确性。
