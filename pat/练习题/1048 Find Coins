Eva loves to collect coins from all over the universe, including some other planets like Mars. 
One day she visited a universal shopping mall which could accept all kinds of coins as payments. 
However, there was a special requirement of the payment: for each bill, she could only use exactly two coins to pay the exact amount. 
Since she has as many as 105 coins with her, she definitely needs your help. 
You are supposed to tell her, for any given amount of money, whether or not she can find two coins to pay for it.

Input Specification:

Each input file contains one test case. For each case, the first line contains 2 positive numbers: 
N (<=105, the total number of coins) and M(<=103, the amount of money Eva has to pay). 
The second line contains N face values of the coins, which are all positive numbers no more than 500. 
All the numbers in a line are separated by a space.

Output Specification:

For each test case, 
print in one line the two face values V1 and V2 (separated by a space) such that V1 + V2 = M and V1 <= V2. 
If such a solution is not unique, output the one with the smallest V1. If there is no solution, output “No Solution” instead.


Sample Input 1:
8 15
1 2 8 7 2 4 11 15

Sample Output 1:
4 11


Sample Input 2:
7 14
1 8 7 2 4 11 15

Sample Output 2:
No Solution


两个样例超时


import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        int n = Reader.nextInt(),m=Reader.nextInt();
        Set<Integer> set=new HashSet<>();
        int[] result=new int[0];
        for(int i=0;i<n;++i){
            int value=Reader.nextInt();
            if(set.contains(m-value)){
                if(m-value<value) {
                    if(result.length==0 || m-value<result[0]){
                        result=new int[]{m-value,value};
                    }
                }else{
                    if(result.length==0 || value<result[0]){
                        result=new int[]{value,m-value};
                    }
                }

            }
            set.add(value);
        }
        if(result.length==0){
            System.out.print("No Solution");
        }else {
            System.out.print(result[0]+" "+result[1]);
        }
    }
}

class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
