The following is from Max Howell @twitter:
Google: 90% of our engineers use the software you wrote (Homebrew), 
but you can’t invert a binary tree on a whiteboard so fuck off.
Now it’s your turn to prove that YOU CAN invert a binary tree!

Input Specification:

Each input file contains one test case. For each case, 
the first line gives a positive integer N (<=10) 
which is the total number of nodes in the tree — and hence the nodes are numbered from 0 to N-1. 
Then N lines follow, each corresponds to a node from 0 to N-1, 
and gives the indices of the left and right children of the node. 
If the child does not exist, a “-” will be put at the position.
Any pair of children are separated by a space.

Output Specification:

For each test case, print in the first line the level-order, 
and then in the second line the in-order traversal sequences of the inverted tree. 
There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.


Sample Input:
8
1 –
– –
0 –
2 7
– –
– –
5 –
4 6

Sample Output:
3 7 2 6 4 0 5 1
6 5 7 4 3 2 0 1






#include<bits/stdc++.h>
using namespace std;

bool flag=true;

void func(vector<pair<int,int>>& arr,int idx){
    if(idx==-1){
        return;
    }
    func(arr,arr[idx].first);
    if(flag){
        flag=false;
    }else{
        cout<<' ';
    }
    cout<<idx;
    func(arr,arr[idx].second);
}

int main(){
    int n;
    cin>>n;
    vector<pair<int,int>> arr(n);
    vector<bool> visited(n);
    for(int i=0;i<n;++i){
        string a,b;
        cin>>a>>b;
        if(a[0]=='-'){
            arr[i].second=-1;
        }else{
            arr[i].second=stoi(a);
            visited[arr[i].second]=true;
        }
        if(b[0]=='-'){
            arr[i].first=-1;
        }else{
            arr[i].first=stoi(b);
            visited[arr[i].first]=true;
        }
    }
    int root;
    for(root=0;root<n;++root){
        if(!visited[root]){
            break;
        }
    }
    queue<int> q;
    q.push(root);
    while(!q.empty()){
        if(flag){
            flag=false;
        }else{
            cout<<' ';
        }
        cout<<q.front();
        if(arr[q.front()].first!=-1){
            q.push(arr[q.front()].first);
        }
        if(arr[q.front()].second!=-1){
            q.push(arr[q.front()].second);
        }
        q.pop();
    }
    cout<<endl;
    flag=true;
    func(arr,root);
    return 0;
}
