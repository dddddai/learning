The magic shop in Mars is offering some magic coupons. Each coupon has an integer N printed on it, 
meaning that when you use this coupon with a product, you may get N times the value of that product back! 
What is more, the shop also offers some bonus product for free. 
However, if you apply a coupon with a positive N to this bonus product, 
you will have to pay the shop N times the value of the bonus product… but hey, magically, they have some coupons with negative N’s!

For example, given a set of coupons {1 2 4 -1}, and a set of product values {7 6 -2 -3} (in Mars dollars M$) 
where a negative value corresponds to a bonus product. 
You can apply coupon 3 (with N being 4) to product 1 (with value M$7) to get M$28 back; 
coupon 2 to product 2 to get M$12 back; and coupon 4 to product 4 to get M$3 back.
On the other hand, if you apply coupon 3 to product 4, you will have to pay M$12 to the shop.

Each coupon and each product may be selected at most once. Your task is to get as much money back as possible.


Input Specification:

Each input file contains one test case. For each case, the first line contains the number of coupons NC, 
followed by a line with NC coupon integers. Then the next line contains the number of products NP, 
followed by a line with NP product values. Here 1<= NC, NP <= 105, and it is guaranteed that all the numbers will not exceed 230.

Output Specification:

For each test case, simply print in a line the maximum amount of money you can get back.


Sample Input:
4
1 2 4 -1
4
7 6 -2 -3

Sample Output:
43





#include<bits/stdc++.h>
using namespace std;

int main(){
    int n;
    cin>>n;
    vector<int> pos_coupon;
    vector<int> neg_coupon;
    vector<int> pos_product;
    vector<int> neg_product;
    pos_coupon.reserve(n);
    neg_coupon.reserve(n);
    for(int i=0;i<n;++i){
        int num;
        cin>>num;
        if(num>0){
            pos_coupon.push_back(num);
        }else{
            neg_coupon.push_back(num);
        }
    }
    int m;
    cin>>m;
    pos_product.reserve(m);
    neg_product.reserve(m);
    for(int i=0;i<m;++i){
        int num;
        cin>>num;
        if(num>0){
            pos_product.push_back(num);
        }else{
            neg_product.push_back(num);
        }
    }
    sort(pos_coupon.begin(),pos_coupon.end(),greater<int>());
    sort(neg_coupon.begin(),neg_coupon.end());
    sort(pos_product.begin(),pos_product.end(),greater<int>());
    sort(neg_product.begin(),neg_product.end());
    n=min(pos_coupon.size(),pos_product.size());
    m=min(neg_coupon.size(),neg_product.size());
    long result=0;
    for(int i=0;i<n;++i){
        result+=pos_coupon[i]*pos_product[i];
    }
    for(int i=0;i<m;++i){
        result+=neg_coupon[i]*neg_product[i];
    }
    cout<<result;
    return 0;
}
