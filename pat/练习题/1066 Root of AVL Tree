An AVL tree is a self-balancing binary search tree. 
In an AVL tree, the heights of the two child subtrees of any node differ by at most one; 
if at any time they differ by more than one, rebalancing is done to restore this property. 
Figures 1-4 illustrate the rotation rules.

Now given a sequence of insertions, you are supposed to tell the root of the resulting AVL tree.


Input Specification:
Each input file contains one test case. 
For each case, the first line contains a positive integer N (<=20) which is the total number of keys to be inserted. 
Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space.

Output Specification:
For each test case, print ythe root of the resulting AVL tree in one line.

Sample Input 1:
5
88 70 61 96 120

Sample Output 1:
70


Sample Input 2:
7
88 70 61 96 120 90 65

Sample Output 2:
88



import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        int n=Reader.nextInt();
        Node root=null;
        for(int i=0;i<n;++i){
            root=insert(root,Reader.nextInt());
        }
        System.out.print(root.val);
    }
    private static Node insert(Node root,int val){
        if(root==null){
            root=new Node(val);
        }else if(val<root.val) {
            root.left = insert(root.left, val);
            if(getHeight(root.left) - getHeight(root.right) == 2) {
                root = val < root.left.val ? rotateRight(root) : rotateLeftRight(root);
            }
        }
        else {
            root.right = insert(root.right, val);
            if(getHeight(root.right) - getHeight(root.left) == 2) {
                root = val > root.right.val ? rotateLeft(root) : rotateRightLeft(root);
            }
        }
        return root;
    }
    private static int getHeight(Node node){
        if(node==null){
            return 0;
        }
        return Math.max(getHeight(node.left),getHeight(node.right))+1;
    }
    private static Node rotateLeft(Node root){
        Node newRoot=root.right;
        root.right=newRoot.left;
        newRoot.left=root;
        return newRoot;
    }
    private static Node rotateRight(Node root){
        Node newRoot=root.left;
        root.left=newRoot.right;
        newRoot.right=root;
        return newRoot;
    }
    private static Node rotateLeftRight(Node root){
        root.left=rotateLeft(root.left);
        return rotateRight(root);
    }
    private static Node rotateRightLeft(Node root){
        root.right=rotateRight(root.right);
        return rotateLeft(root);
    }
}

class Node{
    int val;
    Node left,right;

    public Node(int val) {
        this.val = val;
    }
}

class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
