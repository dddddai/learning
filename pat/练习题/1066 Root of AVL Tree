An AVL tree is a self-balancing binary search tree. 
In an AVL tree, the heights of the two child subtrees of any node differ by at most one; 
if at any time they differ by more than one, rebalancing is done to restore this property. 
Figures 1-4 illustrate the rotation rules.

Now given a sequence of insertions, you are supposed to tell the root of the resulting AVL tree.


Input Specification:
Each input file contains one test case. 
For each case, the first line contains a positive integer N (<=20) which is the total number of keys to be inserted. 
Then N distinct integer keys are given in the next line. All the numbers in a line are separated by a space.

Output Specification:
For each test case, print ythe root of the resulting AVL tree in one line.

Sample Input 1:
5
88 70 61 96 120

Sample Output 1:
70


Sample Input 2:
7
88 70 61 96 120 90 65

Sample Output 2:
88




#include<bits/stdc++.h>
using namespace std;

struct Node{
    Node* left;
    Node* right;
    int val;

    Node(int v){
        val=v;
    }
};

int getDepth(Node* root){
    if(root==nullptr){
        return 0;
    }
    return max(getDepth(root->left),getDepth(root->right))+1;
}

Node* rotateLeft(Node* root){
    Node* newRoot=root->right;
    root->right=root->right->left;
    newRoot->left=root;
    return newRoot;
}

Node* rotateRight(Node* root){
    Node* newRoot=root->left;
    root->left=root->left->right;
    newRoot->right=root;
    return newRoot;
}

Node* rotateLeftRight(Node* root){
    root->left=rotateLeft(root->left);
    return rotateRight(root);
}

Node* rotateRightLeft(Node* root){
    root->right=rotateRight(root->right);
    return rotateLeft(root);
}

Node* insert(Node* root,int num){
    if(root==nullptr){
        return new Node(num);
    }
    if(num<root->val){
        root->left=insert(root->left,num);
        if(getDepth(root->left)>getDepth(root->right)+1){
            root=(num<root->left->val) ? rotateRight(root) : rotateLeftRight(root);
        }
    }else{
        root->right=insert(root->right,num);
        if(getDepth(root->right)>getDepth(root->left)+1){
            root=(num>root->right->val) ? rotateLeft(root) : rotateRightLeft(root);
        }
    }
    return root;
}

int main(){
    int n,num;
    cin>>n>>num;
    Node* root=new Node(num);
    for(int i=1;i<n;++i){
        cin>>num;
        root=insert(root,num);
    }
    cout<<root->val;
    return 0;
}
