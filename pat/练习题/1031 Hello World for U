Given any string of N (>=5) characters, you are asked to form the characters into the shape of U. For example, “helloworld” can be printed as:
h  d
e  l
l  r
lowo
That is, the characters must be printed in the original order, starting top-down from the left vertical line with n1 characters, 
then left to right along the bottom line with n2 characters, and finally bottom-up along the vertical line with n3 characters. 
And more, we would like U to be as squared as possible — 
that is, it must be satisfied that n1 = n3 = max { k| k <= n2 for all 3 <= n2 <= N } with n1 + n2 + n3 – 2 = N.

Input Specification:
Each input file contains one test case. Each case contains one string with no less than 5 and no more than 80 characters in a line. 
The string contains no white space.

Output Specification:
For each test case, print the input string in the shape of U as specified in the description.


Sample Input:
helloworld!


Sample Output:
h   !
e   d
l   l
lowor



import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        String s=Reader.next();
        int l=0,r=s.length()-1;
        int row=(s.length()+2)/3-1;
        int cnt=row+(s.length()+2)%3-1;
        StringBuilder space=new StringBuilder();
        for (int i=0;i<cnt;++i){
            space.append(" ");
        }
        for (int i=0;i<row;++i){
            System.out.print(s.charAt(l++));
            System.out.print(space);
            System.out.println(s.charAt(r--));
        }
        System.out.println(s.substring(l,r+1));
    }
}

class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
