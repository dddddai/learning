When register on a social network, you are always asked to specify your hobbies 
in order to find some potential friends with the same hobbies.
A “social cluster” is a set of people who have some of their hobbies in common.
You are supposed to find all the clusters.

Input Specification:
Each input file contains one test case. For each test case, 
the first line contains a positive integer N (<=1000), 
the total number of people in a social network. Hence the people are numbered from 1 to N.
Then N lines follow, each gives the hobby list of a person in the format:
Ki: hi[1] hi[2] … hi[Ki]
where Ki (>0) is the number of hobbies, and hi[j] is the index of the j-th hobby, 
which is an integer in [1, 1000].

Output Specification:
For each case, print in one line the total number of clusters in the network. 
Then in the second line, print the numbers of people in the clusters in non-increasing order.
The numbers must be separated by exactly one space, and there must be no extra space at the end of the line.


Sample Input:
8
3: 2 7 10
1: 4
2: 5 3
1: 4
1: 3
1: 4
4: 6 8 1 5
1: 4

Sample Output:
3
4 3 1






#include<bits/stdc++.h>
using namespace std;

void dfs(vector<forward_list<int>>& graph,int idx,vector<forward_list<int>>& hobby,vector<bool>& visited,unordered_set<int>& s){
    if(visited[idx]){
        return;
    }
    visited[idx]=true;
    for(int i:graph[idx]){
        s.insert(i);
        for(int next:hobby[i]){
            dfs(graph,next,hobby,visited,s);
        }
    }
}

int main(){
    int n;
    cin>>n;
    vector<forward_list<int>> hobby(n);
    vector<forward_list<int>> graph(1001);
    for(int i=0;i<n;++i){
        string s;
        cin>>s;
        int k=stoi(s.substr(0,s.length()-1));
        for(int j=0;j<k;++j){
            int idx;
            cin>>idx;
            hobby[i].push_front(idx);
            graph[idx].push_front(i);
        }
    }
    vector<bool> visited(1001);
    vector<int> result;
    for(int i=1;i<=1000;++i){
        unordered_set<int> s(n);
        dfs(graph,i,hobby,visited,s);
        if(!s.empty()){
            result.push_back(s.size());
        }
    }
    if(result.empty()){
        cout<<0<<endl<<endl;
    }else{
        sort(result.begin(),result.end(),greater<int>());
        cout<<result.size()<<endl<<result[0];
        for(int i=1;i<result.size();++i){
            cout<<' '<<result[i];
        }
    }
    return 0;
}
