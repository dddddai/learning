A registration card number of PAT consists of 4 parts:

the 1st letter represents the test level, namely, T for the top level, A for advance and B for basic;
the 2nd – 4th digits are the test site number, ranged from 101 to 999;
the 5th – 10th digits give the test date, in the form of yymmdd;
finally the 11th – 13th digits are the testee’s number, ranged from 000 to 999.
Now given a set of registration card numbers and the scores of the card owners, 
you are supposed to output the various statistics according to the given queries.

Input Specification:
Each input file contains one test case. For each case, the first line gives two positive integers N (≤10
​4
​​ ) and M (≤100), the numbers of cards and the queries, respectively.

Then N lines follow, each gives a card number and the owner’s score (integer in [0,100]), separated by a space.

After the info of testees, there are M lines, each gives a query in the format Type Term, where

Type being 1 means to output all the testees on a given level, in non-increasing order of their scores. 
The corresponding Term will be the letter which specifies the level;
Type being 2 means to output the total number of testees together with their total scores in a given site. 
The corresponding Term will then be the site number;
Type being 3 means to output the total number of testees of every site for a given test date. 
The corresponding Term will then be the date, given in the same format as in the registration card.
Output Specification:
For each query, first print in a line Case #: input, where # is the index of the query case, starting from 1; 
and input is a copy of the corresponding input query. Then output as requested:

for a type 1 query, the output format is the same as in input, that is, CardNumber Score. 
If there is a tie of the scores,
output in increasing alphabetical order of their card numbers (uniqueness of the card numbers is guaranteed);
for a type 2 query, output in the format Nt Ns 
where Nt is the total number of testees and Ns is their total score;
for a type 3 query, output in the format Site Nt where Site is the site number 
and Nt is the total number of testees at Site. The output must be in non-increasing order of Nt’s,
or in increasing order of site numbers if there is a tie of Nt.
If the result of a query is empty, simply print NA.


Sample Input:
8 4
B123180908127 99
B102180908003 86
A112180318002 98
T107150310127 62
A107180908108 100
T123180908010 78
B112160918035 88
A107180908021 98
1 A
2 107
3 180908
2 999

Sample Output:
Case 1: 1 A
A107180908108 100
A107180908021 98
A112180318002 98
Case 2: 2 107
3 260
Case 3: 3 180908
107 2
123 2
102 1
Case 4: 2 999
NA




必须用printf否则又超时，注意用c_str()



#include<bits/stdc++.h>
using namespace std;

int main(){
    int n,m;
    cin>>n>>m;
    vector<pair<string,int>> b,a,t;
    b.reserve(n);
    a.reserve(n);
    t.reserve(n);
    unordered_map<string,pair<int,int>> site(n);
    unordered_map<string,unordered_map<string,int>> date(n);
    while(n--){
        string id;
        int score;
        cin>>id;
        scanf("%d",&score);
        if(id[0]=='B'){
            b.push_back({id,score});
        }else if(id[0]=='A'){
            a.push_back({id,score});
        }else{
            t.push_back({id,score});
        }
        ++site[id.substr(1,3)].first;
        site[id.substr(1,3)].second+=score;
        ++date[id.substr(4,6)][id.substr(1,3)];
    }
    auto cmp=[](pair<string,int>& a,pair<string,int>& b){
        if(a.second==b.second){
            return a.first<b.first;
        }
        return a.second>b.second;
    };
    sort(b.begin(),b.end(),cmp);
    sort(a.begin(),a.end(),cmp);
    sort(t.begin(),t.end(),cmp);
    for(int i=1;i<=m;++i){
        int op;
        scanf("%d",&op);
        printf("Case %d: %d ",i,op);
        if(op==1){
            char c;
            cin>>c;
            cout<<c<<endl;
            vector<pair<string,int>>* tmp=nullptr;
            if(c=='B'){
                tmp=&b;
            }else if(c=='A'){
                tmp=&a;
            }else if(c=='T'){
                tmp=&t;
            }
            if(tmp==nullptr || tmp->empty()){
                printf("NA\n");
                continue;
            }
            for(auto& p:*tmp){
                printf("%s %d\n",p.first.c_str(),p.second);
            }
        }else if(op==2){
            string s;
            cin>>s;
            cout<<s<<endl;
            if(site.find(s)==site.end()){
                printf("NA\n");
                continue;
            }
            printf("%d %d\n",site[s].first,site[s].second);
        }else{
            string s;
            cin>>s;
            cout<<s<<endl;
            if(date.find(s)==date.end()){
                printf("NA\n");
                continue;
            }
            vector<pair<string,int>> tmp;
            for(auto& p:date[s]){
                tmp.push_back(p);
            }
            sort(tmp.begin(),tmp.end(),cmp);
            for(auto& p:tmp){
                printf("%s %d\n",p.first.c_str(),p.second);
            }
        }
    }
    return 0;
}
