Behind the scenes in the computer’s memory, color is always talked about as a series of 24 bits of information for each pixel.
In an image, the color with the largest proportional area is called the dominant color. 
A strictly dominant color takes more than half of the total area. 
Now given an image of resolution M by N (for example, 800×600), you are supposed to point out the strictly dominant color.

Input Specification:

Each input file contains one test case. For each case, the first line contains 2 positive numbers:
M (<=800) and N (<=600) which are the resolutions of the image.
Then N lines follow, each contains M digital colors in the range [0, 224). 
It is guaranteed that the strictly dominant color exists for each input image. 
All the numbers in a line are separated by a space.

Output Specification:

For each test case, simply print the dominant color in a line.

Sample Input:
5 3
0 0 255 16777215 24
24 24 0 0 24
24 0 24 24 24

Sample Output:
24


一个超时


import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception{
        Reader.init(System.in);
        int m=Reader.nextInt(),n=Reader.nextInt();
        int result=Reader.nextInt(),freq=1;
        for(int i=1;i<m;++i){
            int color=Reader.nextInt();
            if(color==result){
                ++freq;
            }else if(--freq==0){
                result=color;
                freq=1;
            }
        }
        for(int i=1;i<n;++i){
            for(int j=0;j<m;++j){
                int color=Reader.nextInt();
                if(color==result){
                    ++freq;
                }else if(--freq==0){
                    result=color;
                    freq=1;
                }
            }
        }
        System.out.println(result);
    }
}
class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
