The “Hamilton cycle problem” is to find a simple cycle that contains every vertex in a graph. 
Such a cycle is called a “Hamiltonian cycle”.

In this problem, you are supposed to tell if a given cycle is a Hamiltonian cycle.

Input Specification:

Each input file contains one test case. For each case,
the first line contains 2 positive integers N (2< N <= 200), the number of vertices, 
and M, the number of edges in an undirected graph. 
Then M lines follow, each describes an edge in the format “Vertex1 Vertex2”,
where the vertices are numbered from 1 to N. 
The next line gives a positive integer K which is the number of queries, followed by K lines of queries, 
each in the format:

n V1 V2 … Vn

where n is the number of vertices in the list, and Vi‘s are the vertices on a path.

Output Specification:

For each query, print in a line “YES” if the path does form a Hamiltonian cycle, or “NO” if not.


Sample Input:
6 10
6 2
3 4
1 5
2 5
3 1
4 1
1 6
6 3
1 2
4 5
6
7 5 1 4 3 6 2 5
6 5 1 4 3 6 2
9 6 2 1 6 3 4 5 2 6
4 1 2 5 1
7 6 1 3 4 5 2 6
7 6 1 2 5 4 3 1

Sample Output:
YES
NO
NO
NO
YES
NO






#include<bits/stdc++.h>
using namespace std;

int main(){
    int n,m;
    cin>>n>>m;
    vector<vector<bool>> graph(n+1,vector<bool>(n+1));
    for(int i=0;i<m;++i){
        int a,b;
        cin>>a>>b;
        graph[a][b]=graph[b][a]=true;
    }
    int k;
    cin>>k;
    for(int i=0;i<k;++i){
        int cnt;
        cin>>cnt;
        vector<bool> visited(n+1);
        int start;
        cin>>start;
        visited[start]=true;
        int pre=start;
        bool flag=true;
        for(int j=1;j<cnt;++j){
            int idx;
            cin>>idx;
            if(!graph[pre][idx]){
                flag=false;
            }
            visited[idx]=true;
            pre=idx;
        }
        if(cnt!=n+1){
            flag=false;
        }
        if(start!=pre){
            flag=false;
        }
        if(flag){
            int x=0;
            for(bool b:visited){
                x+=b;
            }
            if(x<n){
                flag=false;
            }
        }
        cout<<(flag ? "YES":"NO")<<endl;
    }
    return 0;
}
