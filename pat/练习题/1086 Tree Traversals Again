An inorder binary tree traversal can be implemented in a non-recursive way with a stack. 
For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, 
the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4);
pop(); pop(); push(5);push(6); pop(); pop(). 
Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations.
Your task is to give the postorder traversal sequence of this tree.

Input Specification:
Each input file contains one test case. For each case, 
the first line contains a positive integer N (<=30) 
which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N). 
Then 2N lines follow, each describes a stack operation in the format: 
“Push X” where X is the index of the node being pushed onto the stack;
or “Pop” meaning to pop one node from the stack.

Output Specification:

For each test case, print the postorder traversal sequence of the corresponding tree in one line.
A solution is guaranteed to exist. All the numbers must be separated by exactly one space, 
and there must be no extra space at the end of the line.




Sample Input:
6
Push 1
Push 2
Push 3
Pop
Pop
Push 4
Pop
Pop
Push 5
Push 6
Pop
Pop


Sample Output:
3 4 2 6 5 1



Push的顺序就是前序遍历的顺序！！



#include<bits/stdc++.h>
using namespace std;

vector<int> idx;
vector<int> pre;
vector<int> in;
stack<int> stk;
vector<int> post;

void func(int i,int start,int end){
    if(start>=end){
        return;
    }
    int j=idx[pre[i]];
    func(i+1,start,j);
    func(i+1+j-start,j+1,end);
    post.push_back(pre[i]);
}

int main(){
    int n;
    cin>>n;
    idx.resize(n+1);
    pre.reserve(n);
    in.reserve(n);
    post.reserve(n);
    while(1){
        string s;
        if(!(cin>>s)){
            break;
        }
        if(s[1]=='u'){
            int num;
            cin>>num;
            pre.push_back(num);
            stk.push(num);
        }else{
            idx[stk.top()]=in.size();
            in.push_back(stk.top());
            stk.pop();
        }
    }
    func(0,0,n);
    cout<<post[0];
    for(int i=1;i<n;++i){
        cout<<' '<<post[i];
    }
    return 0;
}
