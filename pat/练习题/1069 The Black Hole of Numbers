For any 4-digit integer except the ones with all the digits being the same, 
if we sort the digits in non-increasing order first, and then in non-decreasing order, 
a new number can be obtained by taking the second number from the first one. 
Repeat in this manner we will soon end up at the number 6174 — the “black hole” of 4-digit numbers. This number is named Kaprekar Constant.

For example, start from 6767, we’ll get:

7766 – 6677 = 1089
9810 – 0189 = 9621
9621 – 1269 = 8352
8532 – 2358 = 6174
7641 – 1467 = 6174
… …

Given any 4-digit number, you are supposed to illustrate the way it gets into the black hole.

Input Specification:

Each input file contains one test case which gives a positive integer N in the range (0, 10000).

Output Specification:

If all the 4 digits of N are the same, print in one line the equation “N – N = 0000”. 
Else print each step of calculation in a line until 6174 comes out as the difference.
All the numbers must be printed as 4-digit numbers.

Sample Input 1:
6767

Sample Output 1:
7766 – 6677 = 1089
9810 – 0189 = 9621
9621 – 1269 = 8352
8532 – 2358 = 6174


Sample Input 2:
2222

Sample Output 2:
2222 – 2222 = 0000





#include<bits/stdc++.h>
using namespace std;

int main(){
    string s;
    cin>>s;
    char num[4]={'0','0','0','0'};
    int idx=3;
    for(int i=s.length()-1;i>=0;--i){
        num[idx--]=s[i];
    }
    if(num[0]==num[1] && num[1]==num[2] && num[2]==num[3]){
        cout<<s<<" - "<<s<<" = 0000";
        return 0;
    }
    while(1){
        sort(num,num+4);
        int b=stoi(string(num));
        reverse(num,num+4);
        int a=stoi(string(num));
        printf("%04d - %04d = %04d\n",a,b,a-b);
        if(a-b==6174){
            break;
        }
        s=to_string(a-b);
        idx=3;
        for(int i=s.length()-1;i>=0;--i){
            num[idx--]=s[i];
        }
        while(idx>=0){
            num[idx--]='0';
        }
    }
    return 0;
}
