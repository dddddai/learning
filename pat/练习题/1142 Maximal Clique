A clique is a subset of vertices of an undirected graph 
such that every two distinct vertices in the clique are adjacent.
A maximal clique is a clique that cannot be extended by including one more adjacent vertex. 
(Quoted from https://en.wikipedia.org/wiki/Clique_(graph_theory))

Now it is your job to judge if a given subset of vertices can form a maximal clique.
Input Specification:
Each input file contains one test case. For each case, the first line gives two positive integers Nv (<= 200),
the number of vertices in the graph, and Ne, the number of undirected edges. Then Ne lines follow,
each gives a pair of vertices of an edge. The vertices are numbered from 1 to Nv.
After the graph, there is another positive integer M (<= 100). Then M lines of query follow,
each first gives a positive number K (<= Nv), then followed by a sequence of K distinct vertices. 
All the numbers in a line are separated by a space.

Output Specification:
For each of the M queries, print in a line "Yes" if the given subset of vertices can form a maximal clique; 
or if it is a clique but not a maximal clique, print "Not Maximal"; or if it is not a clique at all,
print "Not a Clique".


Sample Input:
8 10
5 6
7 8
6 4
3 6
4 5
2 3
8 2
2 7
5 3
3 4
6
4 5 4 3 6
3 2 8 7
2 2 3
1 1
3 4 3 6
3 3 2 1

Sample Output:
Yes
Yes
Yes
Yes
Not Maximal
Not a Clique





#include<bits/stdc++.h>
using namespace std;

int main(){
    int nv,ne;
    cin>>nv>>ne;
    vector<unordered_set<int>> graph(nv+1);
    while(ne--){
        int a,b;
        cin>>a>>b;
        graph[a].insert(b);
        graph[b].insert(a);
    }
    int m;
    cin>>m;
    while(m--){
        int k;
        cin>>k;
        vector<int> clique(k);
        vector<bool> used(nv+1);
        for(int i=0;i<k;++i){
            cin>>clique[i];
            used[clique[i]]=true;
        }
        bool flag=true;
        for(int i=0;i<k-1 && flag;++i){
            for(int j=i+1;j<k;++j){
                if(graph[clique[i]].find(clique[j])==graph[clique[i]].end()){
                    flag=false;
                    break;
                }
            }
        }
        if(!flag){
            cout<<"Not a Clique"<<endl;
            continue;
        }
        bool found;
        for(int idx:clique){
            for(int adjacent:graph[idx]){
                if(used[adjacent]){
                    found=false;
                    continue;
                }
                found=true;
                for(int other:clique){
                    if(graph[other].find(adjacent)==graph[other].end()){
                        found=false;
                        break;
                    }
                }
                if(found){
                    break;
                }
            }
            if(found){
                break;
            }
        }
        cout<<(found ? "Not Maximal":"Yes")<<endl;
    }
    return 0;
}
