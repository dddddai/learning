Given any positive integer N, 
you are supposed to find all of its prime factors, and write them in the format N = p1^k1 * p2^k2 *…*pm^km.

Input Specification:

Each input file contains one test case which gives a positive integer N in the range of long int.

Output Specification:

Factor N in the format N = p1^k1 * p2^k2 *…*pm^km, where pi’s are prime factors of N in increasing order, 
and the exponent ki is the number of pi — hence when there is only one pi, ki is 1 and must NOT be printed out.

Sample Input:
97532468

Sample Output:
97532468=2^2*11*17*101*1291




1不是质数啊，为什么还有1=1的情况



#include<bits/stdc++.h>
using namespace std;

int main(){
    long n;
    cin>>n;
    if(n==1){
        cout<<"1=1";
        return 0;
    }
    cout<<n<<'=';
    vector<bool> isPrime(1000*1000+1,true);
    for(int i=2;i<=1000;++i){
        for(int j=i;j<=1000;++j){
            isPrime[i*j]=false;
        }
    }
    bool first=true;
    int factor=2;
    while(n!=1){
        while(!isPrime[factor] || n%factor){
            ++factor;
        }
        int cnt=0;
        while(n!=1 && n%factor==0){
            n/=factor;
            ++cnt;
        }
        if(first){
            first=false;
        }else{
            cout<<'*';
        }
        cout<<factor;
        if(cnt>1){
            cout<<'^'<<cnt;
        }
    }
    return 0;
}
