Suppose that all the keys in a binary tree are distinct positive integers. 
Given the postorder and inorder traversal sequences,
you are supposed to output the level order traversal sequence of the corresponding binary tree.

Input Specification:

Each input file contains one test case. 
For each case, the first line gives a positive integer N (<=30), the total number of nodes in the binary tree. 
The second line gives the postorder sequence and the third line gives the inorder sequence. 
All the numbers in a line are separated by a space.

Output Specification:

For each test case, print in one line the level order traversal sequence of the corresponding binary tree. 
All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.

Sample Input:

7
2 3 1 5 7 6 4
1 2 3 4 5 6 7


Sample Output:

4 1 6 3 5 7 2



import java.util.*;
import java.io.*;

public class Main{
    private static int[] post,in;
    private static SortedMap<Integer,Integer> result;

    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        int n=Reader.nextInt();
        post=new int[n];
        in=new int[n];
        result=new TreeMap<>();
        int i;
        for (i=0;i<n;++i){
            post[i]=Reader.nextInt();
        }
        for (i=0;i<n;++i){
            in[i]=Reader.nextInt();
        }
        func(n-1,0,n-1,0);
        Iterator<Integer> it=result.values().iterator();
        System.out.print(it.next());
        while(it.hasNext()){
            System.out.print(" "+it.next());
        }
    }
    private static void func(int root,int start,int end,int idx){
        if(start>end){
            return;
        }
        int j=start;
        while (j<=end && post[root]!=in[j]){
            ++j;
        }
        result.put(idx,post[root]);
        func(root-1-end+j,start,j-1,(idx<<1)+1);
        func(root-1,j+1,end,(idx<<1)+2);
    }
}


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
