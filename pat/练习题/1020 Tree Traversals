Suppose that all the keys in a binary tree are distinct positive integers. 
Given the postorder and inorder traversal sequences,
you are supposed to output the level order traversal sequence of the corresponding binary tree.

Input Specification:

Each input file contains one test case. 
For each case, the first line gives a positive integer N (<=30), the total number of nodes in the binary tree. 
The second line gives the postorder sequence and the third line gives the inorder sequence. 
All the numbers in a line are separated by a space.

Output Specification:

For each test case, print in one line the level order traversal sequence of the corresponding binary tree. 
All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.

Sample Input:

7
2 3 1 5 7 6 4
1 2 3 4 5 6 7


Sample Output:

4 1 6 3 5 7 2



#include<bits/stdc++.h>
using namespace std;

map<int,int> m;
vector<int> post;
unordered_map<int,int> in;

void func(int k,int start,int end,int idx){
    if(start>end){
        return;
    }
    int i=in[post[k]];
    m.insert({idx,post[k]});
    func(k-1-end+i,start,i-1,idx<<1);
    func(k-1,i+1,end,(idx<<1)+1);
}

int main(){
    int n;
    cin>>n;
    post.resize(n);
    in.reserve(int(n/0.75)+1);
    for(int i=0;i<n;++i){
        cin>>post[i];
    }
    for(int i=0;i<n;++i){
        int val;
        cin>>val;
        in.insert({val,i});
    }
    func(n-1,0,n-1,1);
    bool flag=true;
    for(auto p:m){
        if(flag){
            cout<<p.second;
            flag=false;
        }else{
            cout<<" "<<p.second;
        }
    }
    return 0;
}
