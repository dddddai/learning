The “eight queens puzzle” is the problem of placing eight chess queens on an 8×8 chessboard 
so that no two queens threaten each other. 
Thus, a solution requires that no two queens share the same row, column, or diagonal. 

Here you are NOT asked to solve the puzzles. 
Instead, you are supposed to judge whether or not a given configuration of the chessboard is a solution. 
To simplify the representation of a chessboard, let us assume that no two queens will be placed in the same column. 
Then a configuration can be represented by a simple integer sequence (Q1, Q2, …, QN),
where Qi is the row number of the queen in the i-th column. 


Input Specification:

Each input file contains several test cases. The first line gives an integer K (1 < K <= 200). 
Then K lines follow, each gives a configuration in the format “N Q1 Q2 … QN”, 
where 4 <= N <= 1000 and it is guaranteed that 1 <= Qi <= N for all i=1, …, N.
The numbers are separated by spaces.

Output Specification:

For each configuration, if it is a solution to the N queens problem, print “YES” in a line; or “NO” if not.


Sample Input:
4
8 4 6 8 2 7 1 3 5
9 4 6 7 2 8 1 9 5 3
6 1 5 2 6 4 3
5 1 3 5 2 4

Sample Output:
YES
NO
NO
YES





#include<bits/stdc++.h>
using namespace std;

int main(){
    int k;
    cin>>k;
    while(k-->0){
        int n;
        cin>>n;
        vector<bool> used(n+1);
        vector<int> row(n+1);
        bool flag=true;
        for(int i=1;i<=n;++i){
            cin>>row[i];
            if(used[row[i]]){
                flag=false;
            }
            for(int j=1;j<i;++j){
                if(abs(row[i]-row[j])==i-j){
                    flag=false;
                    break;
                }
            }
            used[row[i]]=true;
        }
        cout<<(flag ? "YES":"NO")<<endl;
    }
    return 0;
}
