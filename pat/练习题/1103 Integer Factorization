The K-P factorization of a positive integer N is to write N as the sum of the P-th power of K positive integers. 
You are supposed to write a program to find the K-P factorization of N for any positive integers N, K and P.

Input Specification:

Each input file contains one test case which gives in a line the three positive integers N (<=400),
K (<=N) and P (1<P<=7). The numbers in a line are separated by a space.

Output Specification:

For each case, if the solution exists, output in the format:

N = n1^P + … nK^P

where ni (i=1, … K) is the i-th factor. All the factors must be printed in non-increasing order.

Note: the solution may not be unique. For example, the 5-2 factorization of 169 has 9 solutions, 
such as 122 + 42 + 22 + 22 + 12, or 112 + 62 + 22 + 22 + 22, or more. 
You must output the one with the maximum sum of the factors. 
If there is a tie, the largest factor sequence must be chosen
sequence { a1, a2, … aK } is said to be larger than { b1, b2, … bK } 
if there exists 1<=L<=K such that ai=bi for i<L and aL>bL

If there is no solution, simple output “Impossible”.



Sample Input 1:
169 5 2

Sample Output 1:
169 = 6^2 + 6^2 + 6^2 + 6^2 + 5^2


Sample Input 2:
169 167 3

Sample Output 2:
Impossible






#include<bits/stdc++.h>
using namespace std;

vector<int> result;
int sum;
int p;

void dfs(int target,int k,int num,vector<int>& tmp){
    if(target<0){
        return;
    }
    if(k==0 && target==0){
        if(result.empty()){
            result=tmp;
        }else{
            int curSum=0;
            for(int x:tmp){
                curSum+=x;
            }
            if(curSum>sum){
                result=tmp;
                sum=curSum;
            }else if(curSum==sum && tmp>result){
                result=tmp;
            }
        }
    }
    int m=pow(num,p);
    if(k*m<target){
        return;
    }
    tmp.push_back(num);
    for(int i=num;i>0;--i){
        dfs(target-m,k-1,i,tmp);
    }
    tmp.pop_back();
}

int main(){
    int n,k;
    cin>>n>>k>>p;
    vector<int> tmp;
    tmp.reserve(k);
    for(int i=sqrt(n);i>0;--i){
        dfs(n,k,i,tmp);
    }
    if(result.empty()){
        cout<<"Impossible";
    }else{
        cout<<n<<" = "<<result[0]<<'^'<<p;
        for(int i=1;i<k;++i){
            cout<<" + "<<result[i]<<'^'<<p;
        }
    }
    return 0;
}
