It is vitally important to have all the cities connected by highways in a war. 
If a city is occupied by the enemy, all the highways from/toward that city are closed. 
We must know immediately if we need to repair any other highways to keep the rest of the cities connected. 
Given the map of cities which have all the remaining highways marked, 
you are supposed to tell the number of highways need to be repaired, quickly.

For example, if we have 3 cities and 2 highways connecting city1-city2 and city1-city3. 
Then if city1 is occupied by the enemy, we must have 1 highway repaired, that is the highway city2-city3.

Input

Each input file contains one test case. Each case starts with a line containing 3 numbers N (<1000), M and K, 
which are the total number of cities, the number of remaining highways, and the number of cities to be checked, respectively. 
Then M lines follow, each describes a highway by 2 integers, which are the numbers of the cities the highway connects.
The cities are numbered from 1 to N. Finally there is a line containing K numbers, which represent the cities we concern.

Output

For each of the K cities, output in a line the number of highways need to be repaired if that city is lost.


Sample Input

3 2 3
1 2
1 3
1 2 3


Sample Output

1
0
0


思路：求去除了某个节点后剩余部分的连通分量数，需修的道路数=连通分量数-1

一个测试样例超时



import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        int n=Reader.nextInt();
        int m=Reader.nextInt();
        int k=Reader.nextInt();
        boolean[][] graph=new boolean[n+1][n+1];
        boolean[] visited=new boolean[n+1];
        for(int i=0;i<m;++i){
            int a=Reader.nextInt(),b=Reader.nextInt();
            graph[a][b]=graph[b][a]=true;
        }
        for(int i=0;i<k;++k){
            Arrays.fill(visited,false);
            int start=Reader.nextInt();
            visited[start]=true;
            int cnt=0;
            for(int j=1;j<=n;++j){
                if(!visited[j]){
                    dfs(graph,j,visited);
                    ++cnt;
                }
            }
            System.out.println(cnt-1);
        }
    }
    private static void dfs(boolean[][] graph,int i,boolean[] visited){
        visited[i]=true;
        for(int j=1;j<graph.length;++j){
            if(graph[i][j] && !visited[j]){
                dfs(graph,j,visited);
            }
        }
    }
}


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            //TODO add check for eof if necessary
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
