Being unique is so important to people on Mars that even their lottery is designed in a unique way. 
The rule of winning is simple: one bets on a number chosen from [1, 104]. The first one who bets on a unique number wins. 
For example, if there are 7 people betting on 5 31 5 88 67 88 17, then the second one who bets on 31 wins.

Input Specification:

Each input file contains one test case.
Each case contains a line which begins with a positive integer N (<=105) and then followed by N bets. 
The numbers are separated by a space.

Output Specification:

For each test case, print the winning number in a line. If there is no winner, print “None” instead.


Sample Input 1:
7 5 31 5 88 67 88 17

Sample Output 1:
31


Sample Input 2:
5 888 666 666 888 888

Sample Output 2:
None


两个样例超时

import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        int n=Reader.nextInt();
        int[] freq=new int[10001];
        int[] nums=new int[n];
        for (int i=0;i<n;++i){
            int num=Reader.nextInt();
            nums[i]=num;
            ++freq[num];
        }
        for (int i=0;i<n;++i){
            if (freq[nums[i]]==1){
                System.out.println(nums[i]);
                return;
            }
        }
        System.out.println("None");
    }
}

class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
