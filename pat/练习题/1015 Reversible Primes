A reversible prime in any number system is a prime whose “reverse” in that number system is also a prime. 
For example in the decimal system 73 is a reversible prime because its reverse 37 is also a prime.

Now given any two positive integers N (< 105) and D (1 < D <= 10), you are supposed to tell if N is a reversible prime with radix D.

Input Specification:

The input file consists of several test cases. Each case occupies a line which contains two integers N and D. 
The input is finished by a negative N.

Output Specification:

For each test case, print in one line “Yes” if N is a reversible prime with radix D, or “No” if not.



Sample Input:

73 10
23 2
23 10
-2

Sample Output:

Yes
Yes
No


又有一个样例没通过QAQ


import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        int n;
        while((n=Reader.nextInt())>=0){
            int radix=Reader.nextInt();
            int reversed=Integer.parseInt(new StringBuilder(Integer.toString(n,radix)).reverse().toString(),radix);
            System.out.println(isPrime(n) && isPrime(reversed)?"Yes":"No");
        }
    }
    private static boolean isPrime(int num){
        double boundary=Math.sqrt(num);
        for(int i=2;i<=boundary;++i){
            if(num%i==0){
                return false;
            }
        }
        return true;
    }
}


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
