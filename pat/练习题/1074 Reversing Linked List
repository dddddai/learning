Given a constant K and a singly linked list L, you are supposed to reverse the links of every K elements on L. 
For example, given L being 1→2→3→4→5→6, if K = 3, then you must output 3→2→1→6→5→4; 
if K = 4, you must output 4→3→2→1→5→6.

Input Specification:

Each input file contains one test case. For each case, the first line contains the address of the first node, 
a positive N (<= 105) which is the total number of nodes, 
and a positive K (<=N) which is the length of the sublist to be reversed. 
The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.
Then N lines follow, each describes a node in the format:
Address Data Next
where Address is the position of the node, Data is an integer, and Next is the position of the next node.

Output Specification:

For each case, output the resulting ordered linked list. Each node occupies a line, and is printed in the same format as in the input.

Sample Input:

00100 6 4
00000 4 99999
00100 1 12309
68237 6 -1
33218 3 00000
99999 5 68237
12309 2 33218

Sample Output:

00000 4 33218
33218 3 12309
12309 2 00100
00100 1 99999
99999 5 68237
68237 6 -1






#include<bits/stdc++.h>
using namespace std;

int main(){
    int head,n,k;
    cin>>head>>n>>k;
    unordered_map<int,int> memory(int(n/0.75)+1),next(int(n/0.75)+1);
    for(int i=0;i<n;++i){
        int a,data,nxt;
        cin>>a>>data>>nxt;
        memory[a]=data;
        next[a]=nxt;
    }
    int p=head;
    vector<pair<int,int>> arr;
    arr.reserve(n);
    while(p!=-1){
        arr.push_back({p,memory[p]});
        p=next[p];
    }
    int idx=0;
    while(idx+k<=arr.size()){
        reverse(arr.begin()+idx,arr.begin()+idx+k);
        idx+=k;
    }
    printf("%05d %d",arr[0].first,arr[0].second);
    for(int i=1;i<arr.size();++i){
        printf(" %05d\n%05d %d",arr[i].first,arr[i].first,arr[i].second);
    }
    cout<<" -1";
    return 0;
}
