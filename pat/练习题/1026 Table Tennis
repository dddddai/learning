A table tennis club has N tables available to the public. The tables are numbered from 1 to N. 
For any pair of players, if there are some tables open when they arrive, 
they will be assigned to the available table with the smallest number.
If all the tables are occupied, they will have to wait in a queue. 
It is assumed that every pair of players can play for at most 2 hours.

Your job is to count for everyone in queue their waiting time, and for each table the number of players it has served for the day.

One thing that makes this procedure a bit complicated is that the club reserves some tables for their VIP members. 
When a VIP table is open, the first VIP pair in the queue will have the priviledge to take it. 
However, if there is no VIP in the queue, the next pair of players can take it. 
On the other hand, if when it is the turn of a VIP pair, yet no VIP table is available, they can be assigned as any ordinary players.

Input Specification:

Each input file contains one test case. 
For each case, the first line contains an integer N (<=10000) – the total number of pairs of players. 
Then N lines follow, each contains 2 times and a VIP tag: 

HH:MM:SS – the arriving time,
P – the playing time in minutes of a pair of players, 
and tag – which is 1 if they hold a VIP card, or 0 if not. It is guaranteed that the arriving time is between 08:00:00 and 21:00:00 while the club is open. It is assumed that no two customers arrives at the same time. Following the players’ info, there are 2 positive integers: K (<=100) – the number of tables, and M (< K) – the number of VIP tables. The last line contains M table numbers.


Output Specification:

For each test case, 
first print the arriving time, serving time and the waiting time for each pair of players in the format shown by the sample. 
Then print in a line the number of players served by each table.
Notice that the output must be listed in chronological order of the serving time. 
The waiting time must be rounded up to an integer minute(s). 
If one cannot get a table before the closing time, their information must NOT be printed.

Sample Input:
9
20:52:00 10 0
08:00:00 20 0
08:02:00 30 0
20:51:00 10 0
08:10:00 5 0
08:12:00 10 1
20:50:00 10 0
08:01:30 15 1
20:53:00 10 1
3 1
2


Sample Output:
08:00:00 08:00:00 0
08:01:30 08:01:30 0
08:02:00 08:02:00 0
08:12:00 08:16:30 5
08:10:00 08:20:00 10
20:50:00 20:50:00 0
20:51:00 20:51:00 0
20:52:00 20:52:00 0
3 3 2



格式错误？？？wtf


import java.util.*;
import java.io.*;

public class Hello{
    public static int closeTime=21*3600;
    private static Person[] players;
    private static Table[] tables;

    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        int n=Reader.nextInt();
        players=new Person[n];
        int i;
        for(i=0;i<n;++i){
            String[] time=Reader.next().split(":");
            int seconds=Integer.valueOf(time[0])*3600+Integer.valueOf(time[1])*60+Integer.valueOf(time[2]);
            players[i]=new Person(seconds,Math.min(7200,Reader.nextInt()*60),Reader.nextInt()==1);
        }
        Arrays.sort(players,new CmpByArrivingTime());

        int k=Reader.nextInt(),m=Reader.nextInt();
        tables=new Table[k+1];
        for(i=1;i<=k;++i){
            tables[i]=new Table();
        }
        for(i=0;i<m;++i){
            tables[Reader.nextInt()].isVipTable=true;
        }
        i=0;
        int nextVip=findNextVip(-1);
        while(i<n){
            if(players[i].isVip && i<nextVip){      //防止重复给vip分配table
                ++i;
                continue;
            }
            int idx=-1,min=Integer.MAX_VALUE;
            for(int j=1;j<=k;++j){
                if(tables[j].end<min){
                    min=tables[j].end;
                    idx=j;
                }
            }
            if(tables[idx].end>=closeTime){
                break;
            }
            if(tables[idx].isVipTable){
                if(players[i].isVip){
                    allocTable(idx,i++);
                    nextVip=findNextVip(nextVip);
                }else{
                    if(nextVip<n && players[nextVip].arrivingTime<=tables[idx].end) {
                        allocTable(idx, nextVip);
                        nextVip=findNextVip(nextVip);
                    }else{
                        allocTable(idx,i++);
                    }
                }
            }else{
                if(players[i].isVip){
                    int vipIdx=-1,minEnd=Integer.MAX_VALUE;
                    for(int j=1;j<=k;++j){
                        if(tables[j].isVipTable && tables[j].end<minEnd){
                            vipIdx=j;
                        }
                    }
                    if(vipIdx==-1 || tables[vipIdx].end>players[i].arrivingTime){
                        allocTable(idx,i++);
                    }else{
                        allocTable(vipIdx,i++);
                    }
                    nextVip=findNextVip(nextVip);
                }else{
                    allocTable(idx,i++);
                }
            }
        }
        Arrays.sort(players,new CmpByStart());
        for(i=0;i<n && players[i].start<closeTime;++i){
            System.out.println();
            int hour=players[i].arrivingTime/3600;
            int minute=players[i].arrivingTime%3600/60;
            int second=players[i].arrivingTime%60;
            System.out.format("%02d:%02d:%02d ",hour,minute,second);
            hour=players[i].start/3600;
            minute=players[i].start%3600/60;
            second=players[i].start%60;
            System.out.format("%02d:%02d:%02d ",hour,minute,second);
            System.out.print(Math.round((players[i].start-players[i].arrivingTime)/60.));
        }
        System.out.print('\n');
        System.out.print(tables[1].cnt);
        for(i=2;i<=k;++i){
            System.out.print(" "+tables[i].cnt);
        }
    }
    private static int findNextVip(int vipIdx){
        int i;
        for(i=vipIdx+1;i<players.length && !players[i].isVip;++i);
        return i;
    }
    private static void allocTable(int tableIdx,int playerIdx){
        if(players[playerIdx].arrivingTime<tables[tableIdx].end){
            players[playerIdx].start=tables[tableIdx].end;
        }else{
            players[playerIdx].start=players[playerIdx].arrivingTime;
        }
        ++tables[tableIdx].cnt;
        tables[tableIdx].end=players[playerIdx].start+players[playerIdx].playingTime;
    }
}
class Person{
    Integer arrivingTime,start=Hello.closeTime,playingTime;
    boolean isVip;

    public Person(Integer arrivingTime,Integer playingTime, boolean isVip) {
        this.arrivingTime = arrivingTime;
        this.playingTime = playingTime;
        this.isVip = isVip;
    }
}
class Table{
    int end=8*3600,cnt;
    boolean isVipTable;
}
class CmpByArrivingTime implements Comparator<Person>{
    @Override
    public int compare(Person o1, Person o2) {
        return o1.arrivingTime.compareTo(o2.arrivingTime);
    }
}
class CmpByStart implements Comparator<Person>{
    @Override
    public int compare(Person o1, Person o2) {
        return o1.start.compareTo(o2.start);
    }
}
class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
