If you are a fan of Harry Potter,
you would know the world of magic has its own currency system — as Hagrid explained it to Harry, 
“Seventeen silver Sickles to a Galleon and twenty-nine Knuts to a Sickle, it’s easy enough.” 
Your job is to write a program to compute A+B where A and B are given in the standard form of “Galleon.Sickle.Knut” 
(Galleon is an integer in [0, 107], Sickle is an integer in [0, 17), and Knut is an integer in [0, 29)).

Input Specification:

Each input file contains one test case which occupies a line with A and B in the standard form, separated by one space.

Output Specification:

For each test case you should output the sum of A and B in one line, with the same format as the input.

Sample Input:
3.2.1 10.16.27

Sample Output:
14.1.28




不是说Galleon is an integer in [0, 1e7]吗？？




#include<bits/stdc++.h>
using namespace std;

int main(){
    string a,b;
    cin>>a>>b;
    int m[3],n[3];
    int last=0;
    int idx=0;
    for(int i=0;i<a.length();++i){
        if(a[i]=='.'){
            m[idx++]=stoi(a.substr(last,i));
            last=i+1;
        }
    }
    m[2]=stoi(a.substr(last));
    last=0;
    idx=0;
    for(int i=0;i<b.length();++i){
        if(b[i]=='.'){
            n[idx++]=stoi(b.substr(last,i));
            last=i+1;
        }
    }
    n[2]=stoi(b.substr(last));
    m[2]+=n[2];
    if(m[2]>=29){
        m[2]-=29;
        ++m[1];
    }
    m[1]+=n[1];
    if(m[1]>=17){
        m[1]-=17;
        ++m[0];
    }
    m[0]+=n[0];
    // if(m[0]>=1e7){
    //     m[0]-=1e7;
    // }
    cout<<m[0]<<'.'<<m[1]<<'.'<<m[2];
    return 0;
}
