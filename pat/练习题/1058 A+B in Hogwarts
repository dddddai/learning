If you are a fan of Harry Potter,
you would know the world of magic has its own currency system — as Hagrid explained it to Harry, 
“Seventeen silver Sickles to a Galleon and twenty-nine Knuts to a Sickle, it’s easy enough.” 
Your job is to write a program to compute A+B where A and B are given in the standard form of “Galleon.Sickle.Knut” 
(Galleon is an integer in [0, 107], Sickle is an integer in [0, 17), and Knut is an integer in [0, 29)).

Input Specification:

Each input file contains one test case which occupies a line with A and B in the standard form, separated by one space.

Output Specification:

For each test case you should output the sum of A and B in one line, with the same format as the input.

Sample Input:
3.2.1 10.16.27

Sample Output:
14.1.28



import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception{
        Reader.init(System.in);
        String[] a=Reader.next().split("\\.");
        String[] b=Reader.next().split("\\.");
        int[] result=new int[3];
        int carry=0;
        int k=Integer.valueOf(a[2])+Integer.valueOf(b[2]);
        if(k>=29){
            k-=29;
            carry=1;
        }
        result[2]=k;
        int s=Integer.valueOf(a[1])+Integer.valueOf(b[1])+carry;
        if(s>=17){
            s-=17;
            carry=1;
        }else{
            carry=0;
        }
        result[1]=s;
        result[0]=Integer.valueOf(a[0])+Integer.valueOf(b[0])+carry;
        System.out.format("%d.%d.%d",result[0],result[1],result[2]);
    }
}

class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
