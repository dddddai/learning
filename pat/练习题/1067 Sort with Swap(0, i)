Given any permutation of the numbers {0, 1, 2,…, N-1}, it is easy to sort them in increasing order. 
But what if Swap(0, *) is the ONLY operation that is allowed to use? 
For example, to sort {4, 0, 2, 1, 3} we may apply the swap operations in the following way:

Swap(0, 1) => {4, 1, 2, 0, 3}
Swap(0, 3) => {4, 1, 2, 3, 0}
Swap(0, 4) => {0, 1, 2, 3, 4}

Now you are asked to find the minimum number of swaps need to sort the given permutation of the first N nonnegative integers.

Input Specification:
Each input file contains one test case, 
which gives a positive N (<=105) followed by a permutation sequence of {0, 1, …, N-1}. 
All the numbers in a line are separated by a space.

Output Specification:
For each case, simply print in a line the minimum number of swaps need to sort the given permutation.

Sample Input:
10 3 5 7 2 6 4 9 0 8 1

Sample Output:
9



import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        int n=Reader.nextInt();
        int[] idxOf=new int[n];
        int cnt=0;
        for(int i=0;i<n;++i){
            idxOf[Reader.nextInt()]=i;
        }
        for(int i=1;i<n;++i){
            if(idxOf[i]!=i){
                while(idxOf[0]!=0){
                    int tmp=idxOf[0];
                    idxOf[0]=idxOf[tmp];
                    idxOf[tmp]=tmp;
                    ++cnt;
                }
                if(idxOf[i]!=i){
                    int tmp=idxOf[0];
                    idxOf[0]=idxOf[i];
                    idxOf[i]=tmp;
                    ++cnt;
                }
            }
        }
        System.out.print(cnt);
    }
}

class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
