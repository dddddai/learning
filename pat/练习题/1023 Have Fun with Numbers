Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9,
with no duplication.
Double it we will obtain 246913578, 
which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, 
only in a different permutation. Check to see the result if we double it again!

Now you are suppose to check if there are more numbers with this property.
That is, double a given number with k digits,
you are to tell if the resulting number consists of only a permutation of the digits 
in the original number.

Input Specification:

Each input file contains one test case. Each case contains one positive integer 
with no more than 20 digits.

Output Specification:

For each test case, first print in a line “Yes” if doubling the input number gives a number 
that consists of only a permutation of the digits in the original number, or “No” if not. 
Then in the next line, print the doubled number.



Sample Input:
1234567899


Sample Output:
Yes
2469135798





#include<bits/stdc++.h>
using namespace std;

int main(){
    string s;
    cin>>s;
    vector<int> arr(10);
    vector<int> doubled(s.length()+1);
    int carry=0;
    for(int i=s.length()-1;i>=0;--i){
        ++arr[s[i]-'0'];
        int num=carry+((s[i]-'0')<<1);
        if(num>=10){
            num-=10;
            carry=1;
        }else{
            carry=0;
        }
        --arr[num];
        doubled[i+1]=num;
    }
    doubled[0]=carry;
    bool flag=!carry;
    if(flag){
        for(int x:arr){
            if(x){
                flag=false;
                break;
            }
        }
    }
    cout<<(flag ? "Yes":"No")<<endl;
    for(int i=carry ? 0:1;i<doubled.size();++i){
        cout<<doubled[i];
    }
    return 0;
}
