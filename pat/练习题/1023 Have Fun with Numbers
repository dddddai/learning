Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication.
Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, 
only in a different permutation. Check to see the result if we double it again!

Now you are suppose to check if there are more numbers with this property.That is, double a given number with k digits,
you are to tell if the resulting number consists of only a permutation of the digits in the original number.

Input Specification:

Each input file contains one test case. Each case contains one positive integer with no more than 20 digits.

Output Specification:

For each test case, first print in a line “Yes” if doubling the input number gives a number 
that consists of only a permutation of the digits in the original number, or “No” if not. 
Then in the next line, print the doubled number.



Sample Input:
1234567899


Sample Output:
Yes
2469135798



import java.math.BigInteger;
import java.util.*;
import java.io.*;

public class Main{
    private static final BigInteger two=new BigInteger("2");

    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        String n=Reader.next();
        BigInteger num=new BigInteger(n);
        BigInteger doubled=num.multiply(two);
        String s=doubled.toString();
        int[] map=new int[10];
        for(int i=0;i<n.length();++i){
            ++map[n.charAt(i)-'0'];
            --map[s.charAt(i)-'0'];
        }
        for(int i=0;i<10;++i){
            if(map[i]!=0){
                System.out.println("No");
                System.out.println(s);
                return;
            }
        }
        System.out.println("Yes");
        System.out.println(s);
    }
}


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
