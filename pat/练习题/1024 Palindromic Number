A number that will be the same when it is written forwards or backwards is known as a Palindromic Number. 
For example, 1234321 is a palindromic number. All single digit numbers are palindromic numbers.

Non-palindromic numbers can be paired with palindromic ones via a series of operations. 
First, the non-palindromic number is reversed and the result is added to the original number. 
If the result is not a palindromic number, this is repeated until it gives a palindromic number. 
For example, if we start from 67, we can obtain a palindromic number in 2 steps: 67 + 76 = 143, and 143 + 341 = 484.

Given any positive integer N, you are supposed to find its paired palindromic number and the number of steps taken to find it.


Input Specification:

Each input file contains one test case. Each case consists of two positive numbers N and K, 
where N (<= 10^10) is the initial numer and K (<= 100) is the maximum number of steps. The numbers are separated by a space.


Output Specification:

For each test case, output two numbers, one in each line. 
The first number is the paired palindromic number of N, a
nd the second number is the number of steps taken to find the palindromic number.
If the palindromic number is not found after K steps, just output the number obtained at the Kth step and K instead.


Sample Input 1:
67 3

Sample Output 1:
484
2


Sample Input 2:
69 3

Sample Output 2:
1353
3





#include<bits/stdc++.h>
using namespace std;

int main(){
    string n;
    int k;
    cin>>n>>k;
    list<int> num;
    for(char c:n){
        num.push_back(c-'0');
    }
    int cnt=0;
    while(1){
        list<int> tmp=num;
        tmp.reverse();
        if(tmp==num){
            break;
        }
        if(cnt==k){
            break;
        }
        ++cnt;
        int carry=0;
        while(!num.empty()){
            int sum=num.back()+tmp.back()+carry;
            num.pop_back();
            tmp.pop_back();
            if(sum>=10){
                sum-=10;
                carry=1;
            }else{
                carry=0;
            }
            tmp.push_front(sum);
        }
        if(carry){
            tmp.push_front(carry);
        }
        num=tmp;
    }
    for(int x:num){
        cout<<x;
    }
    cout<<endl<<cnt;
}
