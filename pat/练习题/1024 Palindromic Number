A number that will be the same when it is written forwards or backwards is known as a Palindromic Number. 
For example, 1234321 is a palindromic number. All single digit numbers are palindromic numbers.

Non-palindromic numbers can be paired with palindromic ones via a series of operations. 
First, the non-palindromic number is reversed and the result is added to the original number. 
If the result is not a palindromic number, this is repeated until it gives a palindromic number. 
For example, if we start from 67, we can obtain a palindromic number in 2 steps: 67 + 76 = 143, and 143 + 341 = 484.

Given any positive integer N, you are supposed to find its paired palindromic number and the number of steps taken to find it.


Input Specification:

Each input file contains one test case. Each case consists of two positive numbers N and K, 
where N (<= 10^10) is the initial numer and K (<= 100) is the maximum number of steps. The numbers are separated by a space.


Output Specification:

For each test case, output two numbers, one in each line. 
The first number is the paired palindromic number of N, a
nd the second number is the number of steps taken to find the palindromic number.
If the palindromic number is not found after K steps, just output the number obtained at the Kth step and K instead.


Sample Input 1:
67 3

Sample Output 1:
484
2


Sample Input 2:
69 3

Sample Output 2:
1353
3



import java.util.*;
import java.io.*;
import java.math.BigInteger;

public class Main{
    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        long n=Reader.nextLong();
        int k=Reader.nextInt();
        BigInteger num=new BigInteger(String.valueOf(n));
        int i;
        for(i=0;i<k;++i){
            if(isPalindromic(num)){
                System.out.println(num);
                System.out.println(i);
                break;
            }
            num=num.add(new BigInteger(new StringBuilder(num.toString()).reverse().toString()));
        }
        if(i==k) {
            System.out.println(num);
            System.out.println(k);
        }
    }
    private static boolean isPalindromic(BigInteger num){
        String s=num.toString();
        StringBuilder tmp=new StringBuilder(s),reversed=new StringBuilder(s).reverse();
        return tmp.toString().equals(reversed.toString());
    }
}


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
