Given a collection of number segments, you are supposed to recover the smallest number from them. 
For example, given {32, 321, 3214, 0229, 87}, we can recover many numbers 
such like 32-321-3214-0229-87 or 0229-32-87-321-3214 with respect to different orders of combinations of these segments, 
and the smallest number is 0229-321-3214-32-87.

Input Specification:

Each input file contains one test case. Each case gives a positive integer N (<=10000) followed by N number segments. 
Each segment contains a non-negative integer of no more than 8 digits. All the numbers in a line are separated by a space.

Output Specification:

For each test case, print the smallest number in one line. Do not output leading zeros.

Sample Input:
5 32 321 3214 0229 87

Sample Output:
22932132143287


一个样例超时


import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception{
        Reader.init(System.in);
        int n=Reader.nextInt();
        List<String> arr=new ArrayList<>(n);
        int i;
        for(i=0;i<n;++i){
            arr.add(Reader.next());
        }
        Collections.sort(arr, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                return (o1+o2).compareTo((o2+o1));
            }
        });
        String result=String.join("",arr);
        for(i=0;i<result.length() && result.charAt(i)=='0';++i);
        if(i==result.length()){
            System.out.print(0);
        }else {
            System.out.print(result.substring(i));
        }
    }
}

class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
