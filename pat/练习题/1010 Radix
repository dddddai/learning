Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? 
The answer is “yes”, if 6 is a decimal number and 110 is a binary number.

Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.

Input Specification:

Each input file contains one test case. Each case occupies a line which contains 4 positive integers:
N1 N2 tag radix
Here N1 and N2 each has no more than 10 digits. 
A digit is less than its radix and is chosen from the set {0-9, a-z} where 0-9 represent the decimal numbers 0-9, 
and a-z represent the decimal numbers 10-35. The last number “radix” is the radix of N1 if “tag” is 1, or of N2 if “tag” is 2.

Output Specification:

For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. 
If the equation is impossible, print “Impossible”. If the solution is not unique, output the smallest possible radix.

Sample Input 1:

6 110 1 10

Sample Output 1:

2



Sample Input 2:

1 ab 1 2

Sample Output 2:

Impossible



import java.util.*;

public class Main{
    public static void main(String args[]) throws Exception {
        Scanner sc = new Scanner(System.in);
        String n1 = sc.next();
        String n2 = sc.next();
        int tag = sc.nextInt();
        int radix = sc.nextInt();
        int target = 0;
        long result = tag==1?findRadix(toDecimal(n1,radix),n2):findRadix(toDecimal(n2,radix),n1);
        if(result==-1){
            System.out.print("Impossible");
        }else{
            System.out.print(result);
        }
    }
    private static long findRadix(long num1,String num2){
        int max=0;
        for(int i=0;i<num2.length();++i){
            max=Math.max(max,num2.charAt(i));
        }
        long low= (max<='9' ? max-'0':max-'a'+10)+1;
        long high=Math.max(num1,low);
        while(low<=high){
            long mid=(low+high)>>1;
            long dec=toDecimal(num2,mid);
            if(dec<num1){
                low=mid+1;
            }else if(dec>num1){
                high=mid-1;
            }else{
                return mid;
            }
        }
        return -1;
    }
    private static long toDecimal(String num,long radix){
        long result=0;
        for(int i=0;i<num.length();++i){
            int c=num.charAt(i);
            result+= (c<='9'?c-'0':c-'a'+10)*Math.pow(radix,num.length()-1-i);
        }
        return result;
    }
}
