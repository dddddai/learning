Excel can sort records according to any column. Now you are supposed to imitate this function.

Input
Each input file contains one test case. For each case, the first line contains two integers N (<=100000) and C, 
where N is the number of records and C is the column that you are supposed to sort the records with. 
Then N lines follow, each contains a record of a student. 
A student’s record consists of his or her distinct ID (a 6-digit number), 
                                                   name (a string with no more than 8 characters without space), 
                                                   and grade (an integer between 0 and 100, inclusive).

Output
For each test case, output the sorting result in N lines. 
That is, if C = 1 then the records must be sorted in increasing order according to ID’s; 
if C = 2 then the records must be sorted in non-decreasing order according to names; 
and if C = 3 then the records must be sorted in non-decreasing order according to grades. 
If there are several students who have the same name or grade, they must be sorted according to their ID’s in increasing order.


Sample Input 1
3 1
000007 James 85
000010 Amy 90
000001 Zoe 60

Sample Output 1
000001 Zoe 60
000007 James 85
000010 Amy 90


Sample Input 2
4 2
000007 James 85
000010 Amy 90
000001 Zoe 60
000002 James 98

Sample Output 2
000010 Amy 90
000002 James 98
000007 James 85
000001 Zoe 60


Sample Input 3
4 3
000007 James 85
000010 Amy 90
000001 Zoe 60
000002 James 90

Sample Output 3
000001 Zoe 60
000007 James 85
000002 James 90
000010 Amy 90



一个样例超时


import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception {
        Reader.init(System.in);
        int n=Reader.nextInt(),c=Reader.nextInt();
        Record[] arr=new Record[n];
        for (int i=0;i<n;++i){
            arr[i]=new Record(c,Reader.next(),Reader.next(),Reader.nextInt());
        }
        Arrays.sort(arr);
        for (Record r:arr){
            System.out.println(r);
        }
    }
}
class Record implements Comparable<Record>{
    public int column;
    public String id;
    public String name;
    public Integer grade;

    public Record(int column, String id, String name, int grade) {
        this.column = column;
        this.id = id;
        this.name = name;
        this.grade = grade;
    }

    public int compareTo(Record rec){
        switch (column){
            case 1:
                return this.id.compareTo(rec.id);
            case 2:
                if(this.name.equals(rec.name)){
                    return this.id.compareTo(rec.id);
                }
                return this.name.compareTo(rec.name);
            case 3:
                if(this.grade.equals(rec.grade)){
                    return this.id.compareTo(rec.id);
                }
                return this.grade.compareTo(rec.grade);
        }
        return -1;
    }

    @Override
    public String toString() {
        return id+" "+name+" "+grade;
    }
}


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
