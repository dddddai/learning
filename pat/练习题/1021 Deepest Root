A graph which is connected and acyclic can be considered a tree. The height of the tree depends on the selected root. 
Now you are supposed to find the root that results in a highest tree. Such a root is called the deepest root.


Input Specification:

Each input file contains one test case. 
For each case, the first line contains a positive integer N (<=10000) which is the number of nodes, 
and hence the nodes are numbered from 1 to N. Then N-1 lines follow, each describes an edge by given the two adjacent nodes’ numbers.


Output Specification:

For each test case, print each of the deepest roots in a line. 
If such a root is not unique, print them in increasing order of their numbers. 
In case that the given graph is not a tree, print “Error: K components” where K is the number of connected components in the graph.


Sample Input 1:

5
1 2
1 3
1 4
2 5

Sample Output 1:

3
4
5


Sample Input 2:

5
1 3
1 4
2 5
3 4

Sample Output 2:

Error: 2 components





#include<bits/stdc++.h>
using namespace std;

vector<bool> visited;

void dfs(vector<forward_list<int>>& graph,int idx){
    visited[idx]=true;
    for(int next:graph[idx]){
        if(!visited[next]){
            dfs(graph,next);
        }
    }
}

int getMaxDepth(vector<forward_list<int>>& graph,int idx,int pre){
    int result=1;
    for(int next:graph[idx]){
        if(next!=pre){
            result=max(result,getMaxDepth(graph,next,idx)+1);
        }
    }
    return result;
}

int main(){
    int n;
    cin>>n;
    vector<forward_list<int>> graph(n+1);
    for(int i=0;i<n-1;++i){
        int a,b;
        cin>>a>>b;
        graph[a].push_front(b);
        graph[b].push_front(a);
    }
    visited.resize(n+1);
    int cnt=0;
    for(int i=1;i<=n;++i){
        if(!visited[i]){
            dfs(graph,i);
            ++cnt;
        }
    }
    if(cnt>1){
        printf("Error: %d components",cnt);
        return 0;
    }
    list<int> roots;
    int maxDepth=0;
    for(int i=1;i<=n;++i){
        int d=getMaxDepth(graph,i,0);
        if(d>maxDepth){
            maxDepth=d;
            roots.clear();
            roots.push_back(i);
        }else if(d==maxDepth){
            roots.push_back(i);
        }
    }
    for(int root:roots){
        cout<<root<<endl;
    }
    return 0;
}
