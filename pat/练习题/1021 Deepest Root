A graph which is connected and acyclic can be considered a tree. The height of the tree depends on the selected root. 
Now you are supposed to find the root that results in a highest tree. Such a root is called the deepest root.


Input Specification:

Each input file contains one test case. 
For each case, the first line contains a positive integer N (<=10000) which is the number of nodes, 
and hence the nodes are numbered from 1 to N. Then N-1 lines follow, each describes an edge by given the two adjacent nodes’ numbers.


Output Specification:

For each test case, print each of the deepest roots in a line. 
If such a root is not unique, print them in increasing order of their numbers. 
In case that the given graph is not a tree, print “Error: K components” where K is the number of connected components in the graph.


Sample Input 1:

5
1 2
1 3
1 4
2 5

Sample Output 1:

3
4
5


Sample Input 2:

5
1 3
1 4
2 5
3 4

Sample Output 2:

Error: 2 components


一个样例超时


import java.util.*;
import java.io.*;

public class Main{
    public static void main(String[] args) throws Exception{
        Reader.init(System.in);
        int n=Reader.nextInt();
        List<List<Integer>> graph=new ArrayList<>(n+1);
        for (int i=0;i<=n;++i){
            graph.add(new ArrayList<>());
        }
        boolean[] visited=new boolean[n+1];
        int[] depth=new int[n+1];
        int cnt=0;
        int max=1;
        for(int i=1;i<n;++i){
            int a=Reader.nextInt(),b=Reader.nextInt();
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
        for(int i=1;i<=n;++i){
            if(!visited[i]) {
                dfs(graph,i,visited);
                ++cnt;
            }
        }
        if(cnt!=1){
            System.out.println("Error: "+cnt+" components");
            return;
        }
        Arrays.fill(visited,false);
        for (int i=1;i<=n;++i){
            depth[i]=getDepth(graph,i,visited);
            max=Math.max(max,depth[i]);
        }
        for (int i=1;i<=n;++i){
            if(depth[i]==max) {
                System.out.println(i);
            }
        }
    }
    private static void dfs(List<List<Integer>> graph,int i,boolean[] visited){
        visited[i]=true;
        for(int j:graph.get(i)) {
            if (!visited[(int)j]) {
                dfs(graph,j,visited);
            }
        }
    }
    private static int getDepth(List<List<Integer>> graph,int i,boolean[] visited){
        visited[i]=true;
        int maxDepth=1;
        for(int j:graph.get(i)) {
            if (!visited[j]) {
                maxDepth=Math.max(maxDepth,1+getDepth(graph,j,visited));
            }
        }
        visited[i]=false;
        return maxDepth;
    }
}


class Reader {
    static BufferedReader reader;
    static StringTokenizer tokenizer;

    /** call this method to initialize reader for InputStream */
    static void init(InputStream input) {
        reader = new BufferedReader(
                new InputStreamReader(input) );
        tokenizer = new StringTokenizer("");
    }

    /** get next word */
    static String next() throws IOException {
        while ( ! tokenizer.hasMoreTokens() ) {
            tokenizer = new StringTokenizer(
                    reader.readLine() );
        }
        return tokenizer.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt( next() );
    }

    static double nextDouble() throws IOException {
        return Double.parseDouble( next() );
    }
    static long nextLong() throws IOException{
        return Long.parseLong(next());
    }
}
