This time, you are supposed to help us collect the data for family-owned property.
Given each person’s family members, and the estate（房产）info under his/her own name,
we need to know the size of each family, and the average area and number of sets of their real estate.

Input Specification:

Each input file contains one test case. For each case, the first line gives a positive integer N (<=1000).
Then N lines follow, each gives the infomation of a person who owns estate in the format:

ID Father Mother k Child1 … Childk M_estate Area

where ID is a unique 4-digit identification number for each person;
Father and Mother are the ID’s of this person’s parents (if a parent has passed away, 
-1 will be given instead); k (0<=k<=5) is the number of children of this person; 
Childi’s are the ID’s of his/her children;
M_estate is the total number of sets of the real estate under his/her name; 
and Area is the total area of his/her estate.

Output Specification:

For each case, first print in a line the number of families 
(all the people that are related directly or indirectly are considered in the same family). 
Then output the family info in the format:

ID M AVG_sets AVG_area

where ID is the smallest ID in the family; M is the total number of family members; 
AVG_sets is the average number of sets of their real estate; and AVG_area is the average area. 
The average numbers must be accurate up to 3 decimal places. 
The families must be given in descending order of their average areas, 
and in ascending order of the ID’s if there is a tie.


Sample Input:
10
6666 5551 5552 1 7777 1 100
1234 5678 9012 1 0002 2 300
8888 -1 -1 0 1 1000
2468 0001 0004 1 2222 1 500
7777 6666 -1 0 2 300
3721 -1 -1 1 2333 2 150
9012 -1 -1 3 1236 1235 1234 1 100
1235 5678 9012 0 1 50
2222 1236 2468 2 6661 6662 1 300
2333 -1 3721 3 6661 6662 6663 1 100

Sample Output:
3
8888 1 1.000 1000.000
0001 15 0.600 100.000
5551 4 0.750 100.000






#include<bits/stdc++.h>
using namespace std;

struct Family{
    int id,cnt;
    double sets,area;

    Family(int i,int c,double s,double a){
        id=i;
        cnt=c;
        sets=s;
        area=a;
    }
};

int main(){
    int n;
    cin>>n;
    unordered_map<int,forward_list<int>> graph(int(n/0.75)+1);
    unordered_map<int,pair<int,int>> info(int(n/0.75)+1);
    for(int i=0;i<n;++i){
        int id,father,mother,k;
        cin>>id>>father>>mother>>k;
        auto& list=graph[id];
        if(father!=-1){
            list.push_front(father);
            graph[father].push_front(id);
        }
        if(mother!=-1){
            list.push_front(mother);
            graph[mother].push_front(id);
        }
        for(int j=0;j<k;++j){
            int child;
            cin>>child;
            list.push_front(child);
            graph[child].push_front(id);
        }
        cin>>info[id].first>>info[id].second;
    }
    unordered_set<int> visited(int(n/0.75)+1);
    vector<Family> result;
    for(auto& entry:graph){
        if(visited.find(entry.first)==visited.end()){
            queue<int> q;
            q.push(entry.first);
            visited.insert(q.front());
            int id=INT_MAX,cnt=0,sets=0,area=0;
            while(!q.empty()){
                id=min(id,q.front());
                ++cnt;
                sets+=info[q.front()].first;
                area+=info[q.front()].second;
                for(int child:graph[q.front()]){
                    if(visited.find(child)==visited.end()){
                        q.push(child);
                        visited.insert(child);
                    }
                }
                q.pop();
            }
            result.push_back(Family(id,cnt,sets/double(cnt),area/double(cnt)));
        }
    }
    sort(result.begin(),result.end(),[](Family& a,Family& b){
        if(a.area==b.area){
            return a.id<b.id;
        }
        return a.area>b.area;
    });
    cout<<result.size()<<endl;
    for(Family& f:result){
        printf("%04d %d %.3f %.3f\n",f.id,f.cnt,f.sets,f.area);
    }
    return 0;
}
